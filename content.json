{"meta":{"title":"Hexo","subtitle":"","description":"","author":"xiaojujing","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"4_IDEA和数组","slug":"4_IDEA和数组","date":"2020-11-02T15:43:12.066Z","updated":"2020-11-02T15:43:12.208Z","comments":true,"path":"2020/11/02/4_IDEA和数组/","link":"","permalink":"http://yoursite.com/2020/11/02/4_IDEA%E5%92%8C%E6%95%B0%E7%BB%84/","excerpt":"","text":"第一部分 : IDEA开发工具参见 ：IEDA的安装请参考文件夹PPT中的 04_IDEA.ppt 1.数组1.1 数组介绍​ 数组就是存储数据长度固定的容器，存储多个数据的数据类型要一致。 1.2 数组的定义格式1.2.1 第一种格式​ 数据类型[] 数组名 ​ 示例： 123int[] arr; double[] arr; char[] arr; 1.2.2 第二种格式​ 数据类型 数组名[] ​ 示例： 123int arr[];double arr[];char arr[]; 1.3 数组的动态初始化1.3.1 什么是动态初始化​ 数组动态初始化就是只给定数组的长度，由系统给出默认初始化值 1.3.2 动态初始化格式1数据类型[] 数组名 = new 数据类型[数组长度]; 1int[] arr = new int[3]; 1.3.3 动态初始化格式详解 等号左边： int:数组的数据类型 []:代表这是一个数组 arr:代表数组的名称 等号右边： new:为数组开辟内存空间 int:数组的数据类型 []:代表这是一个数组 3:代表数组的长度 代码 : 1234567891011121314151617181920212223242526272829303132333435package com.itheima.array;public class Demo2Array &#123; /* 数组的动态初始化: 在初始化的时候, 需要手动指定数组的长度, 系统会为数组容器分配初始值. 动态初始化格式: 数据类型[] 数组名 = new 数据类型[数组的长度]; 注意: 打印数组变量的时候, 会打印出数组的内存地址 [I@10f87f48 : @ : 分隔符 [ : 当前的空间是一个数组类型 I : 当前数组容器中所存储的数据类型 10f87f48 : 十六进制内存地址 0 1 2 3 4 5 6 7 8 9 a b c d e f */ public static void main(String[] args) &#123; // 数据类型[] 数组名 = new 数据类型[数组的长度]; // 通过new关键字创建了一个int类型的数组容器, 该容器可以存储5个int类型的整数, 该容器被arr数组变量所记录 int[] arr = new int[5]; // [I@10f87f48 System.out.println(arr); byte[] bArr = new byte[3]; // [B@b4c966a System.out.println(bArr); &#125;&#125; 1.4 数组元素访问1.4.1 什么是索引​ 每一个存储到数组的元素，都会自动的拥有一个编号，从0开始,是连续的,不间断的,每次加1。 ​ 这个自动编号称为数组索引(index)，可以通过数组的索引访问到数组中的元素。 1.4.2访问数组元素格式1数组名[索引]; 1.4.3示例代码1234567891011121314151617181920212223242526272829303132333435363738package com.itheima.array;public class Demo3ArrayIndex &#123; /* 数组动态初始化: 初始化的时候, 手动指定数组长度, 系统会为数组容器分配初始值. 数组的元素访问格式: 数组名[索引] 索引: 数组中数据的编号方式, 编号从0开始 作用: 访问数组容器中的空间位置 注意: 数组在创建完毕后, 即使没有赋值, 也可以取出, 但取出的元素都是默认初始化值. */ public static void main(String[] args) &#123; int[] arr = new int[3]; // 0 1 2 System.out.println(arr); // 数组的内存地址 [I@10f87f48 // 数组名[索引] 访问数组容器中的空间位置 System.out.println(arr[0]); // 0 系统自动分配的默认初始化值 System.out.println(arr[1]); System.out.println(arr[2]); System.out.println(\"--------------\"); // 数组名[索引] arr[0] = 11; arr[1] = 22; arr[2] = 33; System.out.println(arr[0]); System.out.println(arr[1]); System.out.println(arr[2]); &#125;&#125; 1.5 内存分配1.5.1 内存概述​ 内存是计算机中的重要原件，临时存储区域，作用是运行程序。 ​ 我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的。 ​ 必须放进内存中才能运行，运行完毕后会清空内存。 ​ Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。 1.5.2 java中的内存分配 目前我们只需要记住两个内存，分别是：栈内存和堆内存 区域名称 作用 寄存器 给CPU使用，和我们开发无关。 本地方法栈 JVM在使用操作系统功能的时候使用，和我们开发无关。 方法区 存储可以运行的class文件。 堆内存 存储对象或者数组，new来创建的，都存储在堆内存。 方法栈 方法运行时使用的内存，比如main方法运行，进入方法栈中执行。 1.6 Java内存分配-一个数组内存图 1.7 两个数组内存图 1.8 多个数组指向相同内存图 1.9 数组的静态初始化1.9.1 什么是静态初始化​ 在创建数组时，直接将元素确定 1.9.2 静态初始化格式 完整版格式 1数据类型[] 数组名 = new 数据类型[]&#123;元素1,元素2,...&#125;; 简化版格式 1数据类型[] 数组名 = &#123;元素1,元素2,...&#125;; 1.9.3示例代码123456789101112131415161718192021222324252627package com.itheima.array2;public class Demo1Array &#123; /* 数组静态初始化 : 初始化时指定每个数组元素的初始值，由系统决定数组长度 完整格式: 数据类型[] 数组名 = new 数据类型[]&#123;数据1,数据2,数据3...&#125;; 简化格式: 数据类型[] 数组名 = &#123;数据1,数据2,数据3...&#125;; */ public static void main(String[] args) &#123; // 数据类型[] 数组名 = new 数据类型[]&#123;数据1,数据2,数据3...&#125;; int[] arr = new int[]&#123;11,22,33&#125;; System.out.println(arr[0]); System.out.println(arr[1]); System.out.println(arr[2]); // 数据类型[] 数组名 = &#123;数据1,数据2,数据3...&#125;; int[] arr2 = &#123;44,55,66&#125;; System.out.println(arr2); System.out.println(arr2[0]); System.out.println(arr2[1]); System.out.println(arr2[2]); &#125;&#125; 1.10 数组操作的两个常见问题1.10.1 索引越界异常 出现原因 123456public class ArrayDemo &#123; public static void main(String[] args) &#123; int[] arr = new int[3]; System.out.println(arr[3]); &#125;&#125; 数组长度为3，索引范围是0~2，但是我们却访问了一个3的索引。 程序运行后，将会抛出ArrayIndexOutOfBoundsException 数组越界异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。 解决方案 将错误的索引修改为正确的索引范围即可！ 1.10.2 空指针异常 出现原因 123456789public class ArrayDemo &#123; public static void main(String[] args) &#123; int[] arr = new int[3]; //把null赋值给数组 arr = null; System.out.println(arr[0]); &#125;&#125; arr = null 这行代码，意味着变量arr将不会在保存数组的内存地址，也就不允许再操作数组了，因此运行的时候会抛出 NullPointerException 空指针异常。在开发中，数组的空指针是不能出现的，一旦出现了，就必须要修改我们编写的代码。 解决方案 给数组一个真正的堆内存空间引用即可！ 1.11 数组遍历 数组遍历：就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石。 12345678910public class ArrayTest01 &#123; public static void main(String[] args) &#123; int[] arr = &#123; 1, 2, 3, 4, 5 &#125;; System.out.println(arr[0]); System.out.println(arr[1]); System.out.println(arr[2]); System.out.println(arr[3]); System.out.println(arr[4]); &#125;&#125; 以上代码是可以将数组中每个元素全部遍历出来，但是如果数组元素非常多，这种写法肯定不行，因此我们需要改造成循环的写法。数组的索引是 0 到 lenght-1 ，可以作为循环的条件出现。 1234567891011public class ArrayTest01 &#123; public static void main(String[] args) &#123; //定义数组 int[] arr = &#123;11, 22, 33, 44, 55&#125;; //使用通用的遍历格式 for(int x=0; x&lt;arr.length; x++) &#123; System.out.println(arr[x]); &#125; &#125;&#125; 1.12 数组获取最大值 最大值获取：从数组的所有元素中找出最大值。 实现思路： 定义变量，保存数组0索引上的元素 遍历数组，获取出数组中的每个元素 将遍历到的元素和保存数组0索引上值的变量进行比较 如果数组元素的值大于了变量的值，变量记录住新的值 数组循环遍历结束，变量保存的就是数组中的最大值 代码实现： 12345678910111213141516171819202122232425262728293031package com.itheima.test;import java.util.Scanner;public class Test2Array &#123; /* 需求: 从数组中查找最大值 int[] arr = &#123;12,45,98,73,60&#125;; 实现步骤: 1. 假设数组中的第一个元素为最大值 2. 遍历数组, 获取每一个元素, 准备进行比较 3. 如果比较的过程中, 出现了比max更大的, 让max记录更大的值 4. 循环结束后, 打印最大值. */ public static void main(String[] args) &#123; int[] arr = &#123;12,45,98,73,60&#125;; // 1. 假设数组中的第一个元素为最大值 int max = arr[0]; // 2. 遍历数组, 获取每一个元素, 准备进行比较 for(int i = 1; i &lt; arr.length; i++)&#123; // 3. 如果比较的过程中, 出现了比max更大的, 让max记录更大的值 if(arr[i] &gt; max)&#123; max = arr[i]; &#125; &#125; // 4. 循环结束后, 打印最大值. System.out.println(\"max:\" + max); &#125;&#125; 1.13 数组元素求和 需求：键盘录入5个整数，存储到数组中，并对数组求和 思路： 1234561.创建键盘录入对象，准备键盘录入2.定义一个求和变量，准备记录累加后的结果3.动态初始化一个长度为5的int数组，准备存储键盘录入的数值4.将键盘录入的数值存储到数组中5.遍历数组，取出每一个元素，并求和6.输出总和 代码实现： 12345678910111213141516171819202122232425262728293031323334353637383940package com.itheima.test;import java.util.Scanner;public class Test3Array &#123; /* 需求：键盘录入5个整数，存储到数组中，并对数组求和 思路： 1.创建键盘录入对象，准备键盘录入 2.定义一个求和变量，准备记录累加后的结果 3.动态初始化一个长度为5的int数组，准备存储键盘录入的数值 4.将键盘录入的数值存储到数组中 5.遍历数组，取出每一个元素，并求和 6.输出总和 */ public static void main(String[] args) &#123; // 1.创建键盘录入对象，准备键盘录入 Scanner sc = new Scanner(System.in); // 2.定义一个求和变量，准备记录累加后的结果 int sum = 0; // 3.动态初始化一个长度为5的int数组，准备存储键盘录入的数值 int[] arr = new int[5]; // 4.将键盘录入的数值存储到数组中 for(int i = 0; i &lt; arr.length; i++)&#123; System.out.println(\"请输入第\" + (i+1) + \"个整数:\"); //arr[i] = 10; arr[i] = sc.nextInt(); &#125; // 5.遍历数组，取出每一个元素，并求和 for (int i = 0; i &lt; arr.length; i++) &#123; sum += arr[i]; &#125; // 6.输出总和 System.out.println(\"sum:\" + sum); &#125;&#125; 1.14 数组基本查找【应用】 需求： 12已知一个数组 arr &#x3D; &#123;19, 28, 37, 46, 50&#125;; 键盘录入一个数据，查找该数据在数组中的索引，并在控制台输出找到的索引值。 思路： 1234561.定义一个数组，用静态初始化完成数组元素的初始化2.键盘录入要查找的数据，用一个变量接收3.定义一个索引变量，初始值为-14.遍历数组，获取到数组中的每一个元素5.拿键盘录入的数据和数组中的每一个元素进行比较，如果值相同，就把该值对应的索引赋值给索引变量，并结束循环6.输出索引变量 代码实现： 1234567891011121314151617181920212223public static void main(String[] args) &#123; // 1.定义一个数组，用静态初始化完成数组元素的初始化 int[] arr = &#123;19, 28, 37, 46, 50&#125;; // 2.键盘录入要查找的数据，用一个变量接收 Scanner sc = new Scanner(System.in); System.out.println(\"请输入您要查找的元素:\"); int num = sc.nextInt(); // 3.定义一个索引变量，初始值为-1 // 假设要查找的数据, 在数组中就是不存在的 int index = -1; // 4.遍历数组，获取到数组中的每一个元素 for (int i = 0; i &lt; arr.length; i++) &#123; // 5.拿键盘录入的数据和数组中的每一个元素进行比较，如果值相同，就把该值对应的索引赋值给索引变量，并结束循环 if(num == arr[i])&#123; // 如果值相同，就把该值对应的索引赋值给索引变量，并结束循环 index = i; break; &#125; &#125; // 6.输出索引变量 System.out.println(index); &#125;&#125; 1.15 评委打分【应用】 需求：在编程竞赛中，有6个评委为参赛的选手打分，分数为0-100的整数分。 1选手的最后得分为：去掉一个最高分和一个最低分后 的4个评委平均值 (不考虑小数部分)。 思路： 123456781.定义一个数组，用动态初始化完成数组元素的初始化，长度为62.键盘录入评委分数3.由于是6个评委打分，所以，接收评委分数的操作，用循环4.求出数组最大值5.求出数组最小值6.求出数组总和7.按照计算规则进行计算得到平均分8.输出平均分 代码实现： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748 public static void main(String[] args) &#123; // 1.定义一个数组，用动态初始化完成数组元素的初始化，长度为6 int[] arr = new int[6]; // 2.键盘录入评委分数 Scanner sc = new Scanner(System.in); // 3.由于是6个评委打分，所以，接收评委分数的操作，用循环 for (int i = 0; i &lt; arr.length; i++) &#123; System.out.println(\"请输入第\" + (i+1) + \"个评委的打分:\"); int score = sc.nextInt(); if(score &gt;= 0 &amp;&amp; score &lt;= 100)&#123; // 合法的分值 arr[i] = score; &#125;else&#123; // 非法的分值 System.out.println(\"您的打分输入有误, 请检查是否是0-100之间的\"); i--; &#125; &#125; // 4.求出数组最大值 int max = arr[0]; for (int i = 1; i &lt; arr.length; i++) &#123; if(max &lt; arr[i])&#123; max = arr[i]; &#125; &#125; // 5.求出数组最小值 int min = arr[0]; for (int i = 1; i &lt; arr.length; i++) &#123; if(min &gt; arr[i])&#123; min = arr[i]; &#125; &#125; // 6.求出数组总和 int sum = 0; for (int i = 0; i &lt; arr.length; i++) &#123; sum += arr[i]; &#125; // 7.按照计算规则进行计算得到平均分 int avg = (sum - max - min ) / (arr.length-2); // 8.输出平均分 System.out.println(avg); &#125;&#125; 总结数组 第一种：动态初始化格式 建议:数据类型 [] 数组名 = new 数据类型 [数组的长度]; 数据类型 数组名 [] = new 数据类型 [数组的长度]; 第二种：静态初始化格式 数据类型 数组名 [] = new 数据类型 [] {元素1，元素2，元素3…..};—-&gt;简化 用的比较多的:数据类型 数组名 [] = {元素1，元素2，元素3…..}; 数组的好处： 1.可以一次开辟多个空间 2.可以对这多个空间进行统一管理 3.数组定义好之后，每个数组空间都有一个唯一编号（索引，下标，角标），我们在操作数组的时候，都是对统一的数组名和对应的索引来操作数组的每一个空间。赋值:数组名[索引]=值; 拿值:数组名[索引] 4.数组的索引是从0开始，到长度-1结束. 5.我们可以通过数组名.length这个属性来获取数组的长度。 6.获取数组对应索引空间上的数据：数组名[当前的索引]","categories":[],"tags":[]},{"title":"3_switch语句","slug":"3_switch语句","date":"2020-11-02T15:42:34.078Z","updated":"2020-11-02T15:42:34.545Z","comments":true,"path":"2020/11/02/3_switch语句/","link":"","permalink":"http://yoursite.com/2020/11/02/3_switch%E8%AF%AD%E5%8F%A5/","excerpt":"","text":"1. switch语句1.1 分支语句switch语句 格式 123456789101112switch (表达式) &#123; case 1: 语句体1; break; case 2: 语句体2; break; ... default: 语句体n+1; break;&#125; 执行流程： 首先计算出表达式的值 其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结 束。 最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。 1.2 switch案例-减肥计划 需求：键盘录入星期数，显示今天的减肥活动 1234567周一：跑步 周二：游泳 周三：慢走 周四：动感单车周五：拳击 周六：爬山 周日：好好吃一顿 示例代码： 1234567891011121314151617181920212223242526272829303132333435public static void main(String[] args)&#123; // 1. 键盘录入星期数据，使用变量接收 Scanner sc = new Scanner(System.in); System.out.println(\"请输入\"); int week = sc.nextInt(); // 2. 多情况判断，采用switch语句实现 switch(week)&#123; // 3. 在不同的case中，输出对应的减肥计划 case 1: System.out.println(\"跑步\"); break; case 2: System.out.println(\"游泳\"); break; case 3: System.out.println(\"慢走\"); break; case 4: System.out.println(\"动感单车\"); break; case 5: System.out.println(\"拳击\"); break; case 6: System.out.println(\"爬山\"); break; case 7: System.out.println(\"好好吃一顿\"); break; default: System.out.println(\"您的输入有误\"); break; &#125; &#125;&#125; 1.3 switch语句case穿透 概述 : 如果switch语句中,case省略了break语句, 就会开始case穿透 需求 : 键盘录入星期数，输出工作日、休息日 (1-5)工作日，(6-7)休息日 示例代码： 1234567891011121314151617181920212223242526272829303132/*case穿透是如何产生的? 如果switch语句中,case省略了break语句, 就会开始case穿透. 现象： 当开始case穿透，后续的case就不会具有匹配效果，内部的语句都会执行 直到看见break，或者将整体switch语句执行完毕，才会结束。*/public static void main(String[] args)&#123; Scanner sc = new Scanner(System.in); System.out.println(\"请输入星期数:\"); int week = sc.nextInt(); switch(week)&#123; case 1: case 2: case 3: case 4: case 5: System.out.println(\"工作日\"); break; case 6: case 7: System.out.println(\"休息日\"); break; default: System.out.println(\"您的输入有误\"); break; &#125; &#125; &#125; 2. for循环2.1 循环语句-for循环 循环： 循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复 执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形 成死循环。 for循环格式： 123for (初始化语句;条件判断语句;条件控制语句) &#123; 循环体语句;&#125; 格式解释： 初始化语句： 用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样 条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去 循环体语句： 用于表示循环反复执行的内容，简单说就是循环反复执行的事情 条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去 执行流程： ①执行初始化语句 ②执行条件判断语句，看其结果是true还是false ​ 如果是false，循环结束 ​ 如果是true，继续执行 ③执行循环体语句 ④执行条件控制语句 ⑤回到②继续 2.2 for循环案例-输出数据1-5和5-1 需求：在控制台输出1-5和5-1的数据 示例代码： 12345678910111213public class ForTest01 &#123; public static void main(String[] args) &#123; //需求：输出数据1-5 for(int i=1; i&lt;=5; i++) &#123; System.out.println(i); &#125; System.out.println(\"--------\"); //需求：输出数据5-1 for(int i=5; i&gt;=1; i--) &#123; System.out.println(i); &#125; &#125;&#125; 2.3 for循环案例-求1-5数据和 需求：求1-5之间的数据和，并把求和结果在控制台输出 示例代码： 12345678910111213141516171819202122public class ForTest02 &#123; public static void main(String[] args) &#123; //求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0 int sum = 0; //从1开始到5结束的数据，使用循环结构完成 for(int i=1; i&lt;=5; i++) &#123; //将反复进行的事情写入循环结构内部 // 此处反复进行的事情是将数据 i 加到用于保存最终求和的变量 sum 中 sum += i; /* sum += i; sum = sum + i; 第一次：sum = sum + i = 0 + 1 = 1; 第二次：sum = sum + i = 1 + 2 = 3; 第三次：sum = sum + i = 3 + 3 = 6; 第四次：sum = sum + i = 6 + 4 = 10; 第五次：sum = sum + i = 10 + 5 = 15; */ &#125; //当循环执行完毕时，将最终数据打印出来 System.out.println(\"1-5之间的数据和是：\" + sum); &#125;&#125; 本题要点： 今后遇到的需求中，如果带有求和二字，请立即联想到求和变量 求和变量的定义位置，必须在循环外部，如果在循环内部则计算出的数据将是错误的 2.4 for循环案例-求1-100偶数和 需求：求1-100之间的偶数和，并把求和结果在控制台输出 } 示例代码： 123456789101112131415public class ForTest03 &#123; public static void main(String[] args) &#123; //求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0 int sum = 0; //对1-100的数据求和与1-5的数据求和几乎完全一样，仅仅是结束条件不同 for(int i=1; i&lt;=100; i++) &#123; //对1-100的偶数求和，需要对求和操作添加限制条件，判断是否是偶数 if(i%2 == 0) &#123; sum += i; &#125; &#125; //当循环执行完毕时，将最终数据打印出来 System.out.println(\"1-100之间的偶数和是：\" + sum); &#125;&#125; 2.5 for循环案例-水仙花数 需求：在控制台输出所有的“水仙花数” 解释：什么是水仙花数？ 水仙花数，指的是一个三位数，个位、十位、百位的数字立方和等于原数 例如153 3*3*3 + 5*5*5 + 1*1*1 = 153 思路： 获取所有的三位数，准备进行筛选，最小的三位数为100，最大的三位数为999，使用for循环获取 获取每一个三位数的个位，十位，百位，做if语句判断是否是水仙花数 示例代码 1234567891011121314151617public class ForTest04 &#123; public static void main(String[] args) &#123; //输出所有的水仙花数必然要使用到循环，遍历所有的三位数，三位数从100开始，到999结束 for(int i=100; i&lt;1000; i++) &#123; //在计算之前获取三位数中每个位上的值 int ge = i%10; int shi = i/10%10; int bai = i/10/10%10; //判定条件是将三位数中的每个数值取出来，计算立方和后与原始数字比较是否相等 if(ge*ge*ge + shi*shi*shi + bai*bai*bai == i) &#123; //输出满足条件的数字就是水仙花数 System.out.println(i); &#125; &#125; &#125;&#125; 2.6 for循环案例-每行打印2个水仙花数(统计) 需求：在控制台输出所有的“水仙花数”，要求每行打印2个 示例代码： 12345678910111213141516171819202122232425262728293031323334public class Demo6For &#123; /* 需求：在控制台输出所有的“水仙花数”，要求每行打印2个 System.out.print (打印内容); 打印后不换行 System.out.println(打印内容); 打印后换行 分析: 1. 定义变量count，用于保存“打印过”的数量，初始值为0 2. 在判定和打印水仙花数的过程中，拼接空格, 但不换行，并在打印后让count变量+1，记录打印过的数量 3. 在每一次count变量+1后，判断是否到达了2的倍数，是的话，换行。 */ public static void main(String[] args)&#123; // 1. 定义变量count，用于保存“打印过”的数量，初始值为0 int count = 0; for(int i = 100; i &lt;= 999; i++)&#123; int ge = i % 10; int shi = i / 10 % 10; int bai = i / 10 / 10 % 10; if( (ge*ge*ge + shi*shi*shi + bai*bai*bai) == i)&#123; // 2. 在判定和打印水仙花数的过程中，拼接空格, 但不换行，并在打印后让count变量+1，记录打印过的数量 System.out.print(i + \" \"); count++; // 3. 在每一次count变量+1后，判断是否到达了2的倍数，是的话，换行 if(count % 2 == 0)&#123; System.out.println(); &#125; &#125; &#125; &#125;&#125; 本题要点： 今后如果需求带有统计xxx，请先想到计数器变量 计数器变量定义的位置，必须在循环外部 3. while循环3.1 循环语句-while循环 while循环完整格式： 12345初始化语句;while (条件判断语句) &#123; 循环体语句; 条件控制语句;&#125; while循环执行流程： ①执行初始化语句 ②执行条件判断语句，看其结果是true还是false ​ 如果是false，循环结束 ​ 如果是true，继续执行 ③执行循环体语句 ④执行条件控制语句 ⑤回到②继续 示例代码： 12345678910111213141516public class WhileDemo &#123; public static void main(String[] args) &#123; //需求：在控制台输出5次\"HelloWorld\" //for循环实现 for(int i=1; i&lt;=5; i++) &#123; System.out.println(\"HelloWorld\"); &#125; System.out.println(\"--------\"); //while循环实现 int j = 1; while(j&lt;=5) &#123; System.out.println(\"HelloWorld\"); j++; &#125; &#125;&#125; 3.2 while循环案例-珠穆朗玛峰 需求：世界最高山峰是珠穆朗玛峰(8844.43米=8844430毫米)，假如我有一张足够大的纸，它的厚度是0.1毫米。请问，我折叠多少次，可以折成珠穆朗玛峰的高度? 示例代码： 1234567891011121314151617181920public class WhileTest &#123; public static void main(String[] args) &#123; //定义一个计数器，初始值为0 int count = 0; //定义纸张厚度 double paper = 0.1; //定义珠穆朗玛峰的高度 int zf = 8844430; //因为要反复折叠，所以要使用循环，但是不知道折叠多少次，这种情况下更适合使用while循环 //折叠的过程中当纸张厚度大于珠峰就停止了，因此继续执行的要求是纸张厚度小于珠峰高度 while(paper &lt;= zf) &#123; //循环的执行过程中每次纸张折叠，纸张的厚度要加倍 paper *= 2; //在循环中执行累加，对应折叠了多少次 count++; &#125; //打印计数器的值 System.out.println(\"需要折叠：\" + count + \"次\"); &#125;&#125; 4. 循环细节4.1 循环语句-dowhile循环 完整格式： 12345初始化语句;do &#123; 循环体语句; 条件控制语句;&#125;while(条件判断语句); 执行流程： ① 执行初始化语句 ② 执行循环体语句 ③ 执行条件控制语句 ④ 执行条件判断语句，看其结果是true还是false 如果是false，循环结束 如果是true，继续执行 ⑤ 回到②继续 示例代码： 12345678910111213141516public class DoWhileDemo &#123; public static void main(String[] args) &#123; //需求：在控制台输出5次\"HelloWorld\" //for循环实现 for(int i=1; i&lt;=5; i++) &#123; System.out.println(\"HelloWorld\"); &#125; System.out.println(\"--------\"); //do...while循环实现 int j = 1; do &#123; System.out.println(\"HelloWorld\"); j++; &#125;while(j&lt;=5); &#125;&#125; 4.2 三种循环的区别 三种循环的区别 for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行） do…while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断） for循环和while的区别 条件控制语句所控制的自增变量，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访问到了 条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用 死循环（无限循环）的三种格式 for(;;){} while(true){} do {} while(true); 4.3 死循环 死循环格式 12345678910111213141516for死循环格式 :for(;;)&#123;&#125;while死循环格式 :while(true)&#123;&#125;do..while死循环格式 :do&#123;&#125;while(true); 死循环案例 12345678910111213141516171819202122232425262728/* 问题: 死循环有应用场景吗? 例如: 键盘录入一个1-100之间的整数 顾虑: 键盘录入是用户操作的, 用户就可能会出现一些误操作的现象 */public static void main(String[] args) &#123; /* for(;;)&#123; System.out.println(\"我停不下来了~\"); &#125; */ /* while(true)&#123; System.out.println(\"我停不下来了~\"); &#125; */ do&#123; System.out.println(\"我停不下来了~\"); &#125;while(true); System.out.println(\"看看我能被执行吗?~\"); // 无法访问的语句&#125;&#125; 4.4 跳转控制语句 跳转控制语句（break） 跳出循环，结束循环 跳转控制语句（continue） 跳过本次循环，继续下次循环 注意： continue只能在循环中进行使用！ 123456789101112131415161718public class Demo1Continue &#123; /* continue : 跳过某次循环体内容的执行 注意：使用是基于条件控制, 在循环内部使用. 需求: 模拟电梯上行的过程 1-24层, 4层不停. */ public static void main(String[] args)&#123; for(int i = 1; i &lt;= 24; i++)&#123; if(i == 4)&#123; continue; &#125; System.out.println(i + \"层到了~\"); &#125; &#125; &#125; 123456789101112131415161718public class Demo2Break &#123; /* break : 终止循环体内容的执行 注意：使用是基于条件控制的 break语句只能在循环和switch中进行使用. 需求: 模拟20岁工作到80岁, 60岁退休. */ public static void main(String[] args)&#123; for(int i = 20; i &lt;= 80; i++)&#123; if(i == 60)&#123; break; // 结束整个循环 &#125; System.out.println(i + \"岁正在上班\"); &#125; &#125; &#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import java.util.Scanner;public class Test &#123; /* 需求：程序运行后，用户可多次查询星期对应的减肥计划，直到输入0，程序结束 步骤: 1. 不明确用户操作几次, 使用死循环包裹业务逻辑 2. 匹配到0的时候，使用break结束循环死循环 */ public static void main (String[] args)&#123; lo:while(true)&#123; System.out.println(\"请输入您要查看的星期数:\"); System.out.println(\"(如无需继续查看,请输入0退出程序)\"); // 1. 键盘录入星期数据，使用变量接收 Scanner sc = new Scanner(System.in); int week = sc.nextInt(); // 2. 多情况判断，采用switch语句实现 switch(week)&#123; // 3. 在不同的case中，输出对应的减肥计划 case 0: System.out.println(\"感谢您的使用\"); break lo; case 1: System.out.println(\"跑步\"); break; case 2: System.out.println(\"游泳\"); break; case 3: System.out.println(\"慢走\"); break; case 4: System.out.println(\"动感单车\"); break; case 5: System.out.println(\"拳击\"); break; case 6: System.out.println(\"爬山\"); break; case 7: System.out.println(\"好好吃一顿\"); break; default: System.out.println(\"您的输入有误\"); break; &#125; &#125; &#125;&#125; 5. Random5.1 Random产生随机数（掌握） 概述： Random类似Scanner，也是Java提供好的API，内部提供了产生随机数的功能 API后续课程详细讲解，现在可以简单理解为Java已经写好的代码 使用步骤： 导入包 import java.util.Random; 创建对象 Random r = new Random(); 产生随机数 int num = r.nextInt(10); 解释： 10代表的是一个范围，如果括号写10，产生的随机数就是0-9，括号写20，参数的随机数则是0-19 示例代码： 12345678910111213141516171819202122232425262728293031import java.util.Random;public class Demo1Random &#123; /* Random : 产生随机数 1. 导包 : import java.util.Random; 导包的动作必须出现在类定义的上面 2. 创建对象 : Random r = new Random(); 上面这个格式里面，r 是变量名，可以变，其他的都不允许变 3. 获取随机数 : int number = r.nextInt(10); //获取数据的范围：[0,10) 包括0,不包括10 上面这个格式里面，number是变量名，可以变，数字10可以变。其他的都不允许变 需求: 产生随机数1-10之间的 */ public static void main(String[] args)&#123; // 2. 创建对象 Random r = new Random(); for(int i = 1; i &lt;= 10; i++)&#123; // 3. 获取随机数 int num = r.nextInt(10) + 1; // 1-10 System.out.println(num); &#125; &#125;&#125; 5.3 Random练习-猜数字（应用） 需求： 程序自动生成一个1-100之间的数字，使用程序实现猜出这个数字是多少？ 当猜错的时候根据不同情况给出相应的提示 A. 如果猜的数字比真实数字大，提示你猜的数据大了 B. 如果猜的数字比真实数字小，提示你猜的数据小了 C. 如果猜的数字与真实数字相等，提示恭喜你猜中了 示例代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import java.util.Scanner;import java.util.Random;public class Test &#123; /* 需求：程序自动生成一个1-100之间的数字，使用程序实现猜出这个数字是多少？ 当猜错的时候根据不同情况给出相应的提示 如果猜的数字比真实数字大，提示你猜的数据大了 如果猜的数字比真实数字小，提示你猜的数据小了 如果猜的数字与真实数字相等，提示恭喜你猜中了 1. 准备Random和Scanner对象, 分别用于产生随机数和键盘录入 2. 使用Random产生一个1-100之间的数, 作为要猜的数 3. 键盘录入用户猜的的数据 4. 使用录入的数据(用户猜的数据)和随机数(要猜的数据)进行比较, 并给出提示 5. 以上内容需要多次进行, 但无法预估用户输入几次可以猜测正确, 使用while(true)死循环包裹 6. 猜对之后, break结束. */ public static void main(String[] args)&#123; // 1. 准备Random和Scanner对象, 分别用于产生随机数和键盘录入 Random r = new Random(); Scanner sc = new Scanner(System.in); // 2. 使用Random产生一个1-100之间的数, 作为要猜的数 int randomNum = r.nextInt(100) + 1; // 5. 以上内容需要多次进行, 但无法预估用户输入几次可以猜测正确, 使用while(true)死循环包裹 while(true)&#123; // 3. 键盘录入用户猜的的数据 System.out.println(\"请输入您猜的数据:\"); int num = sc.nextInt(); // 4. 使用录入的数据(用户猜的数据)和随机数(要猜的数据)进行比较, 并给出提示 if(num &gt; randomNum)&#123; System.out.println(\"猜大了\"); &#125;else if(num &lt; randomNum)&#123; System.out.println(\"猜小了\"); &#125;else&#123; // 6. 猜对之后, break结束. System.out.println(\"恭喜,猜中了\"); break; &#125; &#125; System.out.println(\"感谢您的使用\"); &#125;&#125;","categories":[],"tags":[]},{"title":"1_Java概述","slug":"1_Java概述","date":"2020-11-01T15:48:20.534Z","updated":"2020-11-01T15:48:20.743Z","comments":true,"path":"2020/11/01/1_Java概述/","link":"","permalink":"http://yoursite.com/2020/11/01/1_Java%E6%A6%82%E8%BF%B0/","excerpt":"","text":"1. Java概述1.1 Java语言背景介绍（了解）语言：人与人交流的一种方式 计算机语言：人与计算机进行交流的一种方式,java就是其中一种最优秀的方式之一. Java语言是美国Sun公司（Stanford University Network）在1995年推出的计算机语言 Java之父：高司令 2009年，Sun公司被甲骨文公司收购，所以我们现在访问oracle官网即可：https://www.oracle.com java语言的三个版本： ​ JavaSE: Java 语言的（标准版），用于桌面应用的开发，是其他两个版本的基础 ​ JavaME: Java 语言的（小型版），用于嵌入式消费类电子设备 ​ JavaEE: Java 语言的（企业版），用于 Web 方向的网站开发 1.2 Java语言跨平台原理（理解）平台:操作系统 跨平台:同一套java代码可以不经任何修改在任意操作系统上运行. 操作系统:windows,mac,linux. java程序的跨平台是通过jvm(java虚拟机,当做一个假想的计算机)解决的,但jvm本身不垮平台,我们只需要在对应操作系统上安装对应jv即可. Java程序并非是直接运行的，Java编译器将Java源程序编译成与平台无关的字节码文件(class文件)，然后由Java虚拟机（JVM）对字节码文件解释执行。所以在不同的操作系统下，只需安装不同的Java虚拟机即可实现java程序的跨平台。 1.3 JRE和JDK（记忆）开发的三个步骤: 1.编写程序 2.编译程序 3.运行程序 JVM（Java Virtual Machine），java虚拟机,主要是解决跨平台. JRE（Java Runtime Environment），java运行环境,包含jvm+核心类库. JDK（Java Development Kit）,java开发工具包:jre+开发工具 总结：jdk(开发工具包) = jre(jvm+核心类库)+ 开发工具 1.4 JDK的下载和安装（应用）版本:我们的程序是需要根据社会的发展和需求进行不断的更新和迭代.进而更新我们写的程序,版本就依次叠加. java5里程碑 java8公司用的最多 我们学习12,11 1.4.1 下载通过官方网站获取JDK http://www.oracle.com 注意：不同的操作系统需要下载对应的jdk. 1.4.2 安装傻瓜式安装，下一步即可。但默认的安装路径是在C:\\Program Files下，为方便统一管理建议修改安装路径，将与开发相关的软件都安装到一个目录下，例如：E:\\develop。 注意：安装路径不要包含中文或者空格等特殊字符（使用纯英文目录）。 1.4.3 JDK的安装目录介绍 目录名称 说明 bin 该路径下存放了JDK的各种工具命令。javac和java就放在这个目录。 conf 该路径下存放了JDK的相关配置文件。 include 该路径下存放了一些平台特定的头文件。 jmods 该路径下存放了JDK的各种模块。 legal 该路径下存放了JDK各模块的授权文档。 lib 该路径下存放了JDK工具的一些补充JAR包。 2. 第一个演示程序2.1 常用DOS命令（应用）在接触集成开发环境之前，我们需要使用命令行窗口对java程序进行编译和运行，所以需要知道一些常用DOS命令。 1、打开命令行窗口的方式：win + r打开运行窗口，输入cmd，回车。 2、常用命令及其作用 操作 说明 盘符名称: 盘符切换。E:回车，表示切换到E盘。 dir 查看当前路径下的内容。 cd 目录 进入单级目录。cd itheima cd .. 回退到上一级目录。 cd 目录1\\目录2... 进入多级目录。cd itheima\\JavaSE cd / 回退到盘符目录。 cls 清屏。 exit 退出命令提示符窗口。 2.2 Path环境变量的配置（应用）我们希望在任何情况下都能去运行我们jdk的bin目录下的开发工具。 1.如果我们想要去执行某个应用程序的时候，想在任何目录下去执行，那我们应该怎么办？ a.我们手动的点入到这个命令所在的文件夹,然后打开dos窗口,进行执行 b.我们讲此命令的地址配置到环境变量中,就可以在任意目录下去执行我们的命令. 原理:我们在执行命令的时候,首先系统回去当前文件夹下面去寻找有没有这个命令,如果有,就执行,如果没有就去环境变量中去寻找,有就执行,没有就报错, 2.3 HelloWorld案例（应用）HelloWorld案例是指在计算机屏幕上输出“HelloWorld”这行文字。 各种计算机语言都习惯使用该案例作为第一个演示案例。 2.3.1 Java程序开发运行流程开发Java程序，需要三个步骤: 编写程序: 新建一个记事本,将后缀名改成 文件名.java 编译程序:javac 文件名.java 执行程序: java 文件名 2.3.2 HelloWorld案例的编写1、新建文本文档文件，修改名称为HelloWorld.java。 2、用记事本打开HelloWorld.java文件，输写程序内容。 12345public class HelloWorld&#123; public static void main(String [] args)&#123; System.out.println(\"HelloWorld\"); &#125;&#125; 2.3.3 HelloWorld案例的编译和运行存文件，打开命令行窗口，将目录切换至java文件所在目录，编译java文件生成class文件，运行class文件。 编译：javac 文件名.java 范例：javac HelloWorld.java 执行：java 文件名 范例：java HelloWorld 2.4 HelloWorld案例详解（理解） java程序都是由一个个类组成的,类是java程序的基本组成单位.类是由方法和其他东西组成. 类的定义格式:class 类名{ } main方法是官方定义好的方法,他是程序的入口,一个类如果需要执行,必须有main(主方法)方法. jvm只认main方法. main方法的定义格式为: public static void main(String [] args){ } 2.5 HelloWorld案例常见问题（理解）2.5.1 BUG程序在运行过程中遇到的错误或没有达到预期效果的转态. 2.5.2 BUG的解决1、具备识别BUG的能力：多看 2、具备分析BUG的能力：多做 3、具备解决BUG的能力：多查 2.5.3 HelloWorld案例常见问题1、非法字符问题。Java中的符号都是英文格式的。 2、大小写问题。Java语言对大小写敏感（区分大小写）。 3、在系统中显示文件的扩展名，避免出现HelloWorld.java.txt文件。 4、编译命令后的java文件名需要带文件后缀.java 5、运行命令后的class文件名（类名）不带文件后缀 2.6 Notepad++软件的安装和使用（应用）2.6.1 什么要使用Notepad++软件Notepad++功能比windows中的自带记事本功能强大，除了可以用来制作一般的纯文字说明文件，也十分适合编写计算机程序代码。Notepad++有行号，能够快速定位问题位置，还有语法高亮度显示、代码折叠等功能。而且它是免费的。 2.6.2 Notepad++软件安装安装：傻瓜式安装，一直下一步即可。建议也安装到统一的开发软件目录下，比如E:\\develop。 2.6.3Notepad++软件配置安装完毕之后，为了使用方便，做一个简单的配置：修改默认语言和编码。 3. java基础语法3.1 注释（理解）注释是对代码的解释和说明文字，可以提高程序的可读性，因此在程序中添加必要的注释文字十分重要。Java中的注释分为三种： 单行注释。 1//从双斜线开始到本行尾结束,都不参与程序的编译和执行 多行注释。 1234/*这里面涉及到的多行信息都不参与程序的编译和执行*/注意：多行注释不能嵌套使用。 123456789101112131415161718192021/*java是由一个个类组成,类是java程序基本组成单位类的定义格式:public class 类名&#123; &#125;*/public class A&#123; /* 这是主方法 他是程序的入口,一个类需要执行,必须有主方法,他是由官方定义好的 他的定义格式 public static void main(String [] args)&#123; &#125; */ public static void main(String [] args)&#123; //这是一条输出语句,双引号里面写啥,控制台就打印什么 System.out.println(\"AD\"); &#125;&#125; 文档注释。文档注释以/**开始，以*/结束。（以后讲) 3.2 关键字（理解）关键字是被java官方赋予了特殊含义的单词. 关键字的特点： ​ 1.全部由字母组成,并且字母都是小写 ​ 2.常见的代码编辑器会对其进行高亮显示. ​ 例如:class public static void 3.3 常量（应用）常量：在程序的运行中,其值不可发生改变的量,叫做常量. Java中的常量分类： ​ 字符串常量 :被双引号引起来的内容叫做字符串,理解为生活中的一句话,包括0个或多个字符 ​ 整数常量 : 所有整数 ​ 小数常量 :所有小数 ​ 字符常量 :被单引号引起来的单个字符,就是一个字 ​ 布尔常量 :只有两个 true(真,正确的,对的) 和 false(假,错误的,不对的) ​ 空常量 : null 不能直接打印 除空常量外，其他常量均可使用输出语句直接输出。 123456789101112131415161718192021222324252627public class A&#123; /* 这是主方法 他是程序的入口,一个类需要执行,必须有主方法,他是由官方定义好的 他的定义格式 public static void main(String [] args)&#123; &#125; */ public static void main(String [] args)&#123; //这是一条输出语句,双引号里面写啥,控制台就打印什么 //被双引号引起来的内容叫做字符串,理解为生活中的一句话 System.out.println(\"你好,我好,大家好\"); //所有整数 System.out.println(10); // System.out.println(\"10\"); //小数 所有小数 System.out.println(10.0); //字符 System.out.println('我'); //布尔常量 true和false System.out.println(true); System.out.println(false); //空常量 null 不能被打印 // System.out.println(null); &#125;&#125; 3.4 变量的介绍(理解)变量其实就是内存中的一块存储空间,里面存在可能会经常发生改变的数值 变量也是在程序运行中,值可能会发生改变的量. 变量的定义格式： ​ 数据类型 变量名 = 初始化值; ​ 数据类型：马上讲解 ​ 变量名：自己起的名字 ​ 数据值： 一开始,你自己定,开始你想他是多少就是多少. 3.5 数据类型（应用）3.5.1 计算机存储单元我们知道计算机是可以用来存储数据的，但是无论是内存还是硬盘，计算机存储设备的最小信息单元叫“位（bit）”，我们又称之为“比特位”，通常用小写的字母”b”表示。而计算机中最基本的存储单元叫“字节（byte）”， 通常用大写字母”B”表示，字节是由连续的8个位组成。 除了字节外还有一些常用的存储单位，其换算单位如下： 1B = 8b 1kb = 1024B 1mb = 1024kb 1Gb = 1024mb 1Tb = 1024Gb 3.5.2 Java中的数据类型Java是一个强类型语言，Java中的数据必须明确数据类型。在Java中的数据类型包括基本数据类型和引用数据类型两种。 Java中的基本数据类型：四类8种 数据类型 关键字 内存占用 取值范围 整数类型 byte 1 -128~127 short 2 -32768~32767 int(默认) 4 -2的31次方到2的31次方-1 long 8 -2的63次方到2的63次方-1 浮点类型 float 4 负数：-3.402823E+38到-1.401298E-45 正数： 1.401298E-45到3.402823E+38 double(默认) 8 负数：-1.797693E+308到-4.9000000E-324 正数：4.9000000E-324 到1.797693E+308 字符类型 char 2 0-65535 布尔类型 boolean 1 true，false 引用数据类型:类,数组,接口. 说明： ​ e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。 ​ 在java中整数默认是int类型，浮点数默认是double类型。 3.6 变量（应用）3.6.1 变量的定义变量：变量其实就是内存中的一块存储空间,里面存在可能会经常发生改变的数值 变量也是在程序运行中,值可能会发生改变的量. 从本质上讲，变量是内存中的一小块区域，其值可以在一定范围内变化。 变量的定义格式： 123数据类型 变量名 = 初始化值; // 声明变量并赋值int age = 18;System.out.println(age); 或者(扩展) 123456// 先声明，后赋值（使用前赋值即可）数据类型 变量名;变量名 = 初始化值;double money;money = 55.5;System.out.println(money); 还可以(扩展) 在同一行定义多个同一种数据类型的变量，中间使用逗号隔开。但不建议使用这种方式，降低程序的可读性。 123456789int a = 10, b = 20; // 定义int类型的变量a和b，中间使用逗号隔开System.out.println(a);System.out.println(b);int c,d; // 声明int类型的变量c和d，中间使用逗号隔开c = 30;d = 40;System.out.println(c);System.out.println(d); 3.6.2 变量的修改123int a = 10;a = 30; //修改变量的值System.out.println(a); 变量前面不加数据类型时，表示修改已存在的变量的值。 1234567891011121314151617181920212223242526272829303132333435363738public class Demo&#123; public static void main(String [] args)&#123; //变量的定义格式 数据类型 变量名 = 初始化值; 定义变量并赋值 /*int a = 10; double d = 3.14; char c = '我'; boolean b = true; //使用变量 直接使用变量名即可 //直接打印 System.out.println(a); System.out.println(b); System.out.println(c); System.out.println(d); // 修改值 变量名 = 新值; a = 20; b= false; c='你'; d = 5.20; System.out.println(a); System.out.println(b); System.out.println(c); System.out.println(d); //第二种定义格式 //定义一个变量不复制 数据类型 变量名; int aa ; // 变量名 = 初始化值; aa = 60; System.out.println(aa);*/ //定义变量的第三种格式 一次性定义多个相同类型的变量 //数据类型 变量名 = 初始化值,变量名 = 初始化值.... int a = 10,b=20,c=30; System.out.println(a); System.out.println(b); System.out.println(c); &#125;&#125; 3.7 变量的注意事项(理解) 在同一对花括号中，变量名不能重复。 变量在使用之前，必须初始化（赋值）。 定义long类型的变量时，需要在整数的后面加L（大小写均可，建议大写）。因为整数默认是int类型，整数太大可能超出int范围。 定义float类型的变量时，需要在小数的后面加F（大小写均可，建议大写）。因为浮点数的默认类型是double， double的取值范围是大于float的，类型不兼容。 3.8 键盘录入（理解）我们可以通过 Scanner 类来获取用户的输入。使用步骤如下： 1、导包。Scanner 类在java.util包下，所以需要将该类导入。导包的语句需要定义在类的上面。 1import java.util.Scanner; 2、创建Scanner对象。 1Scanner sc = new Scanner(System.in);// 创建Scanner对象，sc表示变量名，其他均不可变 3、接收数据 1int i = sc.nextInt(); // 表示将键盘录入的值作为int数返回。 示例： 1234567891011121314//导包 (告诉高司令我要用一下你写的类)import java.util.Scanner;public class Demo2&#123; public static void main(String [] args)&#123; // 数据类型 变量名 = 初始化值; //创建对象(使用规则) sc是变量名 除了他可以改 其他的都不要改 Scanner sc1 = new Scanner(System.in); //接收用户输入的值 System.out.println(\"请您输入一个数字\"); int a = sc1.nextInt(); System.out.println(a); &#125; &#125; 3.9 标识符（理解）标识符是用户编程时使用的名字，用于给类、方法、变量、常量等命名。 Java中标识符的组成规则： 1.数字,字母,_(下划线),$组成. 2.不能以数字开头 3.区分大小写. 4.不能是关键字 Java中标识符的命名约定： ​ 小驼峰式命名：变量,方法 ​ 首字母小写,从第二个单词开始首字母大写 ​ 例如：username、studentNumber等。 ​ 大驼峰式命名：类名 ​ 所有组成单词首字母大写. ​ 例如:HelloWold​ ​","categories":[],"tags":[]}],"categories":[],"tags":[]}