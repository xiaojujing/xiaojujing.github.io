{"meta":{"title":"Hexo","subtitle":"","description":"","author":"xiaojujing","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"14_匿名内部类和Lambda表达式","slug":"14_匿名内部类和Lambda表达式","date":"2020-11-07T15:16:20.000Z","updated":"2020-11-07T15:17:16.330Z","comments":true,"path":"2020/11/07/14_匿名内部类和Lambda表达式/","link":"","permalink":"http://yoursite.com/2020/11/07/14_%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8CLambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"1.内部类1.1 内部类的基本使用（理解） 内部类概念 在一个类中定义一个类。举例：在一个类A的内部定义一个类B，类B就被称为内部类 内部类定义格式 格式&amp;举例：","text":"1.内部类1.1 内部类的基本使用（理解） 内部类概念 在一个类中定义一个类。举例：在一个类A的内部定义一个类B，类B就被称为内部类 内部类定义格式 格式&amp;举例： 1234567891011121314/* 格式： class 外部类名&#123; 修饰符 class 内部类名&#123; &#125; &#125;*/class Outer &#123; public class Inner &#123; &#125;&#125; 内部类的访问特点 内部类可以直接访问外部类的成员，包括私有 外部类要访问内部类的成员，必须创建对象 示例代码： 1234567891011121314151617/* 内部类访问特点： 内部类可以直接访问外部类的成员，包括私有 外部类要访问内部类的成员，必须创建对象 */public class Outer &#123; private int num = 10; public class Inner &#123; public void show() &#123; System.out.println(num); &#125; &#125; public void method() &#123; Inner i = new Inner(); i.show(); &#125;&#125; 1.2 成员内部类（理解） 成员内部类的定义位置 在类中方法，跟成员变量是一个位置 外界创建成员内部类格式 格式：外部类名.内部类名 对象名 = 外部类对象.内部类对象; 举例：Outer.Inner oi = new Outer().new Inner(); 私有成员内部类 将一个类，设计为内部类的目的，大多数都是不想让外界去访问，所以内部类的定义应该私有化，私有化之后，再提供一个可以让外界调用的方法，方法内部创建内部类对象并调用。 示例代码： 1234567891011121314151617181920class Outer &#123; private int num = 10; private class Inner &#123; public void show() &#123; System.out.println(num); &#125; &#125; public void method() &#123; Inner i = new Inner(); i.show(); &#125;&#125;public class InnerDemo &#123; public static void main(String[] args) &#123; //Outer.Inner oi = new Outer().new Inner(); //oi.show(); Outer o = new Outer(); o.method(); &#125;&#125; 静态成员内部类 静态成员内部类访问格式：外部类名.内部类名 对象名 = new 外部类名.内部类名(); 静态成员内部类中的静态方法：外部类名.内部类名.方法名(); 示例代码 123456789101112131415161718192021222324class Outer &#123; static class Inner &#123; public void show()&#123; System.out.println(\"inner..show\"); &#125; public static void method()&#123; System.out.println(\"inner..method\"); &#125; &#125;&#125;public class Test3Innerclass &#123; /* 静态成员内部类演示 */ public static void main(String[] args) &#123; // 外部类名.内部类名 对象名 = new 外部类名.内部类名(); Outer.Inner oi = new Outer.Inner(); oi.show(); Outer.Inner.method(); &#125;&#125; 1.3 局部内部类（理解） 局部内部类定义位置 局部内部类是在方法中定义的类 局部内部类方式方式 局部内部类，外界是无法直接使用，需要在方法内部创建对象并使用 该类可以直接访问外部类的成员，也可以访问方法内的局部变量 示例代码 1234567891011121314151617181920class Outer &#123; private int num = 10; public void method() &#123; int num2 = 20; class Inner &#123; public void show() &#123; System.out.println(num); System.out.println(num2); &#125; &#125; Inner i = new Inner(); i.show(); &#125;&#125;public class OuterDemo &#123; public static void main(String[] args) &#123; Outer o = new Outer(); o.method(); &#125;&#125; 1.4 匿名内部类（应用） 匿名内部类的前提 存在一个类或者接口，这里的类可以是具体类也可以是抽象类 匿名内部类的格式 格式：new 类名 ( ) { 重写方法 } new 接口名 ( ) { 重写方法 } 举例： 1234new Inter()&#123; @Override public void method()&#123;&#125;&#125; 匿名内部类的本质 本质：是一个继承了该类或者实现了该接口的子类匿名对象 匿名内部类的细节 匿名内部类可以通过多态的形式接受 123456Inter i = new Inter()&#123; @Override public void method()&#123; &#125;&#125; 匿名内部类直接调用方法 1234567891011121314interface Inter&#123; void method();&#125;class Test&#123; public static void main(String[] args)&#123; new Inter()&#123; @Override public void method()&#123; System.out.println(\"我是匿名内部类\"); &#125; &#125;.method(); // 直接调用方法 &#125;&#125; 1.5 匿名内部类在开发中的使用（应用） 匿名内部类在开发中的使用 当发现某个方法需要，接口或抽象类的子类对象，我们就可以传递一个匿名内部类过去，来简化传统的代码 示例代码： 1234567891011121314151617181920212223242526272829303132/* 游泳接口 */interface Swimming &#123; void swim();&#125;public class TestSwimming &#123; public static void main(String[] args) &#123; goSwimming(new Swimming() &#123; @Override public void swim() &#123; System.out.println(\"铁汁, 我们去游泳吧\"); &#125; &#125;); &#125; /** * 使用接口的方法 */ public static void goSwimming(Swimming swimming)&#123; /* Swimming swim = new Swimming() &#123; @Override public void swim() &#123; System.out.println(\"铁汁, 我们去游泳吧\"); &#125; &#125; */ swimming.swim(); &#125;&#125; 2.Lambda表达式2.1体验Lambda表达式【理解】 代码演示 123456789101112131415161718192021222324252627282930/* 游泳接口 */interface Swimming &#123; void swim();&#125;public class TestSwimming &#123; public static void main(String[] args) &#123; // 通过匿名内部类实现 goSwimming(new Swimming() &#123; @Override public void swim() &#123; System.out.println(\"铁汁, 我们去游泳吧\"); &#125; &#125;); /* 通过Lambda表达式实现 理解: 对于Lambda表达式, 对匿名内部类进行了优化 */ goSwimming(() -&gt; System.out.println(\"铁汁, 我们去游泳吧\")); &#125; /** * 使用接口的方法 */ public static void goSwimming(Swimming swimming) &#123; swimming.swim(); &#125;&#125; 函数式编程思想概述 在数学中，函数就是有输入量、输出量的一套计算方案，也就是“拿数据做操作” 面向对象思想强调“必须通过对象的形式来做事情” 函数式思想则尽量忽略面向对象的复杂语法：“强调做什么，而不是以什么形式去做” 而我们要学习的Lambda表达式就是函数式思想的体现 2.2Lambda表达式的标准格式【理解】 格式： ​ (形式参数) -&gt; {代码块} 形式参数：如果有多个参数，参数之间用逗号隔开；如果没有参数，留空即可 -&gt;：由英文中画线和大于符号组成，固定写法。代表指向动作 代码块：是我们具体要做的事情，也就是以前我们写的方法体内容 组成Lambda表达式的三要素： 形式参数，箭头，代码块 2.3Lambda表达式练习1【应用】 Lambda表达式的使用前提 有一个接口 接口中有且仅有一个抽象方法 练习描述 ​ 无参无返回值抽象方法的练习 操作步骤 定义一个接口(Eatable)，里面定义一个抽象方法：void eat(); 定义一个测试类(EatableDemo)，在测试类中提供两个方法 一个方法是：useEatable(Eatable e) 一个方法是主方法，在主方法中调用useEatable方法 示例代码 123456789101112131415161718192021222324252627282930313233343536//接口public interface Eatable &#123; void eat();&#125;//实现类public class EatableImpl implements Eatable &#123; @Override public void eat() &#123; System.out.println(\"一天一苹果，医生远离我\"); &#125;&#125;//测试类public class EatableDemo &#123; public static void main(String[] args) &#123; //在主方法中调用useEatable方法 Eatable e = new EatableImpl(); useEatable(e); //匿名内部类 useEatable(new Eatable() &#123; @Override public void eat() &#123; System.out.println(\"一天一苹果，医生远离我\"); &#125; &#125;); //Lambda表达式 useEatable(() -&gt; &#123; System.out.println(\"一天一苹果，医生远离我\"); &#125;); &#125; private static void useEatable(Eatable e) &#123; e.eat(); &#125;&#125; 2.4Lambda表达式练习2【应用】 练习描述 有参无返回值抽象方法的练习 操作步骤 定义一个接口(Flyable)，里面定义一个抽象方法：void fly(String s); 定义一个测试类(FlyableDemo)，在测试类中提供两个方法 一个方法是：useFlyable(Flyable f) 一个方法是主方法，在主方法中调用useFlyable方法 示例代码 1234567891011121314151617181920212223242526272829public interface Flyable &#123; void fly(String s);&#125;public class FlyableDemo &#123; public static void main(String[] args) &#123; //在主方法中调用useFlyable方法 //匿名内部类 useFlyable(new Flyable() &#123; @Override public void fly(String s) &#123; System.out.println(s); System.out.println(\"飞机自驾游\"); &#125; &#125;); System.out.println(\"--------\"); //Lambda useFlyable((String s) -&gt; &#123; System.out.println(s); System.out.println(\"飞机自驾游\"); &#125;); &#125; private static void useFlyable(Flyable f) &#123; f.fly(\"风和日丽，晴空万里\"); &#125;&#125; 2.5Lambda表达式练习3【应用】 练习描述 有参有返回值抽象方法的练习 操作步骤 定义一个接口(Addable)，里面定义一个抽象方法：int add(int x,int y); 定义一个测试类(AddableDemo)，在测试类中提供两个方法 一个方法是：useAddable(Addable a) 一个方法是主方法，在主方法中调用useAddable方法 示例代码 123456789101112131415161718public interface Addable &#123; int add(int x,int y);&#125;public class AddableDemo &#123; public static void main(String[] args) &#123; //在主方法中调用useAddable方法 useAddable((int x,int y) -&gt; &#123; return x + y; &#125;); &#125; private static void useAddable(Addable a) &#123; int sum = a.add(10, 20); System.out.println(sum); &#125;&#125; 2.6Lambda表达式的省略模式【应用】 省略的规则 参数类型可以省略。但是有多个参数的情况下，不能只省略一个 如果参数有且仅有一个，那么小括号可以省略 如果代码块的语句只有一条，可以省略大括号和分号，和return关键字 代码演示 123456789101112131415161718192021222324252627282930313233343536373839404142public interface Addable &#123; int add(int x, int y);&#125;public interface Flyable &#123; void fly(String s);&#125;public class LambdaDemo &#123; public static void main(String[] args) &#123;// useAddable((int x,int y) -&gt; &#123;// return x + y;// &#125;); //参数的类型可以省略 useAddable((x, y) -&gt; &#123; return x + y; &#125;);// useFlyable((String s) -&gt; &#123;// System.out.println(s);// &#125;); //如果参数有且仅有一个，那么小括号可以省略// useFlyable(s -&gt; &#123;// System.out.println(s);// &#125;); //如果代码块的语句只有一条，可以省略大括号和分号 useFlyable(s -&gt; System.out.println(s)); //如果代码块的语句只有一条，可以省略大括号和分号，如果有return，return也要省略掉 useAddable((x, y) -&gt; x + y); &#125; private static void useFlyable(Flyable f) &#123; f.fly(\"风和日丽，晴空万里\"); &#125; private static void useAddable(Addable a) &#123; int sum = a.add(10, 20); System.out.println(sum); &#125;&#125; 2.7Lambda表达式的使用前提【理解】 使用Lambda必须要有接口 并且要求接口中有且仅有一个抽象方法 2.8Lambda表达式和匿名内部类的区别【理解】 所需类型不同 匿名内部类：可以是接口，也可以是抽象类，还可以是具体类 Lambda表达式：只能是接口 使用限制不同 如果接口中有且仅有一个抽象方法，可以使用Lambda表达式，也可以使用匿名内部类 如果接口中多于一个抽象方法，只能使用匿名内部类，而不能使用Lambda表达式 实现原理不同 匿名内部类：编译之后，产生一个单独的.class字节码文件 Lambda表达式：编译之后，没有一个单独的.class字节码文件。对应的字节码会在运行的时候动态生成","categories":[],"tags":[]},{"title":"13_接口和多态","slug":"13_接口和多态","date":"2020-11-07T15:14:58.000Z","updated":"2020-11-07T15:17:23.142Z","comments":true,"path":"2020/11/07/13_接口和多态/","link":"","permalink":"http://yoursite.com/2020/11/07/13_%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%A4%9A%E6%80%81/","excerpt":"1.接口1.1黑马信息管理系统集合改进 (应用) 使用数组容器的弊端 容器长度是固定的，不能根据添加功能自动增长 没有提供用于赠删改查的方法","text":"1.接口1.1黑马信息管理系统集合改进 (应用) 使用数组容器的弊端 容器长度是固定的，不能根据添加功能自动增长 没有提供用于赠删改查的方法 优化步骤 创建新的StudentDao类，OtherStudentDao 创建ArrayList集合容器对象 OtherStudentDao中的方法声明，需要跟StudentDao保持一致 注意：如果不一致，StudentService中的代码就需要进行修改 完善方法（添加、删除、修改、查看） 替换StudentService中的Dao对象 代码实现 OtherStudentDao类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354public class OtherStudentDao &#123; // 集合容器 private static ArrayList&lt;Student&gt; stus = new ArrayList&lt;&gt;(); static &#123; Student stu1 = new Student(\"heima001\",\"张三\",\"23\",\"1999-11-11\"); Student stu2 = new Student(\"heima002\",\"李四\",\"24\",\"2000-11-11\"); stus.add(stu1); stus.add(stu2); &#125; // 添加学生方法 public boolean addStudent(Student stu) &#123; stus.add(stu); return true; &#125; // 查看学生方法 public Student[] findAllStudent() &#123; Student[] students = new Student[stus.size()]; for (int i = 0; i &lt; students.length; i++) &#123; students[i] = stus.get(i); &#125; return students; &#125; public void deleteStudentById(String delId) &#123; // 1. 查找id在容器中所在的索引位置 int index = getIndex(delId); stus.remove(index); &#125; public int getIndex(String id)&#123; int index = -1; for (int i = 0; i &lt; stus.size(); i++) &#123; Student stu = stus.get(i); if(stu != null &amp;&amp; stu.getId().equals(id))&#123; index = i; break; &#125; &#125; return index; &#125; public void updateStudent(String updateId, Student newStu) &#123; // 1. 查找updateId, 在容器中的索引位置 int index = getIndex(updateId); stus.set(index, newStu); &#125;&#125; StudentService类 12345public class StudentService &#123; // 创建StudentDao (库管) private OtherStudentDao studentDao = new OtherStudentDao(); // 其他方法没有变化,此处省略...&#125; 1.2黑马信息管理系统抽取Dao (应用) 优化步骤 将方法向上抽取，抽取出一个父类 （ BaseStudentDao ） 方法的功能实现在父类中无法给出具体明确，定义为抽象方法 让两个类分别继承 BaseStudentDao ，重写内部抽象方法 代码实现 BaseStudentDao类 123456789101112public abstract class BaseStudentDao &#123; // 添加学生方法 public abstract boolean addStudent(Student stu); // 查看学生方法 public abstract Student[] findAllStudent(); // 删除学生方法 public abstract void deleteStudentById(String delId); // 根据id找索引方法 public abstract int getIndex(String id); // 修改学生方法 public abstract void updateStudent(String updateId, Student newStu);&#125; StudentDao类 123public class StudentDao extends BaseStudentDao &#123; // 其他内容不变,此处省略&#125; OtherStudentDao类 123public class OtherStudentDao extends BaseStudentDao &#123; // 其他内容不变,此处省略&#125; 1.3接口的概述（理解） 接口就是一种公共的规范标准，只要符合规范标准，大家都可以通用。 Java中接口存在的两个意义 用来定义规范 用来做功能的拓展 1.4接口的特点（记忆） 接口用关键字interface修饰 1public interface 接口名 &#123;&#125; 类实现接口用implements表示 1public class 类名 implements 接口名 &#123;&#125; 接口不能实例化 ​ 我们可以创建接口的实现类对象使用 接口的子类 ​ 要么重写接口中的所有抽象方法 ​ 要么子类也是抽象类 1.5接口的成员特点（记忆） 成员特点 成员变量 ​ 只能是常量​ 默认修饰符：public static final 构造方法 ​ 没有，因为接口主要是扩展功能的，而没有具体存在 成员方法 ​ 只能是抽象方法 ​ 默认修饰符：public abstract ​ 关于接口中的方法，JDK8和JDK9中有一些新特性，后面再讲解 代码演示 接口 12345public interface Inter &#123; public static final int NUM = 10; public abstract void show();&#125; 实现类 1234567891011class InterImpl implements Inter&#123; public void method()&#123; // NUM = 20; System.out.println(NUM); &#125; public void show()&#123; &#125;&#125; 测试类 12345678910111213public class TestInterface &#123; /* 成员变量: 只能是常量 系统会默认加入三个关键字 public static final 构造方法: 没有 成员方法: 只能是抽象方法, 系统会默认加入两个关键字 public abstract */ public static void main(String[] args) &#123; System.out.println(Inter.NUM); &#125; &#125; 1.6类和接口的关系（记忆） 类与类的关系 ​ 继承关系，只能单继承，但是可以多层继承 类与接口的关系 ​ 实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口 接口与接口的关系 ​ 继承关系，可以单继承，也可以多继承 1.7黑马信息管理系统使用接口改进 (应用) 实现步骤 将 BaseStudentDao 改进为一个接口 让 StudentDao 和 OtherStudentDao 去实现这个接口 代码实现 BaseStudentDao接口 123456789101112public interface BaseStudentDao &#123; // 添加学生方法 public abstract boolean addStudent(Student stu); // 查看学生方法 public abstract Student[] findAllStudent(); // 删除学生方法 public abstract void deleteStudentById(String delId); // 根据id找索引方法 public abstract int getIndex(String id); // 修改学生方法 public abstract void updateStudent(String updateId, Student newStu);&#125; StudentDao类 123public class StudentDao implements BaseStudentDao &#123; // 其他内容不变,此处省略&#125; OtherStudentDao类 123public class OtherStudentDao implements BaseStudentDao &#123; // 其他内容不变,此处省略&#125; 1.8黑马信息管理系统解耦合改进 (应用) 实现步骤 创建factory包，创建 StudentDaoFactory（工厂类） 提供 static 修改的 getStudentDao 方法，该方法用于创建StudentDao对象并返回 代码实现 StudentDaoFactory类 12345public class StudentDaoFactory &#123; public static OtherStudentDao getStudentDao()&#123; return new OtherStudentDao(); &#125;&#125; StudentService类 1234567public class StudentService &#123; // 创建StudentDao (库管) // private OtherStudentDao studentDao = new OtherStudentDao(); // 通过学生库管工厂类, 获取库管对象 private OtherStudentDao studentDao = StudentDaoFactory.getStudentDao();&#125; 2.接口组成更新2.1接口组成更新概述【理解】 常量 public static final 抽象方法 public abstract 默认方法(Java 8) 静态方法(Java 8) 私有方法(Java 9) 2.2接口中默认方法【应用】 格式 public default 返回值类型 方法名(参数列表) { } 作用 解决接口升级的问题 范例 12public default void show3() &#123; &#125; 注意事项 默认方法不是抽象方法，所以不强制被重写。但是可以被重写，重写的时候去掉default关键字 public可以省略，default不能省略 如果实现了多个接口，多个接口中存在相同的方法声明，子类就必须对该方法进行重写 2.3接口中静态方法【应用】 格式 public static 返回值类型 方法名(参数列表) { } 范例 12public static void show() &#123;&#125; 注意事项 静态方法只能通过接口名调用，不能通过实现类名或者对象名调用 public可以省略，static不能省略 2.4接口中私有方法【应用】 私有方法产生原因 Java 9中新增了带方法体的私有方法，这其实在Java 8中就埋下了伏笔：Java 8允许在接口中定义带方法体的默认方法和静态方法。这样可能就会引发一个问题：当两个默认方法或者静态方法中包含一段相同的代码实现时，程序必然考虑将这段实现代码抽取成一个共性方法，而这个共性方法是不需要让别人使用的，因此用私有给隐藏起来，这就是Java 9增加私有方法的必然性 定义格式 格式1 private 返回值类型 方法名(参数列表) { } 范例1 12private void show() &#123; &#125; 格式2 private static 返回值类型 方法名(参数列表) { } 范例2 12private static void method() &#123; &#125; 注意事项 默认方法可以调用私有的静态方法和非静态方法 静态方法只能调用私有的静态方法 3.多态3.1多态的概述（记忆） 什么是多态 ​ 同一个对象，在不同时刻表现出来的不同形态 多态的前提 要有继承或实现关系 要有方法的重写 要有父类引用指向子类对象 代码演示 123456789101112131415161718192021222324252627282930class Animal &#123; public void eat()&#123; System.out.println(\"动物吃饭\"); &#125;&#125;class Cat extends Animal &#123; @Override public void eat() &#123; System.out.println(\"猫吃鱼\"); &#125;&#125;public class Test1Polymorphic &#123; /* 多态的前提: 1. 要有(继承 \\ 实现)关系 2. 要有方法重写 3. 要有父类引用, 指向子类对象 */ public static void main(String[] args) &#123; // 当前事物, 是一只猫 Cat c = new Cat(); // 当前事物, 是一只动物 Animal a = new Cat(); a.eat(); &#125;&#125; 3.2多态中的成员访问特点（记忆） 成员访问特点 成员变量 ​ 编译看父类，运行看父类 成员方法 ​ 编译看父类，运行看子类 代码演示 123456789101112131415161718192021222324252627282930class Fu &#123; int num = 10; public void method()&#123; System.out.println(\"Fu.. method\"); &#125;&#125;class Zi extends Fu &#123; int num = 20; public void method()&#123; System.out.println(\"Zi.. method\"); &#125;&#125;public class Test2Polymorpic &#123; /* 多态的成员访问特点: 成员变量: 编译看左边 (父类), 运行看左边 (父类) 成员方法: 编译看左边 (父类), 运行看右边 (子类) */ public static void main(String[] args) &#123; Fu f = new Zi(); System.out.println(f.num); f.method(); &#125;&#125; 3.3多态的好处和弊端（记忆） 好处 ​ 提高程序的扩展性。定义方法时候，使用父类型作为参数，在使用的时候，使用具体的子类型参与操作 弊端 ​ 不能使用子类的特有成员 3.4多态中的转型（应用） 向上转型 ​ 父类引用指向子类对象就是向上转型 向下转型 ​ 格式：子类型 对象名 = (子类型)父类引用; 代码演示 123456789101112131415161718192021222324252627282930313233class Fu &#123; public void show()&#123; System.out.println(\"Fu..show...\"); &#125;&#125;class Zi extends Fu &#123; @Override public void show() &#123; System.out.println(\"Zi..show...\"); &#125; public void method()&#123; System.out.println(\"我是子类特有的方法, method\"); &#125;&#125;public class Test3Polymorpic &#123; public static void main(String[] args) &#123; // 1. 向上转型 : 父类引用指向子类对象 Fu f = new Zi(); f.show(); // 多态的弊端: 不能调用子类特有的成员 // f.method(); // A: 直接创建子类对象 // B: 向下转型 // 2. 向下转型 : 从父类类型, 转换回子类类型 Zi z = (Zi) f; z.method(); &#125;&#125; 3.5多态中转型存在的风险和解决方案 (应用) 风险 如果被转的引用类型变量,对应的实际类型和目标类型不是同一种类型,那么在转换的时候就会出现ClassCastException 解决方案 关键字 instanceof 使用格式 变量名 instanceof 类型 通俗的理解：判断关键字左边的变量，是否是右边的类型，返回boolean类型结果 代码演示 123456789101112131415161718192021222324252627282930313233343536373839404142abstract class Animal &#123; public abstract void eat();&#125;class Dog extends Animal &#123; public void eat() &#123; System.out.println(\"狗吃肉\"); &#125; public void watchHome()&#123; System.out.println(\"看家\"); &#125;&#125;class Cat extends Animal &#123; public void eat() &#123; System.out.println(\"猫吃鱼\"); &#125;&#125;public class Test4Polymorpic &#123; public static void main(String[] args) &#123; useAnimal(new Dog()); useAnimal(new Cat()); &#125; public static void useAnimal(Animal a)&#123; // Animal a = new Dog(); // Animal a = new Cat(); a.eat(); //a.watchHome();// Dog dog = (Dog) a;// dog.watchHome(); // ClassCastException 类型转换异常 // 判断a变量记录的类型, 是否是Dog if(a instanceof Dog)&#123; Dog dog = (Dog) a; dog.watchHome(); &#125; &#125;&#125; 3.6黑马信息管理系统多态改进 (应用) 实现步骤 StudentDaoFactory类中方法的返回值定义成父类类型BaseStudentDao StudentService中接收方法返回值的类型定义成父类类型BaseStudentDao 代码实现 StudentDaoFactory类 12345public class StudentDaoFactory &#123; public static BaseStudentDao getStudentDao()&#123; return new OtherStudentDao(); &#125;&#125; StudentService类 1234567public class StudentService &#123; // 创建StudentDao (库管) // private OtherStudentDao studentDao = new OtherStudentDao(); // 通过学生库管工厂类, 获取库管对象 private BaseStudentDao studentDao = StudentDaoFactory.getStudentDao();&#125;","categories":[],"tags":[]},{"title":"12_继承","slug":"12_继承","date":"2020-11-06T15:46:27.000Z","updated":"2020-11-06T16:15:58.292Z","comments":true,"path":"2020/11/06/12_继承/","link":"","permalink":"http://yoursite.com/2020/11/06/12_%E7%BB%A7%E6%89%BF/","excerpt":"1. 继承1.1 继承的实现（掌握） 继承的概念 继承是面向对象三大特征之一，可以使得子类具有父类的属性和方法，还可以在子类中重新定义，以及追加属性和方法","text":"1. 继承1.1 继承的实现（掌握） 继承的概念 继承是面向对象三大特征之一，可以使得子类具有父类的属性和方法，还可以在子类中重新定义，以及追加属性和方法 实现继承的格式 继承通过extends实现 格式：class 子类 extends 父类 { } 举例：class Dog extends Animal { } 继承带来的好处 继承可以让类与类之间产生关系，子父类关系，产生子父类后，子类则可以使用父类中非私有的成员。 示例代码 123456789101112131415161718192021public class Fu &#123; public void show() &#123; System.out.println(\"show方法被调用\"); &#125;&#125;public class Zi extends Fu &#123; public void method() &#123; System.out.println(\"method方法被调用\"); &#125;&#125;public class Demo &#123; public static void main(String[] args) &#123; //创建对象，调用方法 Fu f = new Fu(); f.show(); Zi z = new Zi(); z.method(); z.show(); &#125;&#125; 1.2 继承的好处和弊端（理解） 继承好处 提高了代码的复用性(多个类相同的成员可以放到同一个类中) 提高了代码的维护性(如果方法的代码需要修改，修改一处即可) 继承弊端 继承让类与类之间产生了关系，类的耦合性增强了，当父类发生变化时子类实现也不得不跟着变化，削弱了子类的独立性 继承的应用场景： 使用继承，需要考虑类与类之间是否存在is..a的关系，不能盲目使用继承 is..a的关系：谁是谁的一种，例如：老师和学生是人的一种，那人就是父类，学生和老师就是子类 1.3. Java中继承的特点（掌握） Java中继承的特点 Java中类只支持单继承，不支持多继承 错误范例：class A extends B, C { } Java中类支持多层继承 多层继承示例代码： 1234567891011121314151617181920212223242526public class Granddad &#123; public void drink() &#123; System.out.println(\"爷爷爱喝酒\"); &#125;&#125;public class Father extends Granddad &#123; public void smoke() &#123; System.out.println(\"爸爸爱抽烟\"); &#125;&#125;public class Mother &#123; public void dance() &#123; System.out.println(\"妈妈爱跳舞\"); &#125;&#125;public class Son extends Father &#123; // 此时，Son类中就同时拥有drink方法以及smoke方法&#125; 2. 继承中的成员访问特点2.1 继承中变量的访问特点（掌握）在子类方法中访问一个变量，采用的是就近原则。 子类局部范围找 子类成员范围找 父类成员范围找 如果都没有就报错(不考虑父亲的父亲…) 示例代码 12345678910111213141516class Fu &#123; int num = 10;&#125;class Zi &#123; int num = 20; public void show()&#123; int num = 30; System.out.println(num); &#125;&#125;public class Demo1 &#123; public static void main(String[] args) &#123; Zi z = new Zi(); z.show(); // 输出show方法中的局部变量30 &#125;&#125; 2.2 super（掌握） this&amp;super关键字： this：代表本类对象的引用 super：代表父类存储空间的标识(可以理解为父类对象引用) this和super的使用分别 成员变量： this.成员变量 - 访问本类成员变量 super.成员变量 - 访问父类成员变量 成员方法： this.成员方法 - 访问本类成员方法 super.成员方法 - 访问父类成员方法 构造方法： this(…) - 访问本类构造方法 super(…) - 访问父类构造方法 2.3 继承中构造方法的访问特点（理解）注意：子类中所有的构造方法默认都会访问父类中无参的构造方法 ​ 子类会继承父类中的数据，可能还会使用父类的数据。所以，子类初始化之前，一定要先完成父类数据的初始化，原因在于，每一个子类构造方法的第一条语句默认都是：super() 问题：如果父类中没有无参构造方法，只有带参构造方法，该怎么办呢？ 12341. 通过使用super关键字去显示的调用父类的带参构造方法2. 子类通过this去调用本类的其他构造方法,本类其他构造方法再通过super去手动调用父类的带参的构造方法注意: this(…)super(…) 必须放在构造方法的第一行有效语句，并且二者不能共存 2.4 继承中成员方法的访问特点（掌握）通过子类对象访问一个方法 子类成员范围找 父类成员范围找 如果都没有就报错(不考虑父亲的父亲…) 2.5 super内存图（理解） 对象在堆内存中，会单独存在一块super区域，用来存放父类的数据 &lt;% asset_img 01_super内存图.png 01_super内存图.png %&gt; 2.6 方法重写（掌握） 1、方法重写概念 子类出现了和父类中一模一样的方法声明（方法名一样，参数列表也必须一样） 2、方法重写的应用场景 当子类需要父类的功能，而功能主体子类有自己特有内容时，可以重写父类中的方法，这样，即沿袭了父类的功能，又定义了子类特有的内容 3、Override注解 用来检测当前的方法，是否是重写的方法，起到【校验】的作用 2.7 方法重写的注意事项（掌握） 方法重写的注意事项 私有方法不能被重写(父类私有成员子类是不能继承的) 子类方法访问权限不能更低(public &gt; 默认 &gt; 私有) 静态方法不能被重写,如果子类也有相同的方法,并不是重写的父类的方法 示例代码 123456789101112131415161718192021222324252627282930public class Fu &#123; private void show() &#123; System.out.println(\"Fu中show()方法被调用\"); &#125; void method() &#123; System.out.println(\"Fu中method()方法被调用\"); &#125;&#125;public class Zi extends Fu &#123; /* 编译【出错】，子类不能重写父类私有的方法*/ @Override private void show() &#123; System.out.println(\"Zi中show()方法被调用\"); &#125; /* 编译【出错】，子类重写父类方法的时候，访问权限需要大于等于父类 */ @Override private void method() &#123; System.out.println(\"Zi中method()方法被调用\"); &#125; /* 编译【通过】，子类重写父类方法的时候，访问权限需要大于等于父类 */ @Override public void method() &#123; System.out.println(\"Zi中method()方法被调用\"); &#125;&#125; 2.8 权限修饰符 (理解)&lt;% asset_img 02_权限修饰符.png 02_权限修饰符.png %&gt; 2.9 黑马信息管理系统使用继承改进 (掌握) 需求 把学生类和老师类共性的内容向上抽取,抽取到出一个 Person 父类,让学生类和老师类继承 Person 类 实现步骤 抽取Person类 优化StudentController类中，inputStudentInfo方法，将setXxx赋值方式，改进为构造方法初始化 注意：直接修改这种操作方式，不符合我们开发中的一个原则 ​ 开闭原则 ( 对扩展开放对修改关闭 ) : 尽量在不更改原有代码的前提下以完成需求 解决：重新创建一个OtherStudentController类 编写新的inputStudentInfo方法 根据StudentController类、OtherStudentController类，向上抽取出BaseStudentController类再让StudentController类、OtherStudentController类，继承BaseStudentController类 代码实现 Person类及学生类和老师类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566public class Person &#123; private String id; private String name; private String age; private String birthday; public Person() &#123; &#125; public Person(String id, String name, String age, String birthday) &#123; this.id = id; this.name = name; this.age = age; this.birthday = birthday; &#125; public String getId() &#123; return id; &#125; public void setId(String id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getAge() &#123; return age; &#125; public void setAge(String age) &#123; this.age = age; &#125; public String getBirthday() &#123; return birthday; &#125; public void setBirthday(String birthday) &#123; this.birthday = birthday; &#125;&#125;// Student类public class Student extends Person &#123; public Student() &#123; &#125; public Student(String id, String name, String age, String birthday) &#123; super(id, name, age, birthday); &#125;&#125;// Teacher类public class Teacher extends Person &#123; public Teacher() &#123; &#125; public Teacher(String id, String name, String age, String birthday) &#123; super(id, name, age, birthday); &#125;&#125; BaseStudentController类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128public abstract class BaseStudentController &#123; // 业务员对象 private StudentService studentService = new StudentService(); private Scanner sc = new Scanner(System.in); // 开启学生管理系统, 并展示学生管理系统菜单 public void start() &#123; //Scanner sc = new Scanner(System.in); studentLoop: while (true) &#123; System.out.println(\"--------欢迎来到 &lt;学生&gt; 管理系统--------\"); System.out.println(\"请输入您的选择: 1.添加学生 2.删除学生 3.修改学生 4.查看学生 5.退出\"); String choice = sc.next(); switch (choice) &#123; case \"1\": // System.out.println(\"添加\"); addStudent(); break; case \"2\": // System.out.println(\"删除\"); deleteStudentById(); break; case \"3\": // System.out.println(\"修改\"); updateStudent(); break; case \"4\": // System.out.println(\"查询\"); findAllStudent(); break; case \"5\": System.out.println(\"感谢您使用学生管理系统, 再见!\"); break studentLoop; default: System.out.println(\"您的输入有误, 请重新输入\"); break; &#125; &#125; &#125; // 修改学生方法 public void updateStudent() &#123; String updateId = inputStudentId(); Student newStu = inputStudentInfo(updateId); studentService.updateStudent(updateId, newStu); System.out.println(\"修改成功!\"); &#125; // 删除学生方法 public void deleteStudentById() &#123; String delId = inputStudentId(); // 3. 调用业务员中的deleteStudentById根据id, 删除学生 studentService.deleteStudentById(delId); // 4. 提示删除成功 System.out.println(\"删除成功!\"); &#125; // 查看学生方法 public void findAllStudent() &#123; // 1. 调用业务员中的获取方法, 得到学生的对象数组 Student[] stus = studentService.findAllStudent(); // 2. 判断数组的内存地址, 是否为null if (stus == null) &#123; System.out.println(\"查无信息, 请添加后重试\"); return; &#125; // 3. 遍历数组, 获取学生信息并打印在控制台 System.out.println(\"学号\\t\\t姓名\\t年龄\\t生日\"); for (int i = 0; i &lt; stus.length; i++) &#123; Student stu = stus[i]; if (stu != null) &#123; System.out.println(stu.getId() + \"\\t\" + stu.getName() + \"\\t\" + stu.getAge() + \"\\t\\t\" + stu.getBirthday()); &#125; &#125; &#125; // 添加学生方法 public void addStudent() &#123; // StudentService studentService = new StudentService(); // 1. 键盘接收学生信息 String id; while (true) &#123; System.out.println(\"请输入学生id:\"); id = sc.next(); boolean flag = studentService.isExists(id); if (flag) &#123; System.out.println(\"学号已被占用, 请重新输入\"); &#125; else &#123; break; &#125; &#125; Student stu = inputStudentInfo(id); // 3. 将学生对象,传递给StudentService(业务员)中的addStudent方法 boolean result = studentService.addStudent(stu); // 4. 根据返回的boolean类型结果, 在控制台打印成功\\失败 if (result) &#123; System.out.println(\"添加成功\"); &#125; else &#123; System.out.println(\"添加失败\"); &#125; &#125; // 键盘录入学生id public String inputStudentId() &#123; String id; while (true) &#123; System.out.println(\"请输入学生id:\"); id = sc.next(); boolean exists = studentService.isExists(id); if (!exists) &#123; System.out.println(\"您输入的id不存在, 请重新输入:\"); &#125; else &#123; break; &#125; &#125; return id; &#125; // 键盘录入学生信息 // 开闭原则: 对扩展内容开放, 对修改内容关闭 public Student inputStudentInfo(String id)&#123; return null; &#125;&#125; StudentController类 12345678910111213141516171819202122public class StudentController extends BaseStudentController &#123; private Scanner sc = new Scanner(System.in); // 键盘录入学生信息 // 开闭原则: 对扩展内容开放, 对修改内容关闭 @Override public Student inputStudentInfo(String id) &#123; System.out.println(\"请输入学生姓名:\"); String name = sc.next(); System.out.println(\"请输入学生年龄:\"); String age = sc.next(); System.out.println(\"请输入学生生日:\"); String birthday = sc.next(); Student stu = new Student(); stu.setId(id); stu.setName(name); stu.setAge(age); stu.setBirthday(birthday); return stu; &#125;&#125; OtherStudentController类 123456789101112131415161718public class OtherStudentController extends BaseStudentController &#123; private Scanner sc = new Scanner(System.in); // 键盘录入学生信息 // 开闭原则: 对扩展内容开放, 对修改内容关闭 @Override public Student inputStudentInfo(String id) &#123; System.out.println(\"请输入学生姓名:\"); String name = sc.next(); System.out.println(\"请输入学生年龄:\"); String age = sc.next(); System.out.println(\"请输入学生生日:\"); String birthday = sc.next(); Student stu = new Student(id,name,age,birthday); return stu; &#125;&#125; 3.抽象类3.1抽象类的概述（理解）​ 当我们在做子类共性功能抽取时，有些方法在父类中并没有具体的体现，这个时候就需要抽象类了！ ​ 在Java中，一个没有方法体的方法应该定义为抽象方法，而类中如果有抽象方法，该类必须定义为抽象类！ 3.2抽象类的特点（记忆） 抽象类和抽象方法必须使用 abstract 关键字修饰 12345//抽象类的定义public abstract class 类名 &#123;&#125;//抽象方法的定义public abstract void eat(); 抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类 抽象类不能实例化 抽象类可以有构造方法 抽象类的子类 ​ 要么重写抽象类中的所有抽象方法 ​ 要么是抽象类 3.3抽象类的案例（应用） 案例需求 ​ 定义猫类(Cat)和狗类(Dog) ​ 猫类成员方法：eat（猫吃鱼）drink（喝水…） ​ 狗类成员方法：eat（狗吃肉）drink（喝水…） 实现步骤 猫类和狗类中存在共性内容，应向上抽取出一个动物类（Animal） 父类Animal中，无法将 eat 方法具体实现描述清楚，所以定义为抽象方法 抽象方法需要存活在抽象类中，将Animal定义为抽象类 让 Cat 和 Dog 分别继承 Animal，重写eat方法 测试类中创建 Cat 和 Dog 对象，调用方法测试 代码实现 动物类 1234567891011public abstract class Animal &#123; public void drink()&#123; System.out.println(\"喝水\"); &#125; public Animal()&#123; &#125; public abstract void eat();&#125; 猫类 123456public class Cat extends Animal &#123; @Override public void eat() &#123; System.out.println(\"猫吃鱼\"); &#125;&#125; 狗类 123456public class Dog extends Animal &#123; @Override public void eat() &#123; System.out.println(\"狗吃肉\"); &#125;&#125; 测试类 123456789101112public static void main(String[] args) &#123; Dog d = new Dog(); d.eat(); d.drink(); Cat c = new Cat(); c.drink(); c.eat(); //Animal a = new Animal(); //a.eat(); &#125; 3.4模板设计模式 设计模式 设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性、程序的重用性。 模板设计模式 把抽象类整体就可以看做成一个模板，模板中不能决定的东西定义成抽象方法让使用模板的类（继承抽象类的类）去重写抽象方法实现需求 模板设计模式的优势 模板已经定义了通用结构，使用者只需要关心自己需要实现的功能即可 示例代码 模板类 12345678910111213141516/* 作文模板类 */public abstract class CompositionTemplate &#123; public final void write()&#123; System.out.println(\"&lt;&lt;我的爸爸&gt;&gt;\"); body(); System.out.println(\"啊~ 这就是我的爸爸\"); &#125; public abstract void body();&#125; 实现类A 12345678public class Tom extends CompositionTemplate &#123; @Override public void body() &#123; System.out.println(\"那是一个秋天, 风儿那么缠绵,记忆中, \" + \"那天爸爸骑车接我放学回家,我的脚卡在了自行车链当中, 爸爸蹬不动,他就站起来蹬...\"); &#125;&#125; 实现类B 12345678910public class Tony extends CompositionTemplate &#123; @Override public void body() &#123; &#125; /*public void write()&#123; &#125;*/&#125; 测试类 123456public class Test &#123; public static void main(String[] args) &#123; Tom t = new Tom(); t.write(); &#125;&#125; 3.5final（应用） fianl关键字的作用 final代表最终的意思，可以修饰成员方法，成员变量，类 final修饰类、方法、变量的效果 fianl修饰类：该类不能被继承（不能有子类，但是可以有父类） final修饰方法：该方法不能被重写 final修饰变量：表明该变量是一个常量，不能再次赋值 变量是基本类型,不能改变的是值 变量是引用类型,不能改变的是地址值,但地址里面的内容是可以改变的 举例 12345public static void main(String[] args)&#123; final Student s = new Student(23); s = new Student(24); // 错误 s.setAge(24); // 正确&#125; 3.6黑马信息管理系统使用抽象类改进 (应用) 需求 使用抽象类的思想，将BaseStudentController 中的 inputStudentInfo 方法，定义为抽象方法 将不希望子类重写的方法，使用 final 进行修饰 代码实现 BaseStudentController类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126public abstract class BaseStudentController &#123; // 业务员对象 private StudentService studentService = new StudentService(); private Scanner sc = new Scanner(System.in); // 开启学生管理系统, 并展示学生管理系统菜单 public final void start() &#123; //Scanner sc = new Scanner(System.in); studentLoop: while (true) &#123; System.out.println(\"--------欢迎来到 &lt;学生&gt; 管理系统--------\"); System.out.println(\"请输入您的选择: 1.添加学生 2.删除学生 3.修改学生 4.查看学生 5.退出\"); String choice = sc.next(); switch (choice) &#123; case \"1\": // System.out.println(\"添加\"); addStudent(); break; case \"2\": // System.out.println(\"删除\"); deleteStudentById(); break; case \"3\": // System.out.println(\"修改\"); updateStudent(); break; case \"4\": // System.out.println(\"查询\"); findAllStudent(); break; case \"5\": System.out.println(\"感谢您使用学生管理系统, 再见!\"); break studentLoop; default: System.out.println(\"您的输入有误, 请重新输入\"); break; &#125; &#125; &#125; // 修改学生方法 public final void updateStudent() &#123; String updateId = inputStudentId(); Student newStu = inputStudentInfo(updateId); studentService.updateStudent(updateId, newStu); System.out.println(\"修改成功!\"); &#125; // 删除学生方法 public final void deleteStudentById() &#123; String delId = inputStudentId(); // 3. 调用业务员中的deleteStudentById根据id, 删除学生 studentService.deleteStudentById(delId); // 4. 提示删除成功 System.out.println(\"删除成功!\"); &#125; // 查看学生方法 public final void findAllStudent() &#123; // 1. 调用业务员中的获取方法, 得到学生的对象数组 Student[] stus = studentService.findAllStudent(); // 2. 判断数组的内存地址, 是否为null if (stus == null) &#123; System.out.println(\"查无信息, 请添加后重试\"); return; &#125; // 3. 遍历数组, 获取学生信息并打印在控制台 System.out.println(\"学号\\t\\t姓名\\t年龄\\t生日\"); for (int i = 0; i &lt; stus.length; i++) &#123; Student stu = stus[i]; if (stu != null) &#123; System.out.println(stu.getId() + \"\\t\" + stu.getName() + \"\\t\" + stu.getAge() + \"\\t\\t\" + stu.getBirthday()); &#125; &#125; &#125; // 添加学生方法 public final void addStudent() &#123; // StudentService studentService = new StudentService(); // 1. 键盘接收学生信息 String id; while (true) &#123; System.out.println(\"请输入学生id:\"); id = sc.next(); boolean flag = studentService.isExists(id); if (flag) &#123; System.out.println(\"学号已被占用, 请重新输入\"); &#125; else &#123; break; &#125; &#125; Student stu = inputStudentInfo(id); // 3. 将学生对象,传递给StudentService(业务员)中的addStudent方法 boolean result = studentService.addStudent(stu); // 4. 根据返回的boolean类型结果, 在控制台打印成功\\失败 if (result) &#123; System.out.println(\"添加成功\"); &#125; else &#123; System.out.println(\"添加失败\"); &#125; &#125; // 键盘录入学生id public String inputStudentId() &#123; String id; while (true) &#123; System.out.println(\"请输入学生id:\"); id = sc.next(); boolean exists = studentService.isExists(id); if (!exists) &#123; System.out.println(\"您输入的id不存在, 请重新输入:\"); &#125; else &#123; break; &#125; &#125; return id; &#125; // 键盘录入学生信息 // 开闭原则: 对扩展内容开放, 对修改内容关闭 public abstract Student inputStudentInfo(String id);&#125; 4.代码块4.1代码块概述 (理解)在Java中，使用 { } 括起来的代码被称为代码块 4.2代码块分类 (理解) 局部代码块 位置: 方法中定义 作用: 限定变量的生命周期，及早释放，提高内存利用率 示例代码 123456789101112131415public class Test &#123; /* 局部代码块 位置：方法中定义 作用：限定变量的生命周期，及早释放，提高内存利用率 */ public static void main(String[] args) &#123; &#123; int a = 10; System.out.println(a); &#125; // System.out.println(a); &#125;&#125; 构造代码块 位置: 类中方法外定义 特点: 每次构造方法执行的时，都会执行该代码块中的代码，并且在构造方法执行前执行 作用: 将多个构造方法中相同的代码，抽取到构造代码块中，提高代码的复用性 示例代码 123456789101112131415161718192021222324252627public class Test &#123; /* 构造代码块: 位置：类中方法外定义 特点：每次构造方法执行的时，都会执行该代码块中的代码，并且在构造方法执行前执行 作用：将多个构造方法中相同的代码，抽取到构造代码块中，提高代码的复用性 */ public static void main(String[] args) &#123; Student stu1 = new Student(); Student stu2 = new Student(10); &#125;&#125;class Student &#123; &#123; System.out.println(\"好好学习\"); &#125; public Student()&#123; System.out.println(\"空参数构造方法\"); &#125; public Student(int a)&#123; System.out.println(\"带参数构造方法...........\"); &#125;&#125; 静态代码块 位置: 类中方法外定义 特点: 需要通过static关键字修饰，随着类的加载而加载，并且只执行一次 作用: 在类加载的时候做一些数据初始化的操作 示例代码 1234567891011121314151617181920212223242526public class Test &#123; /* 静态代码块: 位置：类中方法外定义 特点：需要通过static关键字修饰，随着类的加载而加载，并且只执行一次 作用：在类加载的时候做一些数据初始化的操作 */ public static void main(String[] args) &#123; Person p1 = new Person(); Person p2 = new Person(10); &#125;&#125;class Person &#123; static &#123; System.out.println(\"我是静态代码块, 我执行了\"); &#125; public Person()&#123; System.out.println(\"我是Person类的空参数构造方法\"); &#125; public Person(int a)&#123; System.out.println(\"我是Person类的带...........参数构造方法\"); &#125;&#125; 4.3黑马信息管理系统使用代码块改进 (应用) 需求 使用静态代码块，初始化一些学生数据 实现步骤 在StudentDao类中定义一个静态代码块，用来初始化一些学生数据 将初始化好的学生数据存储到学生数组中 示例代码 StudentDao类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869public class StudentDao &#123; // 创建学生对象数组 private static Student[] stus = new Student[5]; static &#123; Student stu1 = new Student(\"heima001\",\"张三\",\"23\",\"1999-11-11\"); Student stu2 = new Student(\"heima002\",\"李四\",\"24\",\"2000-11-11\"); stus[0] = stu1; stus[1] = stu2; &#125; // 添加学生方法 public boolean addStudent(Student stu) &#123; // 2. 添加学生到数组 //2.1 定义变量index为-1，假设数组已经全部存满，没有null的元素 int index = -1; //2.2 遍历数组取出每一个元素，判断是否是null for (int i = 0; i &lt; stus.length; i++) &#123; Student student = stus[i]; if(student == null)&#123; index = i; //2.3 如果为null，让index变量记录当前索引位置，并使用break结束循环遍历 break; &#125; &#125; // 3. 返回是否添加成功的boolean类型状态 if(index == -1)&#123; // 装满了 return false; &#125;else&#123; // 没有装满, 正常添加, 返回true stus[index] = stu; return true; &#125; &#125; // 查看学生方法 public Student[] findAllStudent() &#123; return stus; &#125; public void deleteStudentById(String delId) &#123; // 1. 查找id在容器中所在的索引位置 int index = getIndex(delId); // 2. 将该索引位置,使用null元素进行覆盖 stus[index] = null; &#125; public int getIndex(String id)&#123; int index = -1; for (int i = 0; i &lt; stus.length; i++) &#123; Student stu = stus[i]; if(stu != null &amp;&amp; stu.getId().equals(id))&#123; index = i; break; &#125; &#125; return index; &#125; public void updateStudent(String updateId, Student newStu) &#123; // 1. 查找updateId, 在容器中的索引位置 int index = getIndex(updateId); // 2. 将该索引位置, 使用新的学生对象替换 stus[index] = newStu; &#125;&#125; ​","categories":[],"tags":[]},{"title":"分类和static","slug":"11_分类和static","date":"2020-11-06T15:45:54.000Z","updated":"2020-11-06T16:12:47.386Z","comments":true,"path":"2020/11/06/11_分类和static/","link":"","permalink":"http://yoursite.com/2020/11/06/11_%E5%88%86%E7%B1%BB%E5%92%8Cstatic/","excerpt":"1.案例驱动模式1.1案例驱动模式概述 (理解)通过我们已掌握的知识点,先实现一个案例,然后找出这个案例中,存在的一些问题,在通过新知识点解决问题","text":"1.案例驱动模式1.1案例驱动模式概述 (理解)通过我们已掌握的知识点,先实现一个案例,然后找出这个案例中,存在的一些问题,在通过新知识点解决问题 1.2案例驱动模式的好处 (理解) 解决重复代码过多的冗余,提高代码的复用性 解决业务逻辑聚集紧密导致的可读性差,提高代码的可读性 解决代码可维护性差,提高代码的维护性 2.分类思想2.1分类思想概述 (理解)分工协作,专人干专事 2.2黑马信息管理系统 (理解) Student类 标准学生类,封装键盘录入的学生信息(id , name , age , birthday) StudentDao类 Dao : (Data Access Object 缩写) 用于访问存储数据的数组或集合 StudentService类 用来进行业务逻辑的处理(例如: 判断录入的id是否存在) StudentController类 和用户打交道(接收用户需求,采集用户信息,打印数据到控制台) 3.分包思想3.1分包思想概述 (理解)如果将所有的类文件都放在同一个包下,不利于管理和后期维护,所以,对于不同功能的类文件,可以放在不同的包下进行管理 3.2包的概述 (记忆) 包 本质上就是文件夹 创建包 多级包之间使用 “ . “ 进行分割多级包的定义规范：公司的网站地址翻转(去掉www)比如：黑马程序员的网站址为www.itheima.com后期我们所定义的包的结构就是：com.itheima.其他的包名 包的命名规则 字母都是小写 3.3包的注意事项 (理解) package语句必须是程序的第一条可执行的代码 package语句在一个java文件中只能有一个 如果没有package,默认表示无包名 3.4类与类之间的访问 (理解) 同一个包下的访问 不需要导包，直接使用即可 不同包下的访问 1.import 导包后访问 2.通过全类名（包名 + 类名）访问 注意：import 、package 、class 三个关键字的摆放位置存在顺序关系 package 必须是程序的第一条可执行的代码 import 需要写在 package 下面 class 需要在 import 下面 4.黑马信息管理系统4.1系统介绍 (理解) 4.2学生管理系统 (应用)4.2.1需求说明 添加学生: 键盘录入学生信息(id，name，age，birthday) 使用数组存储学生信息,要求学生的id不能重复 删除学生: 键盘录入要删除学生的id值,将该学生从数组中移除,如果录入的id在数组中不存在,需要重新录入 修改学生: 键盘录入要修改学生的id值和修改后的学生信息 将数组中该学生的信息修改,如果录入的id在数组中不存在,需要重新录入 查询学生: 将数组中存储的所有学生的信息输出到控制台 4.2.2实现步骤 环境搭建实现步骤 包 存储的类 作用 com.itheima.edu.info.manager.domain Student.java 封装学生信息 com.itheima.edu.info.manager.dao StudentDao.java 访问存储数据的数组，进行赠删改查（库管） com.itheima.edu.info.manager.service StudentService.java 业务的逻辑处理（业务员） com.itheima.edu.info.manager.controller StudentController.java 和用户打交道（客服接待） com.itheima.edu.info.manager.entry InfoManagerEntry.java 程序的入口类，提供一个main方法 菜单搭建实现步骤 需求 黑马管理系统菜单搭建 学生管理系统菜单搭建 实现步骤 展示欢迎页面,用输出语句完成主界面的编写 获取用户的选择,用Scanner实现键盘录入数据 根据用户的选择执行对应的操作,用switch语句完成操作的选择 添加功能实现步骤 添加功能优化:判断id是否存在 查询功能实现步骤 删除功能实现步骤 修改功能实现步骤 系统优化 把updateStudent和deleteStudentById中录入学生id代码抽取到一个方法(inputStudentId)中该方法的主要作用就是录入学生的id，方法的返回值为String类型 把addStudent和updateStudent中录入学生信息的代码抽取到一个方法(inputStudentInfo)中该方法的主要作用就是录入学生的信息，并封装为学生对象，方法的返回值为Student类型 4.2.3代码实现学生类 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public class Student &#123; private String id; private String name; private String age; private String birthday; String address; public Student() &#123; &#125; public Student(String id, String name, String age, String birthday) &#123; this.id = id; this.name = name; this.age = age; this.birthday = birthday; &#125; public String getId() &#123; return id; &#125; public void setId(String id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getAge() &#123; return age; &#125; public void setAge(String age) &#123; this.age = age; &#125; public String getBirthday() &#123; return birthday; &#125; public void setBirthday(String birthday) &#123; this.birthday = birthday; &#125;&#125; 程序入口InfoManagerEntry类 1234567891011121314151617181920212223242526272829303132public class InfoManagerEntry &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); while (true) &#123; // 主菜单搭建 System.out.println(\"--------欢迎来到黑马信息管理系统--------\"); System.out.println(\"请输入您的选择: 1.学生管理 2.老师管理 3.退出\"); String choice = sc.next(); switch (choice) &#123; case \"1\": // System.out.println(\"学生管理\"); // 开启学生管理系统 StudentController studentController = new StudentController(); studentController.start(); break; case \"2\": System.out.println(\"老师管理\"); TeacherController teacherController = new TeacherController(); teacherController.start(); break; case \"3\": System.out.println(\"感谢您的使用\"); // 退出当前正在运行的JVM虚拟机 System.exit(0); break; default: System.out.println(\"您的输入有误, 请重新输入\"); break; &#125; &#125; &#125;&#125; StudentController类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138public class StudentController &#123; // 业务员对象 private StudentService studentService = new StudentService(); private Scanner sc = new Scanner(System.in); // 开启学生管理系统, 并展示学生管理系统菜单 public void start() &#123; //Scanner sc = new Scanner(System.in); studentLoop: while (true) &#123; System.out.println(\"--------欢迎来到 &lt;学生&gt; 管理系统--------\"); System.out.println(\"请输入您的选择: 1.添加学生 2.删除学生 3.修改学生 4.查看学生 5.退出\"); String choice = sc.next(); switch (choice) &#123; case \"1\": // System.out.println(\"添加\"); addStudent(); break; case \"2\": // System.out.println(\"删除\"); deleteStudentById(); break; case \"3\": // System.out.println(\"修改\"); updateStudent(); break; case \"4\": // System.out.println(\"查询\"); findAllStudent(); break; case \"5\": System.out.println(\"感谢您使用学生管理系统, 再见!\"); break studentLoop; default: System.out.println(\"您的输入有误, 请重新输入\"); break; &#125; &#125; &#125; // 修改学生方法 public void updateStudent() &#123; String updateId = inputStudentId(); Student newStu = inputStudentInfo(updateId); studentService.updateStudent(updateId, newStu); System.out.println(\"修改成功!\"); &#125; // 删除学生方法 public void deleteStudentById() &#123; String delId = inputStudentId(); // 3. 调用业务员中的deleteStudentById根据id, 删除学生 studentService.deleteStudentById(delId); // 4. 提示删除成功 System.out.println(\"删除成功!\"); &#125; // 查看学生方法 public void findAllStudent() &#123; // 1. 调用业务员中的获取方法, 得到学生的对象数组 Student[] stus = studentService.findAllStudent(); // 2. 判断数组的内存地址, 是否为null if (stus == null) &#123; System.out.println(\"查无信息, 请添加后重试\"); return; &#125; // 3. 遍历数组, 获取学生信息并打印在控制台 System.out.println(\"学号\\t\\t姓名\\t年龄\\t生日\"); for (int i = 0; i &lt; stus.length; i++) &#123; Student stu = stus[i]; if (stu != null) &#123; System.out.println(stu.getId() + \"\\t\" + stu.getName() + \"\\t\" + stu.getAge() + \"\\t\\t\" + stu.getBirthday()); &#125; &#125; &#125; // 添加学生方法 public void addStudent() &#123; // StudentService studentService = new StudentService(); // 1. 键盘接收学生信息 String id; while (true) &#123; System.out.println(\"请输入学生id:\"); id = sc.next(); boolean flag = studentService.isExists(id); if (flag) &#123; System.out.println(\"学号已被占用, 请重新输入\"); &#125; else &#123; break; &#125; &#125; Student stu = inputStudentInfo(id); // 3. 将学生对象,传递给StudentService(业务员)中的addStudent方法 boolean result = studentService.addStudent(stu); // 4. 根据返回的boolean类型结果, 在控制台打印成功\\失败 if (result) &#123; System.out.println(\"添加成功\"); &#125; else &#123; System.out.println(\"添加失败\"); &#125; &#125; // 键盘录入学生id public String inputStudentId() &#123; String id; while (true) &#123; System.out.println(\"请输入学生id:\"); id = sc.next(); boolean exists = studentService.isExists(id); if (!exists) &#123; System.out.println(\"您输入的id不存在, 请重新输入:\"); &#125; else &#123; break; &#125; &#125; return id; &#125; // 键盘录入学生信息 public Student inputStudentInfo(String id) &#123; System.out.println(\"请输入学生姓名:\"); String name = sc.next(); System.out.println(\"请输入学生年龄:\"); String age = sc.next(); System.out.println(\"请输入学生生日:\"); String birthday = sc.next(); Student stu = new Student(); stu.setId(id); stu.setName(name); stu.setAge(age); stu.setBirthday(birthday); return stu; &#125;&#125; StudentService类 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758public class StudentService &#123; // 创建StudentDao (库管) private StudentDao studentDao = new StudentDao(); // 添加学生方法 public boolean addStudent(Student stu) &#123; // 2. 将学生对象, 传递给StudentDao 库管中的addStudent方法 // 3. 将返回的boolean类型结果, 返还给StudentController return studentDao.addStudent(stu); &#125; // 判断学号是否存在方法 public boolean isExists(String id) &#123; Student[] stus = studentDao.findAllStudent(); // 假设id在数组中不存在 boolean exists = false; // 遍历数组, 获取每一个学生对象, 准备进行判断 for (int i = 0; i &lt; stus.length; i++) &#123; Student student = stus[i]; if(student != null &amp;&amp; student.getId().equals(id))&#123; exists = true; break; &#125; &#125; return exists; &#125; // 查看学生方法 public Student[] findAllStudent() &#123; // 1. 调用库管对象的findAllStudent获取学生对象数组 Student[] allStudent = studentDao.findAllStudent(); // 2. 判断数组中是否有学生信息 (有: 返回地址, 没有: 返回null) // 思路: 数组中只要存在一个不是null的元素, 那就代表有学生信息 boolean flag = false; for (int i = 0; i &lt; allStudent.length; i++) &#123; Student stu = allStudent[i]; if(stu != null)&#123; flag = true; break; &#125; &#125; if(flag)&#123; // 有信息 return allStudent; &#125;else&#123; // 没有信息 return null; &#125; &#125; public void deleteStudentById(String delId) &#123; studentDao.deleteStudentById(delId); &#125; public void updateStudent(String updateId, Student newStu) &#123; studentDao.updateStudent(updateId, newStu); &#125;&#125; StudentDao类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960public class StudentDao &#123; // 创建学生对象数组 private static Student[] stus = new Student[5]; // 添加学生方法 public boolean addStudent(Student stu) &#123; // 2. 添加学生到数组 //2.1 定义变量index为-1，假设数组已经全部存满，没有null的元素 int index = -1; //2.2 遍历数组取出每一个元素，判断是否是null for (int i = 0; i &lt; stus.length; i++) &#123; Student student = stus[i]; if(student == null)&#123; index = i; //2.3 如果为null，让index变量记录当前索引位置，并使用break结束循环遍历 break; &#125; &#125; // 3. 返回是否添加成功的boolean类型状态 if(index == -1)&#123; // 装满了 return false; &#125;else&#123; // 没有装满, 正常添加, 返回true stus[index] = stu; return true; &#125; &#125; // 查看学生方法 public Student[] findAllStudent() &#123; return stus; &#125; public void deleteStudentById(String delId) &#123; // 1. 查找id在容器中所在的索引位置 int index = getIndex(delId); // 2. 将该索引位置,使用null元素进行覆盖 stus[index] = null; &#125; public int getIndex(String id)&#123; int index = -1; for (int i = 0; i &lt; stus.length; i++) &#123; Student stu = stus[i]; if(stu != null &amp;&amp; stu.getId().equals(id))&#123; index = i; break; &#125; &#125; return index; &#125; public void updateStudent(String updateId, Student newStu) &#123; // 1. 查找updateId, 在容器中的索引位置 int index = getIndex(updateId); // 2. 将该索引位置, 使用新的学生对象替换 stus[index] = newStu; &#125;&#125; 4.3老师管理系统 (应用)4.3.1需求说明 添加老师: 通过键盘录入老师信息(id，name，age，birthday) 使用数组存储老师信息,要求老师的id不能重复 删除老师: 通过键盘录入要删除老师的id值,将该老师从数组中移除,如果录入的id在数组中不存在,需要重新录入 修改老师: 通过键盘录入要修改老师的id值和修改后的老师信息 将数组中该老师的信息修改,如果录入的id在数组中不存在,需要重新录入 查询老师: 将数组中存储的所有老师的信息输出到控制台 4.3.2实现步骤 环境搭建实现步骤 包 存储的类 作用 com.itheima.edu.info.manager.domain Student.java Teacher.java 封装学生信息 封装老师信息 com.itheima.edu.info.manager.dao StudentDao.java TeacherDao.java 访问存储数据的数组,进行赠删改查（库管） com.itheima.edu.info.manager.service StudentService.java TeacherService.java 业务的逻辑处理（业务员） com.itheima.edu.info.manager.controller StudentController.java TeacherController.java 和用户打交道（客服接待） com.itheima.edu.info.manager.entry InfoManagerEntry.java 程序的入口类,提供一个main方法 菜单搭建实现步骤 展示欢迎页面,用输出语句完成主界面的编写 获取用户的选择,用Scanner实现键盘录入数据 根据用户的选择执行对应的操作,用switch语句完成操作的选择 添加功能实现步骤 查询功能实现步骤 删除功能实现步骤 修改功能实现步骤 系统优化 把updateTeacher和deleteTeacherById中录入老师id代码抽取到一个方法(inputTeacherId)中该方法的主要作用就是录入老师的id,方法的返回值为String类型 把addTeacher和updateTeacher中录入老师信息的代码抽取到一个方法(inputTeacherInfo)中该方法的主要作用就是录入老师的信息,并封装为老师对象,方法的返回值为Teacher类型 4.3.3代码实现老师类 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849public class Teacher extends Person&#123; private String id; private String name; private String age; private String birthday; String address; public Teacher() &#123; &#125; public Teacher(String id, String name, String age, String birthday) &#123; this.id = id; this.name = name; this.age = age; this.birthday = birthday; &#125; public String getId() &#123; return id; &#125; public void setId(String id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getAge() &#123; return age; &#125; public void setAge(String age) &#123; this.age = age; &#125; public String getBirthday() &#123; return birthday; &#125; public void setBirthday(String birthday) &#123; this.birthday = birthday; &#125;&#125; TeacherController类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145public class TeacherController &#123; private Scanner sc = new Scanner(System.in); private TeacherService teacherService = new TeacherService(); public void start() &#123; teacherLoop: while (true) &#123; System.out.println(\"--------欢迎来到 &lt;老师&gt; 管理系统--------\"); System.out.println(\"请输入您的选择: 1.添加老师 2.删除老师 3.修改老师 4.查看老师 5.退出\"); String choice = sc.next(); switch (choice) &#123; case \"1\": // System.out.println(\"添加老师\"); addTeacher(); break; case \"2\": // System.out.println(\"删除老师\"); deleteTeacherById(); break; case \"3\": // System.out.println(\"修改老师\"); updateTeacher(); break; case \"4\": // System.out.println(\"查看老师\"); findAllTeacher(); break; case \"5\": System.out.println(\"感谢您使用老师管理系统, 再见!\"); break teacherLoop; default: System.out.println(\"您的输入有误, 请重新输入\"); break; &#125; &#125; &#125; public void updateTeacher() &#123; String id = inputTeacherId(); Teacher newTeacher = inputTeacherInfo(id); // 调用业务员的修改方法 teacherService.updateTeacher(id,newTeacher); System.out.println(\"修改成功\"); &#125; public void deleteTeacherById() &#123; String id = inputTeacherId(); // 2. 调用业务员中的删除方法, 根据id, 删除老师 teacherService.deleteTeacherById(id); // 3. 提示删除成功 System.out.println(\"删除成功\"); &#125; public void findAllTeacher() &#123; // 1. 从业务员中, 获取老师对象数组 Teacher[] teachers = teacherService.findAllTeacher(); // 2. 判断数组中是否有元素 if (teachers == null) &#123; System.out.println(\"查无信息, 请添加后重试\"); return; &#125; // 3. 遍历数组, 取出元素, 并打印在控制台 System.out.println(\"学号\\t\\t姓名\\t年龄\\t生日\"); for (int i = 0; i &lt; teachers.length; i++) &#123; Teacher t = teachers[i]; if (t != null) &#123; System.out.println(t.getId() + \"\\t\" + t.getName() + \"\\t\" + t.getAge() + \"\\t\\t\" + t.getBirthday()); &#125; &#125; &#125; public void addTeacher() &#123; String id; while (true) &#123; // 1. 接收不存在的老师id System.out.println(\"请输入老师id:\"); id = sc.next(); // 2. 判断id是否存在 boolean exists = teacherService.isExists(id); if (exists) &#123; System.out.println(\"id已被占用, 请重新输入:\"); &#125; else &#123; break; &#125; &#125; Teacher t = inputTeacherInfo(id); // 5. 将封装好的老师对象, 传递给TeacherService继续完成添加操作 boolean result = teacherService.addTeacher(t); if (result) &#123; System.out.println(\"添加成功\"); &#125; else &#123; System.out.println(\"添加失败\"); &#125; &#125; // 录入老师id public String inputTeacherId()&#123; String id; while(true)&#123; System.out.println(\"请输入id\"); id = sc.next(); boolean exists = teacherService.isExists(id); if(!exists)&#123; System.out.println(\"您输入的id不存在, 请重新输入:\"); &#125;else&#123; break; &#125; &#125; return id; &#125; // 录入老师信息, 封装为老师对象 public Teacher inputTeacherInfo(String id)&#123; System.out.println(\"请输入老师姓名:\"); String name = sc.next(); System.out.println(\"请输入老师年龄:\"); String age = sc.next(); System.out.println(\"请输入老师生日:\"); String birthday = sc.next(); Teacher t = new Teacher(); t.setId(id); t.setName(name); t.setAge(age); t.setBirthday(birthday); return t; &#125;&#125; TeacherService类 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455public class TeacherService &#123; private TeacherDao teacherDao = new TeacherDao(); public boolean addTeacher(Teacher t) &#123; return teacherDao.addTeacher(t); &#125; public boolean isExists(String id) &#123; // 1. 获取库管对象中的数组 Teacher[] teachers = teacherDao.findAllTeacher(); boolean exists = false; // 2. 遍历数组, 取出每一个元素, 进行判断 for (int i = 0; i &lt; teachers.length; i++) &#123; Teacher teacher = teachers[i]; if(teacher != null &amp;&amp; teacher.getId().equals(id))&#123; exists = true; break; &#125; &#125; return exists; &#125; public Teacher[] findAllTeacher() &#123; Teacher[] allTeacher = teacherDao.findAllTeacher(); boolean flag = false; for (int i = 0; i &lt; allTeacher.length; i++) &#123; Teacher t = allTeacher[i]; if(t != null)&#123; flag = true; break; &#125; &#125; if(flag)&#123; return allTeacher; &#125;else&#123; return null; &#125; &#125; public void deleteTeacherById(String id) &#123; teacherDao.deleteTeacherById(id); &#125; public void updateTeacher(String id, Teacher newTeacher) &#123; teacherDao.updateTeacher(id,newTeacher); &#125;&#125; TeacherDao类 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152public class TeacherDao &#123; private static Teacher[] teachers = new Teacher[5]; public boolean addTeacher(Teacher t) &#123; int index = -1; for (int i = 0; i &lt; teachers.length; i++) &#123; Teacher teacher = teachers[i]; if(teacher == null)&#123; index = i; break; &#125; &#125; if(index == -1)&#123; return false; &#125;else&#123; teachers[index] = t; return true; &#125; &#125; public Teacher[] findAllTeacher() &#123; return teachers; &#125; public void deleteTeacherById(String id) &#123; // 1. 查询id在数组中的索引位置 int index = getIndex(id); // 2. 将该索引位置的元素, 使用null进行替换 teachers[index] = null; &#125; public int getIndex(String id)&#123; int index = -1; for (int i = 0; i &lt; teachers.length; i++) &#123; Teacher t = teachers[i]; if(t != null &amp;&amp; t.getId().equals(id))&#123; index = i; break; &#125; &#125; return index; &#125; public void updateTeacher(String id, Teacher newTeacher) &#123; int index = getIndex(id); teachers[index] = newTeacher; &#125;&#125; 5.static关键字5.1static关键字概述 (理解)static 关键字是静态的意思,是Java中的一个修饰符,可以修饰成员方法,成员变量 5.2static修饰的特点 (记忆) 被类的所有对象共享 是我们判断是否使用静态关键字的条件 随着类的加载而加载，优先于对象存在 对象需要类被加载后，才能创建 可以通过类名调用 也可以通过对象名调用 5.3static关键字注意事项 (理解) 静态方法只能访问静态的成员 非静态方法可以访问静态的成员，也可以访问非静态的成员 静态方法中是没有this关键字","categories":[],"tags":[]},{"title":"10_Git介绍","slug":"10_Git介绍","date":"2020-11-05T07:13:27.339Z","updated":"2020-11-05T07:57:37.407Z","comments":true,"path":"2020/11/05/10_Git介绍/","link":"","permalink":"http://yoursite.com/2020/11/05/10_Git%E4%BB%8B%E7%BB%8D/","excerpt":"1.Git介绍1.1版本控制(理解)无论是代码编写，还是文档编写，我们都会遇到对文档内容反复修改的情况","text":"1.Git介绍1.1版本控制(理解)无论是代码编写，还是文档编写，我们都会遇到对文档内容反复修改的情况 1.2开发中存在的问题(理解) 程序员小明负责的模块就要完成了，就在即将提交发布之前的一瞬间，电脑突然蓝屏，硬盘光荣下岗！ 几个月来的努力付之东流 ​ 老王需要在项目中加入一个很复杂的功能，一边尝试，一边修改代码，就这样摸索了一个星期。可是这被改得面目全非的代码已经回不到从前了。 小明和老王先后从文件服务器上下载了同一个文件 因项目中Bug过多，导致项目进度拖延，项目经理老徐因此被骂，但不清楚Bug是手下哪一个程序员写的 开发中要解决的问题 代码备份 版本控制 协同工作 责任追溯 1.3SVN版本控制(理解)SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而开发人员工作的时候，用的都是自己的电脑，所以首先要从中央服务器下载最新的版本，然后开发，开发完后，需要把自己开发的代码提交到中央服务器。 服务器单点故障 将会导致所有人员无法工作 而服务器硬盘损坏 这意味着，你可能失去了该项目的所有历史记录，这是毁灭性的。 1.4Git版本控制(理解)Git是在2005年，Linux系统的创建者Linus Torvalds,为了帮助全球的开发者，维护Linux系统内核的开发而开发了自己的开源分布式版本控制工具,分为两种类型的仓库：本地仓库和远程仓库。 每一个客户端都保存了完整的历史记录 服务器的故障，都可以通过客户端的记录得以恢复。 2.Git下载和安装2.1Git的下载(应用)官网下载地址：https://git-scm.com/downloads 2.2Git的安装(应用) 双击安装包，进入安装向导界面 指定安装目录 一路next下一步 等待安装 安装完成 安装完成后在电脑桌面（也可以是其他目录）点击右键，如果能够看到如下两个菜单则说明Git安装成功。 运行Git命令客户端，使用git –version 命令，可以查看git版本 2.3TortoiseGit的安装(应用) 双击安装包，进入安装向导界面 一路next下一步 指定安装目录 安装 配置 安装TortoiseGit中文语言包,一路next即可 配置TortoiseGit中文语言 3.Git操作入门3.1Git基本工作流程(理解)本地仓库 3.2Git命令行操作(应用) git常用命令 命令 作用 git init 初始化，创建 git 仓库 git status 查看 git 状态 （文件是否进行了添加、提交操作） git add 文件名 添加，将指定文件添加到暂存区 git commit -m ‘提交信息’ 提交，将暂存区文件提交到历史仓库 git log 查看日志（ git 提交的历史日志） 操作步骤 创建工作目录、初始化本地 git 仓库 新建一个 test.txt 文件（暂不执行添加操作） 使用 status 命令，查看状态 使用 add 命令添加，并查看状态 使用 commit 命令，提交到本地历史仓库 使用 log 命令，查看日志 修改 test.txt 文件 添加并提交，查看日志 3.3Git图形化工具操作(理解) 创建工作目录、初始化本地 git 仓库 新建一个 test.txt 文件（暂不执行添加操作） 选中文件右键，选择TortoiseGit，之后选择添加 空白处右键,Git提交,提交到本地历史仓库 空白处右键,TortoiseGit,显示日志,可以产看日志信息 修改 test.txt 文件 添加并提交，查看日志 4.Git版本管理4.1历史版本切换(理解) 准备动作 查看 my_project 的 log 日志git reflog ：可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录的操作） 增加一次新的修改记录 需求: 将代码切换到第二次修改的版本 指令：git reset –hard 版本唯一索引值 4.2分支管理介绍(理解) 分支 由每次提交的代码，串成的一条时间线 使用分支意味着你可以把你的工作从开发主线上分离开来,以免影响开发主线 分支的使用场景 周期较长的模块开发假设你准备开发一个新功能，但是需要一个月才能完成第一周写了20%的代码，突然发现原来已经写好的功能出现了一个严重的Bug那现在就需要放下手中的新功能，去修复Bug但这20%的代码不能舍弃，并且也担心丢失，这就需要开启一个新的版本控制。 尝试性的模块开发业务人员给我们提出了一个需求，经过我们的思考和分析该需求应该可以使用技术手段进行实现。但是我们还不敢确定，我们就可以去创建一个分支基于分支进行尝试性开发。 分支工作流程 Master: 指向提交的代码版本 Header: 指向当前所使用的的分支 4.3分支管理操作(应用) 创建和切换 创建命令：git branch 分支名切换命令：git checkout 分支名 新分支添加文件 查看文件命令：ls 总结：不同分支之间的关系是平行的关系，不会相互影响 合并分支 合并命令：git merge 分支名 删除分支 删除命令：git branch -d 分支名 查看分支列表 查看命令：git branch 5.远程仓库5.1远程仓库工作流程(理解) 5.2远程仓库平台介绍(理解) GitHub 域名：https://github.com介绍：GitHub是全球最大的开源项目托管平台，俗称大型程序员社区化交友网站 ​ 各类好玩有趣的开源项目，只有想不到，没有找不到。 码云 域名：https://gitee.com介绍：码云是全国最大的开源项目托管平台，良心平台，速度快，提供免费私有库 5.3码云的注册(应用) 5.4先有本地项目,远程为空(应用) 步骤 创建本地仓库 创建或修改文件，添加（add）文件到暂存区，提交（commit）到本地仓库 创建远程仓库 推送到远程仓库 创建远程仓库 生成SSH公钥 推送代码之前，需要先配置SSH公钥 生成SSH公钥步骤 设置Git账户 git config user.name（查看git账户） git config user.email（查看git邮箱） git config –global user.name “账户名”（设置全局账户名） git config –global user.email “邮箱”（设置全局邮箱） cd ~/.ssh（查看是否生成过SSH公钥） 生成SSH公钥 生成命令: ssh-keygen –t rsa –C “邮箱” ( 注意：这里需要敲3次回车) 查看命令: cat ~/.ssh/id-rsa.pub 设置账户公钥 公钥测试 命令: ssh -T git@gitee.com 推送到远程仓库 步骤 为远程仓库的URL（网址），自定义仓库名称 推送 命令 git remote add 远程名称 远程仓库URL git push -u 仓库名称 分支名 5.5先有远程仓库,本地为空(应用) 步骤 将远程仓库的代码，克隆到本地仓库 克隆命令：git clone 仓库地址 创建新文件，添加并提交到本地仓库 推送至远程仓库 项目拉取更新 拉取命令：git pull 远程仓库名 分支名 5.6代码冲突(应用) 产生原因: 两个程序员操作同一个文件,其中一个程序员在修改文件后,push到远程仓库,另一个程序员应该先pull将最新的代码更新到本地仓库后,在修改代码,之后push到远程仓库,结果他没有先pull将最新的代码更新到本地仓库,而是直接将自己的代码push到远程仓库,这样就可能会导致代码冲突 如何解决冲突 &lt;&lt;&lt;&lt;&lt;&lt;&lt;和&gt;&gt;&gt;&gt;&gt;&gt;&gt;中间的内容,就是冲突部分 修改冲突行，保存，即可解决冲突。 重新add冲突文件并commit到本地仓库，重新push到远程 6.IDEA集成Git6.1IDEA中配置Git(应用) File -&gt; Settings Version Control -&gt; Git -&gt; 指定git.exe存放目录 点击Test测试 6.2创建本地仓库(应用) VCS-&gt;Import into Version Control-&gt;Create Git Repository 选择工程所在的目录,这样就创建好本地仓库了 点击git后边的对勾,将当前项目代码提交到本地仓库 注意: 项目中的配置文件不需要提交到本地仓库中,提交时,忽略掉即可 6.3版本切换(应用) 方式一: 控制台Version Control-&gt;Log-&gt;Reset Current Branch…-&gt;Reset 这种切换的特点是会抛弃原来的提交记录 方式二:控制台Version Control-&gt;Log-&gt;Revert Commit-&gt;Merge-&gt;处理代码-&gt;commit 这种切换的特点是会当成一个新的提交记录,之前的提交记录也都保留 ​ 6.4分支管理(应用) 创建分支 VCS-&gt;Git-&gt;Branches-&gt;New Branch-&gt;给分支起名字-&gt;ok 切换分支 idea右下角Git-&gt;选择要切换的分支-&gt;checkout 合并分支 VCS-&gt;Git-&gt;Merge changes-&gt;选择要合并的分支-&gt;merge 处理分支中的代码 删除分支 idea右下角-&gt;选中要删除的分支-&gt;Delete 6.5本地仓库推送到远程仓库(应用) VCS-&gt;Git-&gt;Push-&gt;点击master Define remote 将远程仓库的路径复制过来-&gt;Push 6.6远程仓库克隆到本地仓库(应用)File-&gt;Close Project-&gt;Checkout from Version Control-&gt;Git-&gt;指定远程仓库的路径-&gt;指定本地存放的路径-&gt;clone","categories":[],"tags":[]},{"title":"9_ArrayList","slug":"9_ArrayList","date":"2020-11-05T07:12:37.394Z","updated":"2020-11-05T07:57:27.303Z","comments":true,"path":"2020/11/05/9_ArrayList/","link":"","permalink":"http://yoursite.com/2020/11/05/9_ArrayList/","excerpt":"1.ArrayList集合和数组的区别 : ​ 共同点：都是存储数据的容器 ​ 不同点：数组的容量是固定的，集合的容量是可变的","text":"1.ArrayList集合和数组的区别 : ​ 共同点：都是存储数据的容器 ​ 不同点：数组的容量是固定的，集合的容量是可变的 1.1 -ArrayList的构造方法和添加方法 public ArrayList() 创建一个空的集合对象 public boolean add(E e) 将指定的元素追加到此集合的末尾 public void add(int index,E element) 在此集合中的指定位置插入指定的元素 ArrayList ： ​ 可调整大小的数组实现 ​ : 是一种特殊的数据类型，泛型。 怎么用呢 ? ​ 在出现E的地方我们使用引用数据类型替换即可 ​ 举例：ArrayList, ArrayList 1.2ArrayList类常用方法【应用】*成员方法 : * public boolean remove(Object o) 删除指定的元素，返回删除是否成功 public E remove(int index) 删除指定索引处的元素，返回被删除的元素 public E set(int index,E element) 修改指定索引处的元素，返回被修改的元素 public E get(int index) 返回指定索引处的元素 public int size() 返回集合中的元素的个数 示例代码 : 123456789101112131415161718192021222324252627282930313233343536373839public class ArrayListDemo02 &#123; public static void main(String[] args) &#123; //创建集合 ArrayList&lt;String&gt; array = new ArrayList&lt;String&gt;(); //添加元素 array.add(\"hello\"); array.add(\"world\"); array.add(\"java\"); //public boolean remove(Object o)：删除指定的元素，返回删除是否成功// System.out.println(array.remove(\"world\"));// System.out.println(array.remove(\"javaee\")); //public E remove(int index)：删除指定索引处的元素，返回被删除的元素// System.out.println(array.remove(1)); //IndexOutOfBoundsException// System.out.println(array.remove(3)); //public E set(int index,E element)：修改指定索引处的元素，返回被修改的元素// System.out.println(array.set(1,\"javaee\")); //IndexOutOfBoundsException// System.out.println(array.set(3,\"javaee\")); //public E get(int index)：返回指定索引处的元素// System.out.println(array.get(0));// System.out.println(array.get(1));// System.out.println(array.get(2)); //System.out.println(array.get(3)); //？？？？？？ 自己测试 //public int size()：返回集合中的元素的个数 System.out.println(array.size()); //输出集合 System.out.println(\"array:\" + array); &#125;&#125; 1.3 ArrayList存储字符串并遍历案例需求 : ​ 创建一个存储字符串的集合，存储3个字符串元素，使用程序实现在控制台遍历该集合 实现步骤 : 1:创建集合对象12342:往集合中添加字符串对象3:遍历集合，首先要能够获取到集合中的每一个元素，这个通过get(int index)方法实现4:遍历集合，其次要能够获取到集合的长度，这个通过size()方法实现5:遍历集合的通用格式 代码实现 : 12345678910111213141516171819202122232425262728/* 思路： 1:创建集合对象 2:往集合中添加字符串对象 3:遍历集合，首先要能够获取到集合中的每一个元素，这个通过get(int index)方法实现 4:遍历集合，其次要能够获取到集合的长度，这个通过size()方法实现 5:遍历集合的通用格式 */public class ArrayListTest01 &#123; public static void main(String[] args) &#123; //创建集合对象 ArrayList&lt;String&gt; array = new ArrayList&lt;String&gt;(); //往集合中添加字符串对象 array.add(\"刘正风\"); array.add(\"左冷禅\"); array.add(\"风清扬\"); //遍历集合，其次要能够获取到集合的长度，这个通过size()方法实现// System.out.println(array.size()); //遍历集合的通用格式 for(int i=0; i&lt;array.size(); i++) &#123; String s = array.get(i); System.out.println(s); &#125; &#125;&#125; 1.4 ArrayList存储学生对象并遍历案例需求 : ​ 创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合 *实现步骤 : * ​ 1:定义学生类 ​ 2:创建集合对象 ​ 3:创建学生对象 ​ 4:添加学生对象到集合中 ​ 5:遍历集合，采用通用遍历格式实现 代码实现 : 123456789101112131415161718192021222324252627282930/* 思路： 1:定义学生类 2:创建集合对象 3:创建学生对象 4:添加学生对象到集合中 5:遍历集合，采用通用遍历格式实现 */public class ArrayListTest02 &#123; public static void main(String[] args) &#123; //创建集合对象 ArrayList&lt;Student&gt; array = new ArrayList&lt;&gt;(); //创建学生对象 Student s1 = new Student(\"林青霞\", 30); Student s2 = new Student(\"风清扬\", 33); Student s3 = new Student(\"张曼玉\", 18); //添加学生对象到集合中 array.add(s1); array.add(s2); array.add(s3); //遍历集合，采用通用遍历格式实现 for (int i = 0; i &lt; array.size(); i++) &#123; Student s = array.get(i); System.out.println(s.getName() + \",\" + s.getAge()); &#125; &#125;&#125; 1.5 键盘录入学生信息到集合案例需求 : ​ 创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合 ​ 学生的姓名和年龄来自于键盘录入 实现步骤 : ​ 1:定义学生类，为了键盘录入数据方便，把学生类中的成员变量都定义为String类型 ​ 2:创建集合对象 ​ 3:键盘录入学生对象所需要的数据 ​ 4:创建学生对象，把键盘录入的数据赋值给学生对象的成员变量 ​ 5:往集合中添加学生对象 ​ 6:遍历集合，采用通用遍历格式实现 代码实现 : 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/* 思路： 1:定义学生类，为了键盘录入数据方便，把学生类中的成员变量都定义为String类型 2:创建集合对象 3:键盘录入学生对象所需要的数据 4:创建学生对象，把键盘录入的数据赋值给学生对象的成员变量 5:往集合中添加学生对象 6:遍历集合，采用通用遍历格式实现 */public class ArrayListTest &#123; public static void main(String[] args) &#123; //创建集合对象 ArrayList&lt;Student&gt; array = new ArrayList&lt;Student&gt;(); //为了提高代码的复用性，我们用方法来改进程序 addStudent(array); addStudent(array); addStudent(array); //遍历集合，采用通用遍历格式实现 for (int i = 0; i &lt; array.size(); i++) &#123; Student s = array.get(i); System.out.println(s.getName() + \",\" + s.getAge()); &#125; &#125; /* 两个明确： 返回值类型：void 参数：ArrayList&lt;Student&gt; array */ public static void addStudent(ArrayList&lt;Student&gt; array) &#123; //键盘录入学生对象所需要的数据 Scanner sc = new Scanner(System.in); System.out.println(\"请输入学生姓名:\"); String name = sc.nextLine(); System.out.println(\"请输入学生年龄:\"); String age = sc.nextLine(); //创建学生对象，把键盘录入的数据赋值给学生对象的成员变量 Student s = new Student(); s.setName(name); s.setAge(age); //往集合中添加学生对象 array.add(s); &#125;&#125; 2. 学生管理系统2.1 学生管理系统实现步骤 案例需求 ​ 针对目前我们的所学内容，完成一个综合案例：学生管理系统！该系统主要功能如下： ​ 添加学生：通过键盘录入学生信息，添加到集合中 ​ 删除学生：通过键盘录入要删除学生的学号，将该学生对象从集合中删除 ​ 修改学生：通过键盘录入要修改学生的学号，将该学生对象其他信息进行修改 ​ 查看学生：将集合中的学生对象信息进行展示 ​ 退出系统：结束程序 实现步骤 定义学生类，包含以下成员变量 学生类： Student成员变量： ​ 学号：sid ​ 姓名：name ​ 年龄：age ​ 生日：birthday ​ 构造方法： ​ 无参构造 ​ 带四个参数的构造成员方法： ​ 每个成员变量对应给出get/set方法 学生管理系统主界面的搭建步骤 2.1 用输出语句完成主界面的编写 2.2 用Scanner实现键盘录入数据 2.3 用switch语句完成操作的选择 2.4 用循环完成再次回到主界面 学生管理系统的添加学生功能实现步骤 3.1 用键盘录入选择添加学生 3.2 定义一个方法，用于添加学生 ​ 显示提示信息，提示要输入何种信息 ​ 键盘录入学生对象所需要的数据 ​ 创建学生对象，把键盘录入的数据赋值给学生对象的成员变量 ​ 将学生对象添加到集合中（保存） ​ 给出添加成功提示 3.3 调用方法 学生管理系统的查看学生功能实现步骤 4.1 用键盘录入选择查看所有学生信息 4.2 定义一个方法，用于查看学生信息 ​ 显示表头信息 ​ 将集合中数据取出按照对应格式显示学生信息，年龄显示补充“岁” 4.3 调用方法 学生管理系统的删除学生功能实现步骤 5.1 用键盘录入选择删除学生信息 5.2 定义一个方法，用于删除学生信息 ​ 显示提示信息 ​ 键盘录入要删除的学生学号 ​ 调用getIndex方法，查找该学号在集合的索引 ​ 如果索引为-1，提示信息不存在 ​ 如果索引不是-1，调用remove方法删除并提示删除成功 5.3 调用方法 学生管理系统的修改学生功能实现步骤 6.1 用键盘录入选择修改学生信息 6.2 定义一个方法，用于修改学生信息 ​ 显示提示信息 ​ 键盘录入要修改的学生学号 ​ 调用getIndex方法，查找该学号在集合的索引 ​ 如果索引为-1，提示信息不存在 ​ 如果索引不是-1，键盘录入要修改的学生信息 ​ 集合修改对应的学生信息 ​ 给出修改成功提示 6.3 调用方法 退出系统 使用System.exit(0);退出JVM 2.2 学生类的定义1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package com.itheima.domain;public class Student &#123; private String sid; // 学号 private String name; // 姓名 private int age; // 年龄 private String birthday; // 生日 public Student() &#123; &#125; public Student(String sid, String name, int age, String birthday) &#123; this.sid = sid; this.name = name; this.age = age; this.birthday = birthday; &#125; public String getSid() &#123; return sid; &#125; public void setSid(String sid) &#123; this.sid = sid; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; public String getBirthday() &#123; return birthday; &#125; public void setBirthday(String birthday) &#123; this.birthday = birthday; &#125;&#125; 2.3 测试类的定义123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176package com.itheima.test;import com.itheima.domain.Student;import java.util.ArrayList;import java.util.Scanner;public class StudentManager &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); // 创建集合容器对象 ArrayList&lt;Student&gt; list = new ArrayList&lt;&gt;(); lo: while (true) &#123; // 1. 搭建主界面菜单 System.out.println(\"--------欢迎来到学生管理系统--------\"); System.out.println(\"1 添加学生\"); System.out.println(\"2 删除学生\"); System.out.println(\"3 修改学生\"); System.out.println(\"4 查看学生\"); System.out.println(\"5 退出\"); System.out.println(\"请输入您的选择:\"); String choice = sc.next(); switch (choice) &#123; case \"1\": //System.out.println(\"添加学生\"); addStudent(list); break; case \"2\": //System.out.println(\"删除学生\"); deleteStudent(list); break; case \"3\": //System.out.println(\"修改学生\"); updateStudent(list); break; case \"4\": // System.out.println(\"查看学生\"); queryStudents(list); break; case \"5\": System.out.println(\"感谢您的使用\"); break lo; default: System.out.println(\"您的输入有误\"); break; &#125; &#125; &#125; // 修改学生的方法 public static void updateStudent(ArrayList&lt;Student&gt; list) &#123; System.out.println(\"请输入您要修改的学生学号:\"); Scanner sc = new Scanner(System.in); String updateSid = sc.next(); // 3. 调用getIndex方法, 查找该学号在集合中出现的索引位置 int index = getIndex(list,updateSid); // 4. 根据索引判断, 学号在集合中是否存在 if(index == -1)&#123; // 不存在: 给出提示 System.out.println(\"查无信息, 请重新输入\"); &#125;else&#123; // 存在: 接收新的学生信息 System.out.println(\"请输入新的学生姓名:\"); String name = sc.next(); System.out.println(\"请输入新的学生年龄:\"); int age = sc.nextInt(); System.out.println(\"请输入新的学生生日:\"); String birthday = sc.next(); // 封装为新的学生对象 Student stu = new Student(updateSid, name, age, birthday); // 调用集合的set方法, 完成修改 list.set(index, stu); System.out.println(\"修改成功!\"); &#125; &#125; // 删除学生的方法 public static void deleteStudent(ArrayList&lt;Student&gt; list) &#123; // 1. 给出提示信息 (请输入您要删除的学号) System.out.println(\"请输入您要删除的学生学号:\"); // 2. 键盘接收要删除的学号 Scanner sc = new Scanner(System.in); String deleteSid = sc.next(); // 3. 调用getIndex方法, 查找该学号在集合中出现的索引位置 int index = getIndex(list,deleteSid); // 4. 根据索引判断, 学号在集合中是否存在 if(index == -1)&#123; // 不存在: 给出提示 System.out.println(\"查无信息, 请重新输入\"); &#125;else&#123; // 存在:删除 list.remove(index); System.out.println(\"删除成功!\"); &#125; &#125; // 查看学生的方法 public static void queryStudents(ArrayList&lt;Student&gt; list) &#123; // 1. 判断集合中是否存在数据, 如果不存在直接给出提示 if(list.size() == 0)&#123; System.out.println(\"无信息, 请添加后重新查询\"); return; &#125; // 2. 存在: 展示表头数据 System.out.println(\"学号\\t\\t姓名\\t年龄\\t生日\"); // 3. 遍历集合, 获取每一个学生对象的信息, 打印在控制台 for (int i = 0; i &lt; list.size(); i++) &#123; Student stu = list.get(i); System.out.println(stu.getSid() + \"\\t\" + stu.getName() + \"\\t\" + stu.getAge() + \"\\t\\t\" + stu.getBirthday()); &#125; &#125; // 添加学生的方法 public static void addStudent(ArrayList&lt;Student&gt; list) &#123; Scanner sc = new Scanner(System.in); // 1. 给出录入的提示信息 String sid; while(true)&#123; System.out.println(\"请输入学号:\"); sid = sc.next(); int index = getIndex(list, sid); if(index == -1)&#123; // sid不存在, 学号可以使用 break; &#125; &#125; System.out.println(\"请输入姓名:\"); String name = sc.next(); System.out.println(\"请输入年龄:\"); int age = sc.nextInt(); System.out.println(\"请输入生日:\"); String birthday = sc.next(); // 2. 将键盘录入的信息封装为学生对象 Student stu = new Student(sid,name,age,birthday); // 3. 将封装好的学生对象, 添加到集合容器当中 list.add(stu); // 4. 给出添加成功的提示信息 System.out.println(\"添加成功!\"); &#125; /* getIndex : 接收一个集合对象, 接收一个学生学号 查找这个学号, 在集合中出现的索引位置 */ public static int getIndex(ArrayList&lt;Student&gt; list, String sid)&#123; // 1. 假设传入的学号, 在集合中不存在 int index = -1; // 2. 遍历集合, 获取每一个学生对象, 准备进行查找 for (int i = 0; i &lt; list.size(); i++) &#123; Student stu = list.get(i); // 3. 获取每一个学生对象的学号 String id = stu.getSid(); // 4. 使用获取出的学生学号, 和传入的学号(查找的学号)进行比对 if(id.equals(sid))&#123; // 存在: 让index变量记录正确的索引位置 index = i; &#125; &#125; return index; &#125;&#125;","categories":[],"tags":[]},{"title":"8_API","slug":"8_API","date":"2020-11-04T14:41:55.500Z","updated":"2020-11-04T14:42:15.237Z","comments":true,"path":"2020/11/04/8_API/","link":"","permalink":"http://yoursite.com/2020/11/04/8_API/","excerpt":"1.API1.1 API概述-帮助文档的使用 什么是API ​ API (Application Programming Interface) ：应用程序编程接口 java中的API","text":"1.API1.1 API概述-帮助文档的使用 什么是API ​ API (Application Programming Interface) ：应用程序编程接口 java中的API ​ 指的就是 JDK 中提供的各种功能的 Java类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可，我们可以通过帮助文档来学习这些API如何使用。 如何使用API帮助文档 : 打开帮助文档 找到索引选项卡中的输入框 在输入框中输入Random 看类在哪个包下 看类的描述 看构造方法 看成员方法 1.2 键盘录入字符串Scanner类 : ​ next() : 遇到了空格, 就不再录入数据了 , 结束标记: 空格, tab键 ​ nextLine() : 可以将数据完整的接收过来 , 结束标记: 回车换行符 代码实现 : 12345678910111213141516171819202122232425package com.itheima.api;import java.util.Scanner;public class Demo1Scanner &#123; /* next() : 遇到了空格, 就不再录入数据了 结束标记: 空格, tab键 nextLine() : 可以将数据完整的接收过来 结束标记: 回车换行符 */ public static void main(String[] args) &#123; // 1. 创建Scanner对象 Scanner sc = new Scanner(System.in); System.out.println(\"请输入:\"); // 2. 调用nextLine方法接收字符串 // ctrl + alt + v : 快速生成方法的返回值 String s = sc.nextLine(); System.out.println(s); &#125;&#125; 12345678910111213141516171819202122package com.itheima.api;import java.util.Scanner;public class Demo2Scanner &#123; /* nextInt和nextLine方法配合使用的时候, nextLine方法就没有键盘录入的机会了 建议: 今后键盘录入数据的时候, 如果是字符串和整数一起接受, 建议使用next方法接受字符串. */ public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); System.out.println(\"请输入整数:\"); int num = sc.nextInt(); // 10 + 回车换行 System.out.println(\"请输入字符串:\"); String s = sc.nextLine(); System.out.println(num); System.out.println(s); &#125;&#125; 2. String类2.1 String概述​ 1 String 类在 java.lang 包下，所以使用的时候不需要导包 ​ 2 String 类代表字符串，Java 程序中的所有字符串文字（例如“abc”）都被实现为此类的实例也就是说，Java 程序中所有的双引号字符串，都是 String 类的对象 ​ 3 字符串不可变，它们的值在创建后不能被更改 2.2 String类的构造方法常用的构造方法 示例代码 1234567891011121314151617181920212223242526272829303132package com.itheima.string;public class Demo2StringConstructor &#123; /* String类常见构造方法: public String() : 创建一个空白字符串对象，不含有任何内容 public String(char[] chs) : 根据字符数组的内容，来创建字符串对象 public String(String original) : 根据传入的字符串内容，来创建字符串对象 String s = “abc”; 直接赋值的方式创建字符串对象，内容就是abc 注意: String这个类比较特殊, 打印其对象名的时候, 不会出现内存地址 而是该对象所记录的真实内容. 面向对象-继承, Object类 */ public static void main(String[] args) &#123; // public String() : 创建一个空白字符串对象，不含有任何内容 String s1 = new String(); System.out.println(s1); // public String(char[] chs) : 根据字符数组的内容，来创建字符串对象 char[] chs = &#123;'a','b','c'&#125;; String s2 = new String(chs); System.out.println(s2); // public String(String original) : 根据传入的字符串内容，来创建字符串对象 String s3 = new String(\"123\"); System.out.println(s3); &#125;&#125; 2.4 创建字符串对象的区别对比 通过构造方法创建 ​ 通过 new 创建的字符串对象，每一次 new 都会申请一个内存空间，虽然内容相同，但是地址值不同 直接赋值方式创建 ​ 以“”方式给出的字符串，只要字符序列相同(顺序和大小写)，无论在程序代码中出现几次，JVM 都只会建立一个 String 对象，并在字符串池中维护 2.5 字符串的比较2.5.1 字符串的比较 == 比较基本数据类型：比较的是具体的值 == 比较引用数据类型：比较的是对象地址值 String类 : public boolean equals(String s) 比较两个字符串内容是否相同、区分大小写 代码 : 12345678910111213141516package com.itheima.stringmethod;public class Demo1Equals &#123; public static void main(String[] args) &#123; String s1 = \"abc\"; String s2 = \"ABC\"; String s3 = \"abc\"; // equals : 比较字符串内容, 区分大小写 System.out.println(s1.equals(s2)); System.out.println(s1.equals(s3)); // equalsIgnoreCase : 比较字符串内容, 忽略大小写 System.out.println(s1.equalsIgnoreCase(s2)); &#125;&#125; 2.6 用户登录案例【应用】案例需求 : ​ 已知用户名和密码，请用程序实现模拟用户登录。总共给三次机会，登录之后，给出相应的提示 *实现步骤 : * 已知用户名和密码，定义两个字符串表示即可 键盘录入要登录的用户名和密码，用 Scanner 实现 拿键盘录入的用户名、密码和已知的用户名、密码进行比较，给出相应的提示。 字符串的内容比较，用equals() 方法实现 用循环实现多次机会，这里的次数明确，采用for循环实现，并在登录成功的时候，使用break结束循 代码实现 : 123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.itheima.test;import java.util.Scanner;public class Test1 &#123; /* 需求：已知用户名和密码，请用程序实现模拟用户登录。 总共给三次机会，登录之后，给出相应的提示 思路： 1. 已知用户名和密码，定义两个字符串表示即可 2. 键盘录入要登录的用户名和密码，用 Scanner 实现 3. 拿键盘录入的用户名、密码和已知的用户名、密码进行比较，给出相应的提示。 字符串的内容比较，用equals() 方法实现 4. 用循环实现多次机会，这里的次数明确，采用for循环实现，并在登录成功的时候，使用break结束循环 */ public static void main(String[] args) &#123; // 1. 已知用户名和密码，定义两个字符串表示即可 String username = \"admin\"; String password = \"123456\"; // 2. 键盘录入要登录的用户名和密码，用 Scanner 实现 Scanner sc = new Scanner(System.in); // 4. 用循环实现多次机会，这里的次数明确，采用for循环实现 for(int i = 1; i &lt;= 3; i++)&#123; System.out.println(\"请输入用户名:\"); String scUsername = sc.nextLine(); System.out.println(\"请输入密码:\"); String scPassword = sc.nextLine(); // 3. 拿键盘录入的用户名、密码和已知的用户名、密码进行比较，给出相应的提示。 if(username.equals(scUsername) &amp;&amp; password.equals(scPassword))&#123; System.out.println(\"登录成功\"); break; &#125;else&#123; if(i == 3)&#123; System.out.println(\"您的登录次数已达到今日上限, 请明天再来\"); &#125;else&#123; System.out.println(\"登录失败,您还剩余\" + (3-i) +\"次机会\"); &#125; &#125; &#125; &#125;&#125; 2.7 遍历字符串案例【应用】案例需求 : ​ 键盘录入一个字符串，使用程序实现在控制台遍历该字符串 实现步骤 : 键盘录入一个字符串，用 Scanner 实现 遍历字符串，首先要能够获取到字符串中的每一个字符, public char charAt(int index)：返回指定索引处的char值，字符串的索引也是从0开始的 遍历字符串，其次要能够获取到字符串的长度, public int length()：返回此字符串的长度 遍历打印 代码实现 : 123456789101112131415161718192021222324252627282930package com.itheima.test;import java.util.Scanner;public class Test2 &#123; /* 需求：键盘录入一个字符串，使用程序实现在控制台遍历该字符串 思路： 1. 键盘录入一个字符串，用 Scanner 实现 2. 遍历字符串，首先要能够获取到字符串中的每一个字符 public char charAt(int index)：返回指定索引处的char值，字符串的索引也是从0开始的 3. 遍历字符串，其次要能够获取到字符串的长度 public int length()：返回此字符串的长度 4. 遍历打印9 */ public static void main(String[] args) &#123; // 1. 键盘录入一个字符串，用 Scanner 实现 Scanner sc = new Scanner(System.in); System.out.println(\"请输入:\"); String s = sc.nextLine(); // 2. 遍历字符串，首先要能够获取到字符串中的每一个字符 for(int i = 0; i &lt; s.length(); i++)&#123; // i : 字符串的每一个索引 char c = s.charAt(i); System.out.println(c); &#125; &#125;&#125; 2.8 统计字符次数案例【应用】案例需求 : ​ 键盘录入一个字符串，使用程序实现在控制台遍历该字符串 实现步骤 : 键盘录入一个字符串，用 Scanner 实现 将字符串拆分为字符数组 , public char[] toCharArray( )：将当前字符串拆分为字符数组并返回 遍历字符数 代码实现 : 12345678910111213141516171819202122232425262728package com.itheima.test;import java.util.Scanner;public class Test3 &#123; /* 需求：键盘录入一个字符串，使用程序实现在控制台遍历该字符串 思路： 1. 键盘录入一个字符串，用 Scanner 实现 2. 将字符串拆分为字符数组 public char[] toCharArray( )：将当前字符串拆分为字符数组并返回 3. 遍历字符数组 */ public static void main(String[] args) &#123; // 1. 键盘录入一个字符串，用 Scanner 实现 Scanner sc = new Scanner(System.in); System.out.println(\"请输入:\"); String s = sc.nextLine(); // 2. 将字符串拆分为字符数组 char[] chars = s.toCharArray(); // 3. 遍历字符数组 for (int i = 0; i &lt; chars.length; i++) &#123; System.out.println(chars[i]); &#125; &#125;&#125; 2.9 手机号屏蔽-字符串截取案例需求 : ​ 以字符串的形式从键盘接受一个手机号，将中间四位号码屏蔽 1最终效果为：156****1234 实现步骤 : 键盘录入一个字符串，用 Scanner 实现 截取字符串前三位 截取字符串后四位 将截取后的两个字符串，中间加上****进行拼接，输出结果 代码实现 : 1234567891011121314151617181920212223242526272829package com.itheima.test;import java.util.Scanner;public class Test5 &#123; /* 需求：以字符串的形式从键盘接受一个手机号，将中间四位号码屏蔽 最终效果为：156****1234 思路： 1. 键盘录入一个字符串，用 Scanner 实现 2. 截取字符串前三位 3. 截取字符串后四位 4. 将截取后的两个字符串，中间加上****进行拼接，输出结果 */ public static void main(String[] args) &#123; // 1. 键盘录入一个字符串，用 Scanner 实现 Scanner sc = new Scanner(System.in); System.out.println(\"请输入手机号:\"); String telString = sc.nextLine(); // 2. 截取字符串前三位 String start = telString.substring(0,3); // 3. 截取字符串后四位 String end = telString.substring(7); // 4. 将截取后的两个字符串，中间加上****进行拼接，输出结果 System.out.println(start + \"****\" + end); &#125;&#125; 2.10 敏感词替换-字符串替换案例需求 : ​ 键盘录入一个 字符串，如果字符串中包含（TMD），则使用***替换 实现步骤 : 键盘录入一个字符串，用 Scanner 实现 替换敏感词 12String replace(CharSequence target, CharSequence replacement)将当前字符串中的target内容，使用replacement进行替换，返回新的字符串 输出结果 代码实现 : 123456789101112131415161718192021222324252627package com.itheima.test;import java.util.Scanner;public class Test6 &#123; /* 需求：键盘录入一个 字符串，如果字符串中包含（TMD），则使用***替换 思路： 1. 键盘录入一个字符串，用 Scanner 实现 2. 替换敏感词 String replace(CharSequence target, CharSequence replacement) 将当前字符串中的target内容，使用replacement进行替换，返回新的字符串 3. 输出结果 */ public static void main(String[] args) &#123; // 1. 键盘录入一个字符串，用 Scanner 实现 Scanner sc = new Scanner(System.in); System.out.println(\"请输入:\"); String s = sc.nextLine(); // 2. 替换敏感词 String result = s.replace(\"TMD\",\"***\"); // 3. 输出结果 System.out.println(result); &#125;&#125; 2.11 切割字符串案例需求 : ​ 以字符串的形式从键盘录入学生信息，例如：“张三 , 23” ​ 从该字符串中切割出有效数据,封装为Student学生对象 实现步骤 : 编写Student类，用于封装数据 键盘录入一个字符串，用 Scanner 实现 根据逗号切割字符串，得到（张三）（23） String[] split(String regex) ：根据传入的字符串作为规则进行切割将切割后的内容存入字符串数组中，并将字符串数组返回 从得到的字符串数组中取出元素内容，通过Student类的有参构造方法封装为对象 调用对象getXxx方法，取出数据并打印。 代码实现 : 123456789101112131415161718192021222324252627282930313233343536373839package com.itheima.test;import com.itheima.domain.Student;import java.util.Scanner;public class Test7 &#123; /* 需求：以字符串的形式从键盘录入学生信息，例如：“张三 , 23” 从该字符串中切割出有效数据,封装为Student学生对象 思路： 1. 编写Student类，用于封装数据 2. 键盘录入一个字符串，用 Scanner 实现 3. 根据逗号切割字符串，得到（张三）（23） String[] split(String regex) ：根据传入的字符串作为规则进行切割 将切割后的内容存入字符串数组中，并将字符串数组返回 4. 从得到的字符串数组中取出元素内容，通过Student类的有参构造方法封装为对象 5. 调用对象getXxx方法，取出数据并打印。 */ public static void main(String[] args) &#123; // 2. 键盘录入一个字符串，用 Scanner 实现 Scanner sc = new Scanner(System.in); System.out.println(\"请输入学生信息:\"); String stuInfo = sc.nextLine(); // stuInfo = \"张三,23\"; // 3. 根据逗号切割字符串，得到（张三）（23） String[] sArr = stuInfo.split(\",\");// System.out.println(sArr[0]);// System.out.println(sArr[1]); // 4. 从得到的字符串数组中取出元素内容，通过Student类的有参构造方法封装为对象 Student stu = new Student(sArr[0],sArr[1]); // 5. 调用对象getXxx方法，取出数据并打印。 System.out.println(stu.getName() + \"...\" + stu.getAge()); &#125;&#125; 2.12 String方法小结String类的常用方法 : ​ public boolean equals(Object anObject) 比较字符串的内容，严格区分大小写 ​ public boolean equalsIgnoreCase(String anotherString) 比较字符串的内容，忽略大小写 ​ public int length() 返回此字符串的长度 ​ public char charAt(int index) 返回指定索引处的 char 值 ​ public char[] toCharArray() 将字符串拆分为字符数组后返回 ​ public String substring(int beginIndex, int endIndex) 根据开始和结束索引进行截取，得到新的字符串（包含头，不包含尾） ​ public String substring(int beginIndex) 从传入的索引处截取，截取到末尾，得到新的字符串 ​ public String replace(CharSequence target, CharSequence replacement) 使用新值，将字符串中的旧值替换，得到新的字符串 ​ public String[] split(String regex) 根据传入的规则切割字符串，得到字符串数组 3 StringBuilder类3.1 StringBuilder类概述​ 概述 : StringBuilder 是一个可变的字符串类，我们可以把它看成是一个容器，这里的可变指的是 StringBuilder 对象中的内容是可变的 3.2 StringBuilder类和String类的区别 String类：内容是不可变的 StringBuilder类：内容是可变的 3.3StringBuilder类的构造方法常用的构造方法 方法名 说明 public StringBuilder() 创建一个空白可变字符串对象，不含有任何内容 public StringBuilder(String str) 根据字符串的内容，来创建可变字符串对象 示例代码 12345678910111213public class StringBuilderDemo01 &#123; public static void main(String[] args) &#123; //public StringBuilder()：创建一个空白可变字符串对象，不含有任何内容 StringBuilder sb = new StringBuilder(); System.out.println(\"sb:\" + sb); System.out.println(\"sb.length():\" + sb.length()); //public StringBuilder(String str)：根据字符串的内容，来创建可变字符串对象 StringBuilder sb2 = new StringBuilder(\"hello\"); System.out.println(\"sb2:\" + sb2); System.out.println(\"sb2.length():\" + sb2.length()); &#125;&#125; 3.4 StringBuilder常用的成员方法 添加和反转方法 方法名 说明 public StringBuilder append(任意类型) 添加数据，并返回对象本身 public StringBuilder reverse() 返回相反的字符序列 示例代码 123456789101112131415161718192021222324252627public class StringBuilderDemo01 &#123; public static void main(String[] args) &#123; //创建对象 StringBuilder sb = new StringBuilder(); //public StringBuilder append(任意类型)：添加数据，并返回对象本身// StringBuilder sb2 = sb.append(\"hello\");//// System.out.println(\"sb:\" + sb);// System.out.println(\"sb2:\" + sb2);// System.out.println(sb == sb2);// sb.append(\"hello\");// sb.append(\"world\");// sb.append(\"java\");// sb.append(100); //链式编程 sb.append(\"hello\").append(\"world\").append(\"java\").append(100); System.out.println(\"sb:\" + sb); //public StringBuilder reverse()：返回相反的字符序列 sb.reverse(); System.out.println(\"sb:\" + sb); &#125;&#125; 3.5StringBuilder和String相互转换【应用】 StringBuilder转换为String ​ public String toString()：通过 toString() 就可以实现把 StringBuilder 转换为 String String转换为StringBuilder ​ public StringBuilder(String s)：通过构造方法就可以实现把 String 转换为 StringBuilder 示例代码 12345678910111213141516171819202122232425public class StringBuilderDemo02 &#123; public static void main(String[] args) &#123; /* //StringBuilder 转换为 String StringBuilder sb = new StringBuilder(); sb.append(\"hello\"); //String s = sb; //这个是错误的做法 //public String toString()：通过 toString() 就可以实现把 StringBuilder 转换为 String String s = sb.toString(); System.out.println(s); */ //String 转换为 StringBuilder String s = \"hello\"; //StringBuilder sb = s; //这个是错误的做法 //public StringBuilder(String s)：通过构造方法就可以实现把 String 转换为 StringBuilder StringBuilder sb = new StringBuilder(s); System.out.println(sb); &#125;&#125; 3.6 StringBuilder拼接字符串案例案例需求 : ​ 定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法， ​ 并在控制台输出结果。例如，数组为int[] arr = {1,2,3}; ，执行方法后的输出结果为：[1, 2, 3] 实现步骤 : 定义一个 int 类型的数组，用静态初始化完成数组元素的初始化 定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回。 1返回值类型 String，参数列表 int[] arr 在方法中用 StringBuilder 按照要求进行拼接，并把结果转成 String 返回 调用方法，用一个变量接收结果 输出结果 代码实现 : 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152/* 思路： 1:定义一个 int 类型的数组，用静态初始化完成数组元素的初始化 2:定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回。 返回值类型 String，参数列表 int[] arr 3:在方法中用 StringBuilder 按照要求进行拼接，并把结果转成 String 返回 4:调用方法，用一个变量接收结果 5:输出结果 */public class StringBuilderTest01 &#123; public static void main(String[] args) &#123; //定义一个 int 类型的数组，用静态初始化完成数组元素的初始化 int[] arr = &#123;1, 2, 3&#125;; //调用方法，用一个变量接收结果 String s = arrayToString(arr); //输出结果 System.out.println(\"s:\" + s); &#125; //定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回 /* 两个明确： 返回值类型：String 参数：int[] arr */ public static String arrayToString(int[] arr) &#123; //在方法中用 StringBuilder 按照要求进行拼接，并把结果转成 String 返回 StringBuilder sb = new StringBuilder(); sb.append(\"[\"); for(int i=0; i&lt;arr.length; i++) &#123; if(i == arr.length-1) &#123; sb.append(arr[i]); &#125; else &#123; sb.append(arr[i]).append(\", \"); &#125; &#125; sb.append(\"]\"); String s = sb.toString(); return s; &#125;&#125;键盘录入一个字符串,将其中的大写转成小写,小写转大写,数字不变,其他字符变成*;","categories":[],"tags":[]},{"title":"7_类和对象","slug":"7_类和对象","date":"2020-11-04T14:41:16.824Z","updated":"2020-11-04T14:42:25.063Z","comments":true,"path":"2020/11/04/7_类和对象/","link":"","permalink":"http://yoursite.com/2020/11/04/7_%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/","excerpt":"1. 类和对象*面向对象和面向过程的思想对比 : * ​ 面向过程 ：是一种以过程为中心的编程思想，实现功能的每一步，都是自己实现的 ​ 面向对象 ：是一种以对象为中心的编程思想，通过指挥对象实现具体的功能","text":"1. 类和对象*面向对象和面向过程的思想对比 : * ​ 面向过程 ：是一种以过程为中心的编程思想，实现功能的每一步，都是自己实现的 ​ 面向对象 ：是一种以对象为中心的编程思想，通过指挥对象实现具体的功能 1.1 类和对象的关系客观存在的事物皆为对象 ，所以我们也常常说万物皆对象。 类 类的理解 类是对现实生活中一类具有共同属性和行为的事物的抽象 类是对象的数据类型，类是具有相同属性和行为的一组对象的集合 简单理解：类就是对现实事物的一种描述 类的组成 属性：指事物的特征，例如：手机事物（品牌，价格，尺寸） 行为：指事物能执行的操作，例如：手机事物（打电话，发短信） 类和对象的关系 类：类是对现实生活中一类具有共同属性和行为的事物的抽象 对象：是能够看得到摸的着的真实存在的实体 简单理解：类是对事物的一种描述，对象则为具体存在的事物 1.2 类的定义【应用】类的组成是由属性和行为两部分组成 属性：在类中通过成员变量来体现（类中方法外的变量） 行为：在类中通过成员方法来体现（和前面的方法相比去掉static关键字即可） 类的定义步骤： ​ ① 定义类 ​ ② 编写类的成员变量 ​ ③ 编写类的成员方法 123456789101112public class Student &#123; // 属性 : 姓名, 年龄 // 成员变量: 跟之前定义变量的格式一样, 只不过位置发生了改变, 类中方法外 String name; int age; // 行为 : 学习 // 成员方法: 跟之前定义方法的格式一样, 只不过去掉了static关键字. public void study()&#123; System.out.println(\"学习\"); &#125;&#125; 1.3 对象的创建和使用 创建对象的格式： 类名 对象名 = new 类名(); 调用成员的格式： 对象名.成员变量 对象名.成员方法(); *示例代码 : * 1234567891011121314151617181920212223242526272829303132package com.itheima.object1;public class TestStudent &#123; /* 创建对象的格式: 类名 对象名 = new 类名(); 调用成员变量的格式: 对象名.变量名 调用成员方法的格式: 对象名.方法名(); */ public static void main(String[] args) &#123; // 类名 对象名 = new 类名(); Student stu = new Student(); // 对象名.变量名 // 默认初始化值 System.out.println(stu.name); // null System.out.println(stu.age); // 0 stu.name = \"张三\"; stu.age = 23; System.out.println(stu.name); // 张三 System.out.println(stu.age); // 23 // 对象名.方法名(); stu.study(); // com.itheima.object1.Student@b4c966a // 全类名(包名 + 类名) System.out.println(stu); &#125;&#125; 1.4 案例-手机类的创建和使用需求 ：首先定义一个手机类，然后定义一个手机测试类，在手机测试类中通过对象完成成员变量和成员方法的使用 分析 ： 成员变量：品牌, 价格 成员方法：打电话, 发短信 示例代码： 12345678910111213141516package com.itheima.test1;public class Phone &#123; // 品牌, 价格 String brand; int price; // 打电话, 发短信 public void call(String name)&#123; System.out.println(\"给\"+name+\"打电话\"); &#125; public void sendMessage()&#123; System.out.println(\"群发短信\"); &#125;&#125; 12345678910111213141516package com.itheima.test1;public class TestPhone &#123; public static void main(String[] args) &#123; // 1. 创建对象 Phone p = new Phone(); // 2. 给成员变量进行赋值 p.brand = \"大米\"; p.price = 2999; // 3. 打印赋值后的成员变量 System.out.println(p.brand + \"...\" + p.price); // 4. 调用成员方法 p.call(\"阿强\"); p.sendMessage(); &#125;&#125; 2. 对象内存图2.1 单个对象内存图【理解】 2.2 多个对象内存图【理解】 总结： 多个对象在堆内存中，都有不同的内存划分，成员变量存储在各自的内存区域中，成员方法多个对象共用的一份 2.3 多个对象指向相同内存图【理解】 总结 : 当多个对象的引用指向同一个内存空间（变量所记录的地址值是一样的） 只要有任何一个对象修改了内存中的数据，随后，无论使用哪一个对象进行数据获取，都是修改后的数据。 3. 成员变量和局部变量3.1 成员变量和局部变量的区别 类中位置不同：成员变量（类中方法外）局部变量（方法内部或方法声明上） 内存中位置不同：成员变量（堆内存）局部变量（栈内存） 生命周期不同：成员变量（随着对象的存在而存在，随着对象的消失而消失）局部变量（随着方法的调用而存在，醉着方法的调用完毕而消失） 初始化值不同：成员变量（有默认初始化值）局部变量（没有默认初始化值，必须先定义，赋值才能使用） 4. 封装4.1 private关键字​ 概述 : private是一个修饰符，可以用来修饰成员（成员变量，成员方法） ​ 特点 : 被private修饰的成员，只能在本类进行访问，针对private修饰的成员变量，如果需要被其他类使用， 提供相应的操作 ​ 提供“get变量名()”方法，用于获取成员变量的值，方法用public修饰 ​ 提供“set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰 ​ 示例代码： 12345678910111213141516171819202122232425262728293031323334353637383940/* 学生类 */class Student &#123; //成员变量 String name; private int age; //提供get/set方法 public void setAge(int a) &#123; if(a&lt;0 || a&gt;120) &#123; System.out.println(\"你给的年龄有误\"); &#125; else &#123; age = a; &#125; &#125; public int getAge() &#123; return age; &#125; //成员方法 public void show() &#123; System.out.println(name + \",\" + age); &#125;&#125;/* 学生测试类 */public class StudentDemo &#123; public static void main(String[] args) &#123; //创建对象 Student s = new Student(); //给成员变量赋值 s.name = \"林青霞\"; s.setAge(30); //调用show方法 s.show(); &#125;&#125; 4.2 private关键字的使用 需求： 定义标准的学生类，要求name和age使用private修饰 并提供set和get方法以及便于显示数据的show方法 测试类中创建对象并使用，最终控制台输出 林青霞，30 示例代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/* 学生类 */class Student &#123; //成员变量 private String name; private int age; //get/set方法 public void setName(String n) &#123; name = n; &#125; public String getName() &#123; return name; &#125; public void setAge(int a) &#123; age = a; &#125; public int getAge() &#123; return age; &#125; public void show() &#123; System.out.println(name + \",\" + age); &#125;&#125;/* 学生测试类 */public class StudentDemo &#123; public static void main(String[] args) &#123; //创建对象 Student s = new Student(); //使用set方法给成员变量赋值 s.setName(\"林青霞\"); s.setAge(30); s.show(); //使用get方法获取成员变量的值 System.out.println(s.getName() + \"---\" + s.getAge()); System.out.println(s.getName() + \",\" + s.getAge()); &#125;&#125; 4.3 this关键字【应用】概述 : this修饰的变量用于指代成员变量，其主要作用是（区分局部变量和成员变量的重名问题） 方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量 方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量 代码实现 : 123456789101112131415161718192021222324public class Student &#123; private String name; private int age; public void setName(String name) &#123; this.name = name; &#125; public String getName() &#123; return name; &#125; public void setAge(int age) &#123; this.age = age; &#125; public int getAge() &#123; return age; &#125; public void show() &#123; System.out.println(name + \",\" + age); &#125;&#125; 4.4 this内存原理【理解】 注意 : this代表当前调用方法的引用，哪个对象调用的方法，this就代表哪一个对象 图解 ： 4.5 封装思想 封装概述 是面向对象三大特征之一（封装，继承，多态） 是面向对象编程语言对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界是无法直接操作的 封装原则 将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问 成员变量private，提供对应的getXxx()/setXxx()方法 封装好处 通过方法来控制成员变量的操作，提高了代码的安全性 把代码用方法进行封装，提高了代码的复用性 5. 构造方法5.1 构造方法的格式和执行时机 格式注意 : 方法名与类名相同，大小写也要一致 没有返回值类型，连void都没有 没有具体的返回值（不能由retrun带回结果数据） 执行时机 ： 创建对象的时候调用，每创建一次对象，就会执行一次构造方法 不能手动调用构造方法 示例代码： 1234567891011121314151617181920212223class Student &#123; private String name; private int age; //构造方法 public Student() &#123; System.out.println(\"无参构造方法\"); &#125; public void show() &#123; System.out.println(name + \",\" + age); &#125;&#125;/* 测试类 */public class StudentDemo &#123; public static void main(String[] args) &#123; //创建对象 Student s = new Student(); s.show(); &#125;&#125; 5.2 构造方法的作用 用于给对象的数据（属性）进行初始化 12345678910111213141516171819202122232425262728package com.itheima.constructor;public class Student &#123; /* 格式: 1. 方法名需要跟类名相同, 大小写也要一致 2. 没有返回值类型, 连void都没有 3. 没有具体的返回值(不能由return带回具体的结果) */ private String name; private int age; // 1. 如果一个类中没有编写任何构造方法, 系统将会提供一个默认的无参数构造方法 public Student()&#123;&#125; // 2. 如果手动编写了构造方法, 系统就不会再提供默认的无参数构造方法了 public Student(String name, int age)&#123; this.name = name; this.age = age; System.out.println(\"我是Student类的构造方法\"); &#125; public void show()&#123; System.out.println(name + \"...\" + age); &#125;&#125; 12345678910package com.itheima.constructor;public class TestStudent &#123; public static void main(String[] args) &#123; Student stu1 = new Student(\"张三\",23); stu1.show(); Student stu2 = new Student(); &#125;&#125; 5.3 构造方法的注意事项构造方法的创建 : ​ 如果没有定义构造方法，系统将给出一个默认的无参数构造方法 ​ 如果定义了构造方法，系统将不再提供默认的构造方法 构造方法的创建 : ​ 如果没有定义构造方法，系统将给出一个默认的无参数构造方法如果定义了构造方法，系统将不再提供默认的构造方法 推荐的使用方式 : ​ 无论是否使用，都手动书写无参数构造方法，和带参数构造方法 5.4 标准类的代码编写和使用代码 : 12345678910111213141516171819202122232425262728293031323334353637package com.itheima.test3;/* JavaBean类: 封装数据 */public class Student &#123; private String name; private int age; public Student() &#123; &#125; public Student(String name, int age) &#123; this.name = name; this.age = age; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; public void show()&#123; System.out.println(name + \"...\" + age); &#125;&#125; 123456789101112131415package com.itheima.test3;public class TestStudent &#123; public static void main(String[] args) &#123; // 1. 无参数构造方法创建对象, 通过setXxx方法给成员变量进行赋值 Student stu1 = new Student(); stu1.setName(\"张三\"); stu1.setAge(23); stu1.show(); // 2. 通过带参数构造方法, 直接给属性进行赋值 Student stu2 = new Student(\"李四\",24); stu2.show(); &#125;&#125;","categories":[],"tags":[]},{"title":"6_Debug模式","slug":"6_Debug模式","date":"2020-11-03T15:15:30.312Z","updated":"2020-11-05T07:57:09.189Z","comments":true,"path":"2020/11/03/6_Debug模式/","link":"","permalink":"http://yoursite.com/2020/11/03/6_Debug%E6%A8%A1%E5%BC%8F/","excerpt":"1.Debug模式1.1 什么是Debug模式是供程序员使用的程序调试工具，它可以用于查看程序的执行流程，也可以用于追踪程序执行过程来调试程序。","text":"1.Debug模式1.1 什么是Debug模式是供程序员使用的程序调试工具，它可以用于查看程序的执行流程，也可以用于追踪程序执行过程来调试程序。 1.2 Debug介绍与操作流程 如何加断点 选择要设置断点的代码行，在行号的区域后面单击鼠标左键即可 如何运行加了断点的程序 在代码区域右键Debug执行 看哪里 看Debugger窗口 看Console窗口 点哪里 点Step Into (F7)这个箭头，也可以直接按F7 如何删除断点 选择要删除的断点，单击鼠标左键即可 如果是多个断点，可以每一个再点击一次。也可以一次性全部删除 2. 进制的介绍与书写格式2.1 进制的介绍与书写格式几进制,就是逢几进1,借1当几 二进制:组成 0 , 1 八进制:组成: 0 - 7 十六进制 组成: 0-9 a-f 代码 : 12345678910111213141516public class Demo1 &#123; /* 十进制：Java中，数值默认都是10进制，不需要加任何修饰。 二进制：数值前面以0b开头，b大小写都可以。 八进制：数值前面以0开头。 十六进制：数值前面以0x开头，x大小写都可以。 注意: 书写的时候, 虽然加入了进制的标识, 但打印在控制台展示的都是十进制数据. */ public static void main(String[] args) &#123; System.out.println(10); System.out.println(\"二进制数据0b10的十进制表示为:\" + 0b10); System.out.println(\"八进制数据010的十进制表示为:\" + 010); System.out.println(\"十六进制数据0x10的十进制表示为:\" + 0x10); &#125;&#125; 2.2 任意进制到十进制的转换 2.3 进制转换-十进制到任意进制转换​ 2.3.1 : 十进制到二进制的转换 ​ 公式：除基取余使用源数据，不断的除以基数（几进制，基数就是几）得到余数，直到 0 ，再将余数倒着拼起来即可。 ​ 需求：将十进制数字11，转换为2进制。 ​ 实现方式：源数据为11，使用11不断的除以基数，也就是2，直到商为0。 ​ 2.3.2 : 十进制到十六进制的转换 ​ 公式：除基取余使用源数据，不断的除以基数（几进制，基数就是几）得到余数，直到商为0，再将余数倒着拼起来即可。 ​ 需求：将十进制数字60，转换为16进制。 ​ 实现方式：源数据为60，使用60不断的除以基数，也就是16，直到商为0。 ​ 结论：十进制到任意进制的转换 ​ 公式：除基取余使用源数据，不断的除以基数（几进制，基数就是几）得到余数，直到商为0，再将余数倒着 拼起来即可 2.4 快速进制转换法​ 8421码： ​ 8421码又称BCD码，是BCD代码中最常用的一种BCD： (Binary-Coded Decimal‎) 二进制码十进制数在这种编码方式中，每一位二进制值的1都是代表一个固定数值，把每一位的1代表的十进制数加起来得到的结果就是它所代表的十进制数。 ​ 2.5 原码反码补码前言 : 计算机中的数据，都是以二进制补码的形式在运算，而补码则是通过反码和原码推算出来的 *原码 *:（可直观看出数据大小） 原码是看数据大小的,反码就是一个原码和补码的一个桥梁,补码是运算的时候存在的. 正数的原,反,补都一样. 负数的反码是符号位不变,其他位取反.从左到右第一个数符号位,0表示正数,1表示负数. 补码就是反码+1; 就是二进制定点表示法，即最高位为符号位，【0】表示正，【1】表示负，其余位表示数值的大小。 通过一个字节表示+7和-7，代码：byte b1 = 7; byte b2 = -7;一个字节等于8个比特位，也就是8个二进制位 0(符号位) 0000111 1(符号位) 0000111 反码 : 正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外。 补码 : （数据以该状态进行运算）正数的补码与其原码相同；负数的补码是在其反码的末位加1。 2.6 位运算-基本位运算符123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package com.itheima.demo;public class Demo2 &#123; /* 位运算: 位运算符指的是二进制位的运算，先将十进制数转成二进制后再进行运算。 在二进制位运算中，1表示true，0表示false。 &amp; 位与 : 遇false则false, 遇0则0 00000000 00000000 00000000 00000110 // 6的二进制 &amp; 00000000 00000000 00000000 00000010 // 2的二进制 ----------------------------------------- 00000000 00000000 00000000 00000010 // 结果: 2 | 位或 : 遇true则true, 遇1则1 ^ 位异或 : 相同为false, 不同为true ~ 取反 : 全部取反, 0变1, 1变0 (也包括符号位) 00000000 00000000 00000000 00000110 // 6的二进制补码 ~ 11111111 11111111 11111111 11111001 - 1 // -1求反码 ------------------------------------ 11111111 11111111 11111111 11111000 // 反码推原码 10000000 00000000 00000000 00000111 // -7 */ public static void main(String[] args) &#123; System.out.println(6 &amp; 2); System.out.println(~6); &#125;&#125;一个数和另一个数异或两次 得到的是这个数本身因为一个数异或两次之后 每个二进制位都相同 所以都是false 是0一个数和0异或得到的是这个数本身 0和1异的到的1 0和0异或 0 正数的原反补都一样,原码是看数据大小的,反码就是转换,补码是计算机运算的时候用原码 反码补码 +1原码---&gt;反码(符号位不变,其余为全部取反)---&gt;补码 -1补码---&gt;反码---&gt;原码(符号位不变,其余位全部取反) 2.7 位运算-位移运算符位运算概述 : 位运算符指的是二进制位的运算，先将十进制数转成二进制后再进行运算。在二进制位运算中，1表示true，0表示false。 位运算符介绍 : 代码 : 1234567891011121314151617181920212223242526272829303132package com.itheima.demo;public class Demo3 &#123; /* 位移运算符: &lt;&lt; 有符号左移运算，二进制位向左移动, 左边符号位丢弃, 右边补齐0 运算规律: 向左移动几位, 就是乘以2的几次幂 12 &lt;&lt; 2 (0)0000000 00000000 00000000 000011000 // 12的二进制 ----------------------------------------------------------------------------- &gt;&gt; 有符号右移运算，二进制位向右移动, 使用符号位进行补位 运算规律: 向右移动几位, 就是除以2的几次幂 000000000 00000000 00000000 0000001(1) // 3的二进制 ----------------------------------------------------------------------------- &gt;&gt;&gt; 无符号右移运算符, 无论符号位是0还是1，都补0 010000000 00000000 00000000 00000110 // -6的二进制 */ public static void main(String[] args) &#123; System.out.println(12 &lt;&lt; 1); // 24 System.out.println(12 &lt;&lt; 2); // 48 &#125;&#125; 123456789101112package com.itheima.demo;public class Demo4 &#123; /* ^ 运算符的特点 一个数, 被另外一个数, 异或两次, 该数本身不变 */ public static void main(String[] args) &#123; System.out.println(10 ^ 5 ^ 10); &#125;&#125; 3.基础练习3.1 数据交换案例需求 ​ 已知两个整数变量a = 10，b = 20，使用程序实现这两个变量的数据交换 1最终输出a &#x3D; 20，b &#x3D; 10; 代码实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package com.itheima.test;public class Test1 &#123; /* 需求：已知两个整数变量a = 10，b = 20，使用程序实现这两个变量的数据交换 最终输出a = 20，b = 10; 思路： 1. 定义一个三方变量temp，将a原本记录的值，交给temp记录 （a的值，不会丢了） 2. 使用 a 变量记录 b 的值，（第一步交换完毕，b的值也丢不了了） 3. 使用 b 变量记录 temp的值，也就是a原本的值 （交换完毕） 4. 输出 a 和 b 变量即可 */ /* 动态初始化格式： 数据类型[][] 变量名 = new 数据类型[m][n]; m表示这个二维数组，可以存放多少个一维数组 n表示每一个一维数组，可以存放多少个元素 */ public static void main(String[] args) &#123; int a = 10; int b = 20; // 将a原本记录的值，交给temp记录 （a的值，不会丢了） int temp = a; // 用 a 变量记录 b 的值，（第一步交换完毕，b的值也丢不了了） a = b; // 使用 b 变量记录 temp的值，也就是a原本的值 （交换完毕） b = temp; // 输出 a 和 b 变量即可 System.out.println(\"a=\" + a); System.out.println(\"b=\" + b); &#125;&#125;public class Demo1 &#123; public static void main(String[] args) &#123; /*int a = 10; int b = 20; int temp = b; b = a; a = temp;*/ int a = 10; int b = 20; a = a^b; //我们不用计算 b= a^b; //b = a^b^b b=a a = a^b; //a = a^b^a a=b System.out.println(a); System.out.println(b); &#125;&#125; 3.2 数组反转【应用】案例需求 : ​ 已知一个数组 arr = {19, 28, 37, 46, 50}; 用程序实现把数组中的元素值交换， ​ 交换后的数组 arr = {50, 46, 37, 28, 19}; 并在控制台输出交换后的数组元素 实现步骤 : 定义两个变量, start和end来表示开始和结束的指针. 确定交换条件, start &lt; end 允许交换 循环中编写交换逻辑代码 每一次交换完成, 改变两个指针所指向的索引 start++, end– 循环结束后, 遍历数组并打印, 查看反转后的数组 代码实现 : 12345678910111213141516171819202122232425262728293031323334package com.itheima.test;public class Test2 &#123; /* 需求：已知一个数组 arr = &#123;19, 28, 37, 46, 50&#125;; 用程序实现把数组中的元素值交换， 交换后的数组 arr = &#123;50, 46, 37, 28, 19&#125;; 并在控制台输出交换后的数组元素。 步骤: 1. 定义两个变量, start和end来表示开始和结束的指针. 2. 确定交换条件, start &lt; end 允许交换 3. 循环中编写交换逻辑代码 4. 每一次交换完成, 改变两个指针所指向的索引 start++, end-- 5. 循环结束后, 遍历数组并打印, 查看反转后的数组 */ public static void main(String[] args) &#123; int[] arr = &#123;19, 28, 37, 46, 50&#125;; // 1. 定义两个变量, start和end来表示开始和结束的指针. int start = 0; int end = arr.length -1; // 2. 确定交换条件, start &lt; end 允许交换 // 4. 每一次交换完成, 改变两个指针所指向的索引 start++, end-- // for(int start = 0, end = arr.length -1; start &lt; end; start++, end--) for( ; start &lt; end; start++, end--)&#123; // 3. 循环中编写交换逻辑代码 int temp = arr[start]; arr[start] = arr[end]; arr[end] = temp; &#125; for (int i = 0; i &lt; arr.length; i++) &#123; System.out.println(arr[i]); &#125; &#125;&#125; 3.3 二维数组概述​ 概述 : 二维数组也是一种容器，不同于一维数组，该容器存储的都是一维数组容器 3.4 二维数组动态初始化12345动态初始化格式：数据类型[][] 变量名 = new 数据类型[m][n];m表示这个二维数组，可以存放多少个一维数组,一维数组的个数n表示每一个一维数组，可以存放多少个元素,一个数组存储元素的个数 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package com.itheima.demo;public class Demo1Array &#123; /* 动态初始化格式： 数据类型[][] 变量名 = new 数据类型[m][n]; m表示这个二维数组，可以存放多少个一维数组 n表示每一个一维数组，可以存放多少个元素 */ public static void main(String[] args) &#123; // 数据类型[][] 变量名 = new 数据类型[m][n]; int[][] arr = new int[3][3]; /* [[I@10f87f48 @ : 分隔符 10f87f48 : 十六进制内存地址 I : 数组中存储的数据类型 [[ : 几个中括号就代表的是几维数组 */ System.out.println(arr); /* 二维数组存储一维数组的时候, 存储的是一维数组的内存地址 */ System.out.println(arr[0]); System.out.println(arr[1]); System.out.println(arr[2]); System.out.println(arr[0][0]); System.out.println(arr[1][1]); System.out.println(arr[2][2]); // 向二维数组中存储元素 arr[0][0] = 11; arr[0][1] = 22; arr[0][2] = 33; arr[1][0] = 11; arr[1][1] = 22; arr[1][2] = 33; arr[2][0] = 11; arr[2][1] = 22; arr[2][2] = 33; // 从二维数组中取出元素并打印 System.out.println(arr[0][0]); System.out.println(arr[0][1]); System.out.println(arr[0][2]); System.out.println(arr[1][0]); System.out.println(arr[1][1]); System.out.println(arr[1][2]); System.out.println(arr[2][0]); System.out.println(arr[2][1]); System.out.println(arr[2][2]); &#125;&#125; 3.5 二维数组访问元素的细节问题问题 : 二维数组中存储的是一维数组, 那能不能存入 [提前创建好的一维数组] 呢 ? 答 : 可以的 代码实现123456789101112131415161718192021222324package com.itheima.demo;public class Demo2Array &#123; /* 问题: 二维数组中存储的是一维数组, 那能不能存入 [提前创建好的一维数组] 呢 ? 答 : 可以的 */ public static void main(String[] args) &#123; int[] arr1 = &#123;11,22,33&#125;; int[] arr2 = &#123;44,55,66&#125;; int[] arr3 = &#123;77,88,99,100&#125;; int[][] arr = new int[3][3]; arr[2][3] = 100; arr[0] = arr1; arr[1] = arr2; arr[2] = arr3; System.out.println(arr[1][2]); System.out.println(arr[2][3]); &#125;&#125; 3.6 二维数组静态初始化**完整格式 :** 数据类型[][] 变量名 = new 数据类型[][]{ {元素1, 元素2...} , {元素1, 元素2...} **简化格式 :** 数据类型[][] 变量名 = { {元素1, 元素2...} , {元素1, 元素2...} ...};*代码实现 : * 12345678910111213141516171819package com.itheima.demo;public class Demo3Array &#123; /* 完整格式：数据类型[][] 变量名 = new 数据类型[][]&#123; &#123;元素1, 元素2...&#125; , &#123;元素1, 元素2...&#125; ...&#125;; 简化格式: 数据类型[][] 变量名 = &#123; &#123;元素1, 元素2...&#125; , &#123;元素1, 元素2...&#125; ...&#125;; */ public static void main(String[] args) &#123; int[] arr1 = &#123;11,22,33&#125;; int[] arr2 = &#123;44,55,66&#125;; int[][] arr = &#123; &#123;11,22,33&#125;, &#123;44,55,66&#125; &#125;; System.out.println(arr[0][2]); int[][] array = &#123;arr1,arr2&#125;; System.out.println(array[0][2]); &#125;&#125; 3.7 二维数组遍历需求 : ​ 已知一个二维数组 arr = { {11, 22, 33}, {33, 44, 55} }; ​ 遍历该数组，取出所有元素并打印 步骤 : 遍历二维数组，取出里面每一个一维数组 在遍历的过程中，对每一个一维数组继续完成遍历，获取内部存储的每一个元素 代码实现 : 123456789101112131415161718192021222324252627package com.itheima.test;public class Test1 &#123; /* 需求: 已知一个二维数组 arr = &#123; &#123;11, 22, 33&#125;, &#123;33, 44, 55&#125; &#125;; 遍历该数组，取出所有元素并打印 步骤: 1. 遍历二维数组，取出里面每一个一维数组 2. 在遍历的过程中，对每一个一维数组继续完成遍历，获取内部存储的每一个元素 */ public static void main(String[] args) &#123; int[][] arr = &#123; &#123;11, 22, 33&#125;, &#123;33, 44, 55&#125; &#125;; // 1. 遍历二维数组，取出里面每一个一维数组 for (int i = 0; i &lt; arr.length; i++) &#123; //System.out.println(arr[i]); // 2. 在遍历的过程中，对每一个一维数组继续完成遍历，获取内部存储的每一个元素 //int[] temp = arr[i]; for (int j = 0; j &lt; arr[i].length; j++) &#123; System.out.println(arr[i][j]); &#125; &#125; &#125;&#125; 3.8 二维数组求和需求 : 某公司季度和月份统计的数据如下：单位(万元)1234第一季度：22,66,44第二季度：77,33,88第三季度：25,45,65第四季度：11,66,99 步骤 : 定义求和变量，准备记录最终累加结果 使用二维数组来存储数据，每个季度是一个一维数组，再将4个一维数组装起来 遍历二维数组，获取所有元素，累加求和 输出最终结果 代码实现 : 1234567891011121314151617181920212223242526272829303132package com.itheima.test;public class Test2 &#123; /* 需求: 某公司季度和月份统计的数据如下：单位(万元) 第一季度：22,66,44 第二季度：77,33,88 第三季度：25,45,65 第四季度：11,66,99 步骤: 1. 定义求和变量，准备记录最终累加结果 2. 使用二维数组来存储数据，每个季度是一个一维数组，再将4个一维数组装起来 3. 遍历二维数组，获取所有元素，累加求和 4. 输出最终结果 */ public static void main(String[] args) &#123; // 1. 定义求和变量，准备记录最终累加结果 int sum = 0; // 2. 使用二维数组来存储数据，每个季度是一个一维数组，再将4个一维数组装起来 int[][] arr = &#123; &#123;22,66,44&#125; , &#123;77,33,88&#125; , &#123;25,45,65&#125; , &#123;11,66,99&#125; &#125;; // 3. 遍历二维数组，获取所有元素，累加求和 for (int i = 0; i &lt; arr.length; i++) &#123; for(int j = 0; j &lt; arr[i].length; j++)&#123; sum += arr[i][j]; &#125; &#125; // 4. 输出最终结果 System.out.println(sum); &#125;&#125;","categories":[],"tags":[]},{"title":"5_方法概述","slug":"5_方法概述","date":"2020-11-03T15:14:41.628Z","updated":"2020-11-03T16:23:02.838Z","comments":true,"path":"2020/11/03/5_方法概述/","link":"","permalink":"http://yoursite.com/2020/11/03/5_%E6%96%B9%E6%B3%95%E6%A6%82%E8%BF%B0/","excerpt":"1. 方法概述1.1 方法的概念​ 方法（method）是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集 封装 注意： 方法必须先创建才可以使用，该过程成为方法定义 方法创建后并不是直接可以运行的，需要手动使用后，才执行，该过程成为方法调用","text":"1. 方法概述1.1 方法的概念​ 方法（method）是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集 封装 注意： 方法必须先创建才可以使用，该过程成为方法定义 方法创建后并不是直接可以运行的，需要手动使用后，才执行，该过程成为方法调用 2. 方法的定义和调用2.1 无参数方法定义和调用 定义格式： 123public static void 方法名 ( ) &#123; // 方法体;&#125; 范例： 123public static void method ( ) &#123; // 方法体;&#125; 调用格式： 1方法名(); 范例： 1method(); 注意： ​ 方法必须先定义，后调用，否则程序将报错 2.2 方法的调用过程 总结：每个方法在被调用执行的时候，都会进入栈内存，并且拥有自己独立的内存空间，方法内部代码调用完毕之后，会从栈内存中弹栈消失。 2.3 方法练习-奇偶数判断 需求：判断一个数是奇数还是偶数 代码： 123456789101112131415161718192021222324252627public class Demo1Method &#123; /* 带参数方法的定义格式: public static void 方法名 ( 参数 ) &#123; … … &#125; public static void 方法名 ( 数据类型 变量名 ) &#123; … … &#125; 带参数方法的调用格式: 方法名 ( 参数 ) ; 方法名 ( 变量名/常量值 ) ; tips: 参数可以是一个, 也可以是多个. 需求: 判断一个数是奇数还是偶数 */ public static void main(String[] args) &#123; isEvenNumber(10); &#125; public static void isEvenNumber(int num)&#123; if(num % 2 == 0)&#123; System.out.println(\"偶数\"); &#125;else&#123; System.out.println(\"奇数\"); &#125; &#125;&#125; 3. 带参数方法的定义和调用3.1 带参数方法定义和调用 定义格式： 参数：由数据类型和变量名组成 - 数据类型 变量名 参数范例：int a 1234567public static void 方法名 (参数1) &#123; 方法体;&#125;public static void 方法名 (参数1, 参数2, 参数3...) &#123; 方法体;&#125; 范例： 123456public static void isEvenNumber(int number)&#123; ...&#125;public static void getMax(int num1, int num2)&#123; ...&#125; 注意： 1方法定义时，参数中的数据类型与变量名都不能缺少，缺少任意一个程序将报错 1方法定义时，多个参数之间使用逗号( ，)分隔 调用格式： 123方法名(参数)；方法名(参数1,参数2); 范例： 123isEvenNumber(10);getMax(10,20); 方法调用时，参数的数量与类型必须与方法定义中的设置相匹配，否则程序将报错 3.2 形参和实参 形参：方法定义中的参数 ​ 等同于变量定义格式，例如：int number 实参：方法调用中的参数 ​ 等同于使用变量或常量，例如： 10 number 3.3 带参数方法的练习-打印n-m之间所有的奇数 需求：设计一个方法（print） 用于打印 n 到 m 之间所有的奇数 思路： ​ 1：定义方法，名称为print 12342：为方法添加两个int类型的形参，准备接受调用者传递过来的实参3：方法中设计for循环，循环从n开始，到m结束4：循环中加入if判断，是奇数，则打印5：main方法中调用print方法，传入两个实际参数 代码： 12345678910111213141516171819202122package com.itheima.method2;public class Demo2Method &#123; public static void main(String[] args) &#123; // 5：main方法中调用print方法，传入两个实际参数 print(20,10); &#125; //1：定义方法，名称为print // 2：为方法添加两个int类型的形参，准备接受调用者传递过来的实参 public static void print(int n, int m)&#123; System.out.println(n + \"到\" + m + \"之间的奇数为:\"); // 3：方法中设计for循环，循环从n开始，到m结束 for(int i = 20; i &lt;= 10; i++)&#123; // 4：循环中加入if判断，是奇数，则打印 if(i % 2 == 1)&#123; System.out.println(i); &#125; &#125; &#125;&#125; 4. 带返回值方法的定义和调用4.1 带返回值方法定义和调用（掌握） 定义格式 123public static 数据类型 方法名 ( 参数 ) &#123; return 数据 ;&#125; 范例 123456public static boolean isEvenNumber( int number ) &#123; return true ;&#125;public static int getMax( int a, int b ) &#123; return 100 ;&#125; 注意： 方法定义时return后面的返回值与方法定义上的数据类型要匹配，否则程序将报错 调用格式 12方法名 ( 参数 ) ;数据类型 变量名 = 方法名 ( 参数 ) ; 范例 12isEvenNumber ( 5 ) ;boolean flag = isEvenNumber ( 5 ); 注意： 方法的返回值通常会使用变量接收，否则该返回值将无意义 4.2 带返回值方法的练习-求两个数的最大值(应用) 需求：设计一个方法可以获取两个数的较大值，数据来自于参数 思路： 定义一个方法，声明两个形参接收计算的数值，求出结果并返回 使用 if 语句 得出 a 和 b 之间的最大值，根据情况return具体结果 在main()方法中调用定义好的方法并使用 【 变量保存 】 代码： 123456789101112131415161718192021222324252627282930 /* 需求：设计一个方法可以获取两个数的较大值，数据来自于参数 1. 定义一个方法，声明两个形参接收计算的数值，求出结果并返回 2. 使用 if 语句 得出 a 和 b 之间的最大值，根据情况return具体结果 3. 在main()方法中调用定义好的方法并使用 【 变量保存 】 */ public static void main(String[] args) &#123; // 3. 在main()方法中调用定义好的方法并使用 【 变量保存 】 System.out.println(getMax(10,20)); // 输出调用 int result = getMax(10,20); System.out.println(result); for(int i = 1; i &lt;= result; i++)&#123; System.out.println(\"HelloWorld\"); &#125; &#125; // 方法可以获取两个数的较大值 public static int getMax(int a, int b)&#123; if(a &gt; b)&#123; return a; &#125;else&#123; return b; &#125; &#125;&#125; 5. 方法的注意事项5.1 方法的通用格式（掌握） 格式： 1234public static 返回值类型 方法名(参数) &#123; 方法体; return 数据 ;&#125; 解释： public static 修饰符，目前先记住这个格式 返回值类型 方法操作完毕之后返回的数据的数据类型 ​ 如果方法操作完毕，没有数据返回，这里写void，而且方法体中一般不写return 方法名 调用方法时候使用的标识 参数 由数据类型和变量名组成，多个参数之间用逗号隔开 方法体 完成功能的代码块 return 如果方法操作完毕，有数据返回，用于把数据返回给调用者 定义方法时，要做到两个明确 明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应的数据类型 明确参数：主要是明确参数的类型和数量 调用方法时的注意： void类型的方法，直接调用即可 非void类型的方法，推荐用变量接收调用 5.2 方法的注意事项 方法不能嵌套定义 示例代码： 1234567891011public class MethodDemo &#123; public static void main(String[] args) &#123; &#125; public static void methodOne() &#123; public static void methodTwo() &#123; // 这里会引发编译错误!!! &#125; &#125;&#125; void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据 示例代码： 12345678910public class MethodDemo &#123; public static void main(String[] args) &#123; &#125; public static void methodTwo() &#123; //return 100; 编译错误，因为没有具体返回值类型 return; //System.out.println(100); return语句后面不能跟数据或代码 &#125;&#125; 6. 方法重载6.1 方法重载 方法重载概念 方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载 多个方法在同一个类中 多个方法具有相同的方法名 多个方法的参数顺序不相同，类型不同或者数量不同 注意： 重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式 重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载 正确范例： 1234567891011121314151617public class MethodDemo &#123; public static void fn(int a) &#123; //方法体 &#125; public static int fn(double a) &#123; //方法体 &#125;&#125;public class MethodDemo &#123; public static float fn(int a) &#123; //方法体 &#125; public static int fn(int a , int b) &#123; //方法体 &#125;&#125; 错误范例： 12345678910111213141516171819public class MethodDemo &#123; public static void fn(int a) &#123; //方法体 &#125; public static int fn(int a) &#123; /*错误原因：重载与返回值无关*/ //方法体 &#125;&#125;public class MethodDemo01 &#123; public static void fn(int a) &#123; //方法体 &#125;&#125; public class MethodDemo02 &#123; public static int fn(double a) &#123; /*错误原因：这是两个类的两个fn方法*/ //方法体 &#125;&#125; 6.2 方法重载练习 需求：使用方法重载的思想，设计比较两个整数是否相同的方法，兼容全整数类型（byte,short,int,long） 思路： ​ ①定义比较两个数字的是否相同的方法compare()方法，参数选择两个int型参数 ​ ②定义对应的重载方法，变更对应的参数类型，参数变更为两个long型参数 ​ ③定义所有的重载方法，两个byte类型与两个short类型参数 ​ ④完成方法的调用，测试运行结果 代码： 12345678910111213141516171819202122232425262728293031323334public class MethodTest &#123; public static void main(String[] args) &#123; //调用方法 System.out.println(compare(10, 20)); System.out.println(compare((byte) 10, (byte) 20)); System.out.println(compare((short) 10, (short) 20)); System.out.println(compare(10L, 20L)); &#125; //int public static boolean compare(int a, int b) &#123; System.out.println(\"int\"); return a == b; &#125; //byte public static boolean compare(byte a, byte b) &#123; System.out.println(\"byte\"); return a == b; &#125; //short public static boolean compare(short a, short b) &#123; System.out.println(\"short\"); return a == b; &#125; //long public static boolean compare(long a, long b) &#123; System.out.println(\"long\"); return a == b; &#125;&#125; 7. 方法的参数传递7.1 方法参数传递基本类型（理解） 测试代码： 12345678910111213141516171819package com.itheima.param;public class Test1 &#123; /* 方法参数传递为基本数据类型 : 传入方法中的, 是具体的数值. */ public static void main(String[] args) &#123; int number = 100; System.out.println(\"调用change方法前:\" + number); change(number); System.out.println(\"调用change方法后:\" + number); &#125; public static void change(int number) &#123; number = 200; &#125;&#125; 结论： 基本数据类型的参数，形式参数的改变，不影响实际参数 结论依据： 每个方法在栈内存中，都会有独立的栈空间，方法运行结束后就会弹栈消失 7.2 方法参数传递引用类型 测试代码： 12345678910111213141516171819package com.itheima.param;public class Test2 &#123; /* 方法参数传递为引用数据类型 : 传入方法中的, 是内存地址. */ public static void main(String[] args) &#123; int[] arr = &#123;10, 20, 30&#125;; System.out.println(\"调用change方法前:\" + arr[1]); change(arr); System.out.println(\"调用change方法后:\" + arr[1]); &#125; public static void change(int[] arr) &#123; arr[1] = 200; &#125;&#125; 结论： 对于引用类型的参数，形式参数的改变，影响实际参数的值 (字符串除外) 结论依据： 引用数据类型的传参，传入的是地址值，内存中会造成两个引用指向同一个内存的效果，所以即使方法弹栈，堆内存中的数据也已经是改变后的结果 7.3 数组遍历 需求：设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55] 思路： 因为要求结果在一行上输出，所以这里需要在学习一个新的输出语句System.out.print(“内容”); System.out.println(“内容”); 输出内容并换行 System.out.print(“内容”); 输出内容不换行 System.out.println(); 起到换行的作用 定义一个数组，用静态初始化完成数组元素初始化 定义一个方法，用数组遍历通用格式对数组进行遍历 用新的输出语句修改遍历操作 调用遍历方法 代码： 123456789101112131415161718192021222324252627282930313233343536373839package com.itheima.test;public class Test1 &#123; /* 需求：设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55] 思路： 1.定义一个数组，用静态初始化完成数组元素初始化 2.定义一个方法，对数组进行遍历 3.遍历打印的时候，数据不换行 4.调用遍历方法 */ public static void main(String[] args) &#123; // 1.定义一个数组，用静态初始化完成数组元素初始化 int[] arr = &#123;11, 22, 33, 44, 55&#125;; // 4.调用遍历方法 printArray(arr); System.out.println(\"另外一段代码逻辑 \"); &#125; /* 2.定义一个方法，对数组进行遍历 1, 参数 int[] arr 2, 返回值类型 void */ public static void printArray(int[] arr)&#123; System.out.print(\"[\"); for (int i = 0; i &lt; arr.length; i++) &#123; if(i == arr.length -1)&#123; // 如果满足条件, 说明是最后一个元素, 最后一个元素, 特殊处理 System.out.println(arr[i] + \"]\"); &#125;else&#123; // 3.遍历打印的时候，数据不换行 System.out.print(arr[i] + \", \"); &#125; 12 &#125;&#125; } 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051### 7.4 数组最大值* 需求：设计一个方法用于获取数组中元素的最大值 * 思路： * ①定义一个数组，用静态初始化完成数组元素初始化 * ②定义一个方法，用来获取数组中的最大值，最值的认知和讲解我们在数组中已经讲解过了 * ③调用获取最大值方法，用变量接收返回结果 * ④把结果输出在控制台* 代码： &#96;&#96;&#96;java package com.itheima.test; public class Test2 &#123; &#x2F;* 需求：设计一个方法用于获取数组中元素的最大值 思路： 1.定义一个数组，用静态初始化完成数组元素初始化 2.定义一个方法，用来获取数组中的最大值 3.调用获取最大值方法，用变量接收返回结果 4.把结果输出在控制台 *&#x2F; public static void main(String[] args) &#123; &#x2F;&#x2F; 1.定义一个数组，用静态初始化完成数组元素初始化 int[] arr &#x3D; &#123;11, 55, 22, 44, 33&#125;; &#x2F;&#x2F; 3.调用获取最大值方法，用变量接收返回结果 int max &#x3D; getMax(arr); &#x2F;&#x2F; 4.把结果输出在控制台 System.out.println(max); &#125; &#x2F;* 2.定义一个方法，用来获取数组中的最大值 1, 参数 int[] arr 2, 返回值类型 int *&#x2F; public static int getMax(int[] arr)&#123; int max &#x3D; arr[0]; for (int i &#x3D; 1; i &lt; arr.length; i++) &#123; if(max &lt; arr[i])&#123; max &#x3D; arr[i]; &#125; &#125; return max; &#125; &#125; 7.5 方法同时获取数组最大值和最小值 需求：设计一个方法，该方法能够同时获取数组的最大值，和最小值 注意: return语句, 只能带回一个结果. 代码： 12345678910111213141516171819202122232425262728293031323334353637public class Test3 &#123; /* 需求：设计一个方法，该方法能够同时获取数组的最大值，和最小值 注意: return语句, 只能带回一个结果. */ public static void main(String[] args) &#123; int[] arr = &#123;11,55,33,22,44&#125;; int[] maxAndMin = getMaxAndMin(arr); System.out.println(maxAndMin[0]); System.out.println(maxAndMin[1]); &#125; public static int[] getMaxAndMin(int[] arr)&#123; int max = arr[0]; for (int i = 1; i &lt; arr.length; i++) &#123; if(max &lt; arr[i])&#123; max = arr[i]; &#125; &#125; int min = arr[0]; for (int i = 1; i &lt; arr.length; i++) &#123; if(min &gt; arr[i])&#123; min = arr[i]; &#125; &#125; int[] maxAndMin = &#123;min, max&#125;; return maxAndMin; &#125;&#125;","categories":[],"tags":[]},{"title":"4_IDEA和数组","slug":"4_IDEA和数组","date":"2020-11-02T15:43:12.066Z","updated":"2020-11-03T16:25:02.386Z","comments":true,"path":"2020/11/02/4_IDEA和数组/","link":"","permalink":"http://yoursite.com/2020/11/02/4_IDEA%E5%92%8C%E6%95%B0%E7%BB%84/","excerpt":"第一部分 : IDEA开发工具参见 ：IEDA的安装请参考文件夹PPT中的 04_IDEA.ppt 1.数组1.1 数组介绍​ 数组就是存储数据长度固定的容器，存储多个数据的数据类型要一致。","text":"第一部分 : IDEA开发工具参见 ：IEDA的安装请参考文件夹PPT中的 04_IDEA.ppt 1.数组1.1 数组介绍​ 数组就是存储数据长度固定的容器，存储多个数据的数据类型要一致。 1.2 数组的定义格式1.2.1 第一种格式​ 数据类型[] 数组名 ​ 示例： 123int[] arr; double[] arr; char[] arr; 1.2.2 第二种格式​ 数据类型 数组名[] ​ 示例： 123int arr[];double arr[];char arr[]; 1.3 数组的动态初始化1.3.1 什么是动态初始化​ 数组动态初始化就是只给定数组的长度，由系统给出默认初始化值 1.3.2 动态初始化格式1数据类型[] 数组名 = new 数据类型[数组长度]; 1int[] arr = new int[3]; 1.3.3 动态初始化格式详解 等号左边： int:数组的数据类型 []:代表这是一个数组 arr:代表数组的名称 等号右边： new:为数组开辟内存空间 int:数组的数据类型 []:代表这是一个数组 3:代表数组的长度 代码 : 1234567891011121314151617181920212223242526272829303132333435package com.itheima.array;public class Demo2Array &#123; /* 数组的动态初始化: 在初始化的时候, 需要手动指定数组的长度, 系统会为数组容器分配初始值. 动态初始化格式: 数据类型[] 数组名 = new 数据类型[数组的长度]; 注意: 打印数组变量的时候, 会打印出数组的内存地址 [I@10f87f48 : @ : 分隔符 [ : 当前的空间是一个数组类型 I : 当前数组容器中所存储的数据类型 10f87f48 : 十六进制内存地址 0 1 2 3 4 5 6 7 8 9 a b c d e f */ public static void main(String[] args) &#123; // 数据类型[] 数组名 = new 数据类型[数组的长度]; // 通过new关键字创建了一个int类型的数组容器, 该容器可以存储5个int类型的整数, 该容器被arr数组变量所记录 int[] arr = new int[5]; // [I@10f87f48 System.out.println(arr); byte[] bArr = new byte[3]; // [B@b4c966a System.out.println(bArr); &#125;&#125; 1.4 数组元素访问1.4.1 什么是索引​ 每一个存储到数组的元素，都会自动的拥有一个编号，从0开始,是连续的,不间断的,每次加1。 ​ 这个自动编号称为数组索引(index)，可以通过数组的索引访问到数组中的元素。 1.4.2访问数组元素格式1数组名[索引]; 1.4.3示例代码1234567891011121314151617181920212223242526272829303132333435363738package com.itheima.array;public class Demo3ArrayIndex &#123; /* 数组动态初始化: 初始化的时候, 手动指定数组长度, 系统会为数组容器分配初始值. 数组的元素访问格式: 数组名[索引] 索引: 数组中数据的编号方式, 编号从0开始 作用: 访问数组容器中的空间位置 注意: 数组在创建完毕后, 即使没有赋值, 也可以取出, 但取出的元素都是默认初始化值. */ public static void main(String[] args) &#123; int[] arr = new int[3]; // 0 1 2 System.out.println(arr); // 数组的内存地址 [I@10f87f48 // 数组名[索引] 访问数组容器中的空间位置 System.out.println(arr[0]); // 0 系统自动分配的默认初始化值 System.out.println(arr[1]); System.out.println(arr[2]); System.out.println(\"--------------\"); // 数组名[索引] arr[0] = 11; arr[1] = 22; arr[2] = 33; System.out.println(arr[0]); System.out.println(arr[1]); System.out.println(arr[2]); &#125;&#125; 1.5 内存分配1.5.1 内存概述​ 内存是计算机中的重要原件，临时存储区域，作用是运行程序。 ​ 我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的。 ​ 必须放进内存中才能运行，运行完毕后会清空内存。 ​ Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。 1.5.2 java中的内存分配 目前我们只需要记住两个内存，分别是：栈内存和堆内存 区域名称 作用 寄存器 给CPU使用，和我们开发无关。 本地方法栈 JVM在使用操作系统功能的时候使用，和我们开发无关。 方法区 存储可以运行的class文件。 堆内存 存储对象或者数组，new来创建的，都存储在堆内存。 方法栈 方法运行时使用的内存，比如main方法运行，进入方法栈中执行。 1.6 Java内存分配-一个数组内存图 1.7 两个数组内存图 1.8 多个数组指向相同内存图 1.9 数组的静态初始化1.9.1 什么是静态初始化​ 在创建数组时，直接将元素确定 1.9.2 静态初始化格式 完整版格式 1数据类型[] 数组名 = new 数据类型[]&#123;元素1,元素2,...&#125;; 简化版格式 1数据类型[] 数组名 = &#123;元素1,元素2,...&#125;; 1.9.3示例代码123456789101112131415161718192021222324252627package com.itheima.array2;public class Demo1Array &#123; /* 数组静态初始化 : 初始化时指定每个数组元素的初始值，由系统决定数组长度 完整格式: 数据类型[] 数组名 = new 数据类型[]&#123;数据1,数据2,数据3...&#125;; 简化格式: 数据类型[] 数组名 = &#123;数据1,数据2,数据3...&#125;; */ public static void main(String[] args) &#123; // 数据类型[] 数组名 = new 数据类型[]&#123;数据1,数据2,数据3...&#125;; int[] arr = new int[]&#123;11,22,33&#125;; System.out.println(arr[0]); System.out.println(arr[1]); System.out.println(arr[2]); // 数据类型[] 数组名 = &#123;数据1,数据2,数据3...&#125;; int[] arr2 = &#123;44,55,66&#125;; System.out.println(arr2); System.out.println(arr2[0]); System.out.println(arr2[1]); System.out.println(arr2[2]); &#125;&#125; 1.10 数组操作的两个常见问题1.10.1 索引越界异常 出现原因 123456public class ArrayDemo &#123; public static void main(String[] args) &#123; int[] arr = new int[3]; System.out.println(arr[3]); &#125;&#125; 数组长度为3，索引范围是0~2，但是我们却访问了一个3的索引。 程序运行后，将会抛出ArrayIndexOutOfBoundsException 数组越界异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。 解决方案 将错误的索引修改为正确的索引范围即可！ 1.10.2 空指针异常 出现原因 123456789public class ArrayDemo &#123; public static void main(String[] args) &#123; int[] arr = new int[3]; //把null赋值给数组 arr = null; System.out.println(arr[0]); &#125;&#125; arr = null 这行代码，意味着变量arr将不会在保存数组的内存地址，也就不允许再操作数组了，因此运行的时候会抛出 NullPointerException 空指针异常。在开发中，数组的空指针是不能出现的，一旦出现了，就必须要修改我们编写的代码。 解决方案 给数组一个真正的堆内存空间引用即可！ 1.11 数组遍历 数组遍历：就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石。 12345678910public class ArrayTest01 &#123; public static void main(String[] args) &#123; int[] arr = &#123; 1, 2, 3, 4, 5 &#125;; System.out.println(arr[0]); System.out.println(arr[1]); System.out.println(arr[2]); System.out.println(arr[3]); System.out.println(arr[4]); &#125;&#125; 以上代码是可以将数组中每个元素全部遍历出来，但是如果数组元素非常多，这种写法肯定不行，因此我们需要改造成循环的写法。数组的索引是 0 到 lenght-1 ，可以作为循环的条件出现。 1234567891011public class ArrayTest01 &#123; public static void main(String[] args) &#123; //定义数组 int[] arr = &#123;11, 22, 33, 44, 55&#125;; //使用通用的遍历格式 for(int x=0; x&lt;arr.length; x++) &#123; System.out.println(arr[x]); &#125; &#125;&#125; 1.12 数组获取最大值 最大值获取：从数组的所有元素中找出最大值。 实现思路： 定义变量，保存数组0索引上的元素 遍历数组，获取出数组中的每个元素 将遍历到的元素和保存数组0索引上值的变量进行比较 如果数组元素的值大于了变量的值，变量记录住新的值 数组循环遍历结束，变量保存的就是数组中的最大值 代码实现： 12345678910111213141516171819202122232425262728293031package com.itheima.test;import java.util.Scanner;public class Test2Array &#123; /* 需求: 从数组中查找最大值 int[] arr = &#123;12,45,98,73,60&#125;; 实现步骤: 1. 假设数组中的第一个元素为最大值 2. 遍历数组, 获取每一个元素, 准备进行比较 3. 如果比较的过程中, 出现了比max更大的, 让max记录更大的值 4. 循环结束后, 打印最大值. */ public static void main(String[] args) &#123; int[] arr = &#123;12,45,98,73,60&#125;; // 1. 假设数组中的第一个元素为最大值 int max = arr[0]; // 2. 遍历数组, 获取每一个元素, 准备进行比较 for(int i = 1; i &lt; arr.length; i++)&#123; // 3. 如果比较的过程中, 出现了比max更大的, 让max记录更大的值 if(arr[i] &gt; max)&#123; max = arr[i]; &#125; &#125; // 4. 循环结束后, 打印最大值. System.out.println(\"max:\" + max); &#125;&#125; 1.13 数组元素求和 需求：键盘录入5个整数，存储到数组中，并对数组求和 思路： 1234561.创建键盘录入对象，准备键盘录入2.定义一个求和变量，准备记录累加后的结果3.动态初始化一个长度为5的int数组，准备存储键盘录入的数值4.将键盘录入的数值存储到数组中5.遍历数组，取出每一个元素，并求和6.输出总和 代码实现： 12345678910111213141516171819202122232425262728293031323334353637383940package com.itheima.test;import java.util.Scanner;public class Test3Array &#123; /* 需求：键盘录入5个整数，存储到数组中，并对数组求和 思路： 1.创建键盘录入对象，准备键盘录入 2.定义一个求和变量，准备记录累加后的结果 3.动态初始化一个长度为5的int数组，准备存储键盘录入的数值 4.将键盘录入的数值存储到数组中 5.遍历数组，取出每一个元素，并求和 6.输出总和 */ public static void main(String[] args) &#123; // 1.创建键盘录入对象，准备键盘录入 Scanner sc = new Scanner(System.in); // 2.定义一个求和变量，准备记录累加后的结果 int sum = 0; // 3.动态初始化一个长度为5的int数组，准备存储键盘录入的数值 int[] arr = new int[5]; // 4.将键盘录入的数值存储到数组中 for(int i = 0; i &lt; arr.length; i++)&#123; System.out.println(\"请输入第\" + (i+1) + \"个整数:\"); //arr[i] = 10; arr[i] = sc.nextInt(); &#125; // 5.遍历数组，取出每一个元素，并求和 for (int i = 0; i &lt; arr.length; i++) &#123; sum += arr[i]; &#125; // 6.输出总和 System.out.println(\"sum:\" + sum); &#125;&#125; 1.14 数组基本查找【应用】 需求： 12已知一个数组 arr &#x3D; &#123;19, 28, 37, 46, 50&#125;; 键盘录入一个数据，查找该数据在数组中的索引，并在控制台输出找到的索引值。 思路： 1234561.定义一个数组，用静态初始化完成数组元素的初始化2.键盘录入要查找的数据，用一个变量接收3.定义一个索引变量，初始值为-14.遍历数组，获取到数组中的每一个元素5.拿键盘录入的数据和数组中的每一个元素进行比较，如果值相同，就把该值对应的索引赋值给索引变量，并结束循环6.输出索引变量 代码实现： 1234567891011121314151617181920212223public static void main(String[] args) &#123; // 1.定义一个数组，用静态初始化完成数组元素的初始化 int[] arr = &#123;19, 28, 37, 46, 50&#125;; // 2.键盘录入要查找的数据，用一个变量接收 Scanner sc = new Scanner(System.in); System.out.println(\"请输入您要查找的元素:\"); int num = sc.nextInt(); // 3.定义一个索引变量，初始值为-1 // 假设要查找的数据, 在数组中就是不存在的 int index = -1; // 4.遍历数组，获取到数组中的每一个元素 for (int i = 0; i &lt; arr.length; i++) &#123; // 5.拿键盘录入的数据和数组中的每一个元素进行比较，如果值相同，就把该值对应的索引赋值给索引变量，并结束循环 if(num == arr[i])&#123; // 如果值相同，就把该值对应的索引赋值给索引变量，并结束循环 index = i; break; &#125; &#125; // 6.输出索引变量 System.out.println(index); &#125;&#125; 1.15 评委打分【应用】 需求：在编程竞赛中，有6个评委为参赛的选手打分，分数为0-100的整数分。 1选手的最后得分为：去掉一个最高分和一个最低分后 的4个评委平均值 (不考虑小数部分)。 思路： 123456781.定义一个数组，用动态初始化完成数组元素的初始化，长度为62.键盘录入评委分数3.由于是6个评委打分，所以，接收评委分数的操作，用循环4.求出数组最大值5.求出数组最小值6.求出数组总和7.按照计算规则进行计算得到平均分8.输出平均分 代码实现： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748 public static void main(String[] args) &#123; // 1.定义一个数组，用动态初始化完成数组元素的初始化，长度为6 int[] arr = new int[6]; // 2.键盘录入评委分数 Scanner sc = new Scanner(System.in); // 3.由于是6个评委打分，所以，接收评委分数的操作，用循环 for (int i = 0; i &lt; arr.length; i++) &#123; System.out.println(\"请输入第\" + (i+1) + \"个评委的打分:\"); int score = sc.nextInt(); if(score &gt;= 0 &amp;&amp; score &lt;= 100)&#123; // 合法的分值 arr[i] = score; &#125;else&#123; // 非法的分值 System.out.println(\"您的打分输入有误, 请检查是否是0-100之间的\"); i--; &#125; &#125; // 4.求出数组最大值 int max = arr[0]; for (int i = 1; i &lt; arr.length; i++) &#123; if(max &lt; arr[i])&#123; max = arr[i]; &#125; &#125; // 5.求出数组最小值 int min = arr[0]; for (int i = 1; i &lt; arr.length; i++) &#123; if(min &gt; arr[i])&#123; min = arr[i]; &#125; &#125; // 6.求出数组总和 int sum = 0; for (int i = 0; i &lt; arr.length; i++) &#123; sum += arr[i]; &#125; // 7.按照计算规则进行计算得到平均分 int avg = (sum - max - min ) / (arr.length-2); // 8.输出平均分 System.out.println(avg); &#125;&#125; 总结数组 第一种：动态初始化格式 建议:数据类型 [] 数组名 = new 数据类型 [数组的长度]; 数据类型 数组名 [] = new 数据类型 [数组的长度]; 第二种：静态初始化格式 数据类型 数组名 [] = new 数据类型 [] {元素1，元素2，元素3…..};—-&gt;简化 用的比较多的:数据类型 数组名 [] = {元素1，元素2，元素3…..}; 数组的好处： 1.可以一次开辟多个空间 2.可以对这多个空间进行统一管理 3.数组定义好之后，每个数组空间都有一个唯一编号（索引，下标，角标），我们在操作数组的时候，都是对统一的数组名和对应的索引来操作数组的每一个空间。赋值:数组名[索引]=值; 拿值:数组名[索引] 4.数组的索引是从0开始，到长度-1结束. 5.我们可以通过数组名.length这个属性来获取数组的长度。 6.获取数组对应索引空间上的数据：数组名[当前的索引]","categories":[],"tags":[]},{"title":"3_switch语句","slug":"3_switch语句","date":"2020-11-02T15:42:34.078Z","updated":"2020-11-05T07:56:53.720Z","comments":true,"path":"2020/11/02/3_switch语句/","link":"","permalink":"http://yoursite.com/2020/11/02/3_switch%E8%AF%AD%E5%8F%A5/","excerpt":"1. switch语句1.1 分支语句switch语句 格式 123456789101112switch (表达式) &#123; case 1: 语句体1; break; case 2: 语句体2; break; ... default: 语句体n+1; break;&#125; 执行流程：","text":"1. switch语句1.1 分支语句switch语句 格式 123456789101112switch (表达式) &#123; case 1: 语句体1; break; case 2: 语句体2; break; ... default: 语句体n+1; break;&#125; 执行流程： 首先计算出表达式的值 其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结 束。 最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。 1.2 switch案例-减肥计划 需求：键盘录入星期数，显示今天的减肥活动 1234567周一：跑步 周二：游泳 周三：慢走 周四：动感单车周五：拳击 周六：爬山 周日：好好吃一顿 示例代码： 1234567891011121314151617181920212223242526272829303132333435public static void main(String[] args)&#123; // 1. 键盘录入星期数据，使用变量接收 Scanner sc = new Scanner(System.in); System.out.println(\"请输入\"); int week = sc.nextInt(); // 2. 多情况判断，采用switch语句实现 switch(week)&#123; // 3. 在不同的case中，输出对应的减肥计划 case 1: System.out.println(\"跑步\"); break; case 2: System.out.println(\"游泳\"); break; case 3: System.out.println(\"慢走\"); break; case 4: System.out.println(\"动感单车\"); break; case 5: System.out.println(\"拳击\"); break; case 6: System.out.println(\"爬山\"); break; case 7: System.out.println(\"好好吃一顿\"); break; default: System.out.println(\"您的输入有误\"); break; &#125; &#125;&#125; 1.3 switch语句case穿透 概述 : 如果switch语句中,case省略了break语句, 就会开始case穿透 需求 : 键盘录入星期数，输出工作日、休息日 (1-5)工作日，(6-7)休息日 示例代码： 1234567891011121314151617181920212223242526272829303132/*case穿透是如何产生的? 如果switch语句中,case省略了break语句, 就会开始case穿透. 现象： 当开始case穿透，后续的case就不会具有匹配效果，内部的语句都会执行 直到看见break，或者将整体switch语句执行完毕，才会结束。*/public static void main(String[] args)&#123; Scanner sc = new Scanner(System.in); System.out.println(\"请输入星期数:\"); int week = sc.nextInt(); switch(week)&#123; case 1: case 2: case 3: case 4: case 5: System.out.println(\"工作日\"); break; case 6: case 7: System.out.println(\"休息日\"); break; default: System.out.println(\"您的输入有误\"); break; &#125; &#125; &#125; 2. for循环2.1 循环语句-for循环 循环： 循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复 执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形 成死循环。 for循环格式： 123for (初始化语句;条件判断语句;条件控制语句) &#123; 循环体语句;&#125; 格式解释： 初始化语句： 用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样 条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去 循环体语句： 用于表示循环反复执行的内容，简单说就是循环反复执行的事情 条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去 执行流程： ①执行初始化语句 ②执行条件判断语句，看其结果是true还是false ​ 如果是false，循环结束 ​ 如果是true，继续执行 ③执行循环体语句 ④执行条件控制语句 ⑤回到②继续 2.2 for循环案例-输出数据1-5和5-1 需求：在控制台输出1-5和5-1的数据 示例代码： 12345678910111213public class ForTest01 &#123; public static void main(String[] args) &#123; //需求：输出数据1-5 for(int i=1; i&lt;=5; i++) &#123; System.out.println(i); &#125; System.out.println(\"--------\"); //需求：输出数据5-1 for(int i=5; i&gt;=1; i--) &#123; System.out.println(i); &#125; &#125;&#125; 2.3 for循环案例-求1-5数据和 需求：求1-5之间的数据和，并把求和结果在控制台输出 示例代码： 12345678910111213141516171819202122public class ForTest02 &#123; public static void main(String[] args) &#123; //求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0 int sum = 0; //从1开始到5结束的数据，使用循环结构完成 for(int i=1; i&lt;=5; i++) &#123; //将反复进行的事情写入循环结构内部 // 此处反复进行的事情是将数据 i 加到用于保存最终求和的变量 sum 中 sum += i; /* sum += i; sum = sum + i; 第一次：sum = sum + i = 0 + 1 = 1; 第二次：sum = sum + i = 1 + 2 = 3; 第三次：sum = sum + i = 3 + 3 = 6; 第四次：sum = sum + i = 6 + 4 = 10; 第五次：sum = sum + i = 10 + 5 = 15; */ &#125; //当循环执行完毕时，将最终数据打印出来 System.out.println(\"1-5之间的数据和是：\" + sum); &#125;&#125; 本题要点： 今后遇到的需求中，如果带有求和二字，请立即联想到求和变量 求和变量的定义位置，必须在循环外部，如果在循环内部则计算出的数据将是错误的 2.4 for循环案例-求1-100偶数和 需求：求1-100之间的偶数和，并把求和结果在控制台输出 } 示例代码： 123456789101112131415public class ForTest03 &#123; public static void main(String[] args) &#123; //求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0 int sum = 0; //对1-100的数据求和与1-5的数据求和几乎完全一样，仅仅是结束条件不同 for(int i=1; i&lt;=100; i++) &#123; //对1-100的偶数求和，需要对求和操作添加限制条件，判断是否是偶数 if(i%2 == 0) &#123; sum += i; &#125; &#125; //当循环执行完毕时，将最终数据打印出来 System.out.println(\"1-100之间的偶数和是：\" + sum); &#125;&#125; 2.5 for循环案例-水仙花数 需求：在控制台输出所有的“水仙花数” 解释：什么是水仙花数？ 水仙花数，指的是一个三位数，个位、十位、百位的数字立方和等于原数 例如153 3*3*3 + 5*5*5 + 1*1*1 = 153 思路： 获取所有的三位数，准备进行筛选，最小的三位数为100，最大的三位数为999，使用for循环获取 获取每一个三位数的个位，十位，百位，做if语句判断是否是水仙花数 示例代码 1234567891011121314151617public class ForTest04 &#123; public static void main(String[] args) &#123; //输出所有的水仙花数必然要使用到循环，遍历所有的三位数，三位数从100开始，到999结束 for(int i=100; i&lt;1000; i++) &#123; //在计算之前获取三位数中每个位上的值 int ge = i%10; int shi = i/10%10; int bai = i/10/10%10; //判定条件是将三位数中的每个数值取出来，计算立方和后与原始数字比较是否相等 if(ge*ge*ge + shi*shi*shi + bai*bai*bai == i) &#123; //输出满足条件的数字就是水仙花数 System.out.println(i); &#125; &#125; &#125;&#125; 2.6 for循环案例-每行打印2个水仙花数(统计) 需求：在控制台输出所有的“水仙花数”，要求每行打印2个 示例代码： 12345678910111213141516171819202122232425262728293031323334public class Demo6For &#123; /* 需求：在控制台输出所有的“水仙花数”，要求每行打印2个 System.out.print (打印内容); 打印后不换行 System.out.println(打印内容); 打印后换行 分析: 1. 定义变量count，用于保存“打印过”的数量，初始值为0 2. 在判定和打印水仙花数的过程中，拼接空格, 但不换行，并在打印后让count变量+1，记录打印过的数量 3. 在每一次count变量+1后，判断是否到达了2的倍数，是的话，换行。 */ public static void main(String[] args)&#123; // 1. 定义变量count，用于保存“打印过”的数量，初始值为0 int count = 0; for(int i = 100; i &lt;= 999; i++)&#123; int ge = i % 10; int shi = i / 10 % 10; int bai = i / 10 / 10 % 10; if( (ge*ge*ge + shi*shi*shi + bai*bai*bai) == i)&#123; // 2. 在判定和打印水仙花数的过程中，拼接空格, 但不换行，并在打印后让count变量+1，记录打印过的数量 System.out.print(i + \" \"); count++; // 3. 在每一次count变量+1后，判断是否到达了2的倍数，是的话，换行 if(count % 2 == 0)&#123; System.out.println(); &#125; &#125; &#125; &#125;&#125; 本题要点： 今后如果需求带有统计xxx，请先想到计数器变量 计数器变量定义的位置，必须在循环外部 3. while循环3.1 循环语句-while循环 while循环完整格式： 12345初始化语句;while (条件判断语句) &#123; 循环体语句; 条件控制语句;&#125; while循环执行流程： ①执行初始化语句 ②执行条件判断语句，看其结果是true还是false ​ 如果是false，循环结束 ​ 如果是true，继续执行 ③执行循环体语句 ④执行条件控制语句 ⑤回到②继续 示例代码： 12345678910111213141516public class WhileDemo &#123; public static void main(String[] args) &#123; //需求：在控制台输出5次\"HelloWorld\" //for循环实现 for(int i=1; i&lt;=5; i++) &#123; System.out.println(\"HelloWorld\"); &#125; System.out.println(\"--------\"); //while循环实现 int j = 1; while(j&lt;=5) &#123; System.out.println(\"HelloWorld\"); j++; &#125; &#125;&#125; 3.2 while循环案例-珠穆朗玛峰 需求：世界最高山峰是珠穆朗玛峰(8844.43米=8844430毫米)，假如我有一张足够大的纸，它的厚度是0.1毫米。请问，我折叠多少次，可以折成珠穆朗玛峰的高度? 示例代码： 1234567891011121314151617181920public class WhileTest &#123; public static void main(String[] args) &#123; //定义一个计数器，初始值为0 int count = 0; //定义纸张厚度 double paper = 0.1; //定义珠穆朗玛峰的高度 int zf = 8844430; //因为要反复折叠，所以要使用循环，但是不知道折叠多少次，这种情况下更适合使用while循环 //折叠的过程中当纸张厚度大于珠峰就停止了，因此继续执行的要求是纸张厚度小于珠峰高度 while(paper &lt;= zf) &#123; //循环的执行过程中每次纸张折叠，纸张的厚度要加倍 paper *= 2; //在循环中执行累加，对应折叠了多少次 count++; &#125; //打印计数器的值 System.out.println(\"需要折叠：\" + count + \"次\"); &#125;&#125; 4. 循环细节4.1 循环语句-dowhile循环 完整格式： 12345初始化语句;do &#123; 循环体语句; 条件控制语句;&#125;while(条件判断语句); 执行流程： ① 执行初始化语句 ② 执行循环体语句 ③ 执行条件控制语句 ④ 执行条件判断语句，看其结果是true还是false 如果是false，循环结束 如果是true，继续执行 ⑤ 回到②继续 示例代码： 12345678910111213141516public class DoWhileDemo &#123; public static void main(String[] args) &#123; //需求：在控制台输出5次\"HelloWorld\" //for循环实现 for(int i=1; i&lt;=5; i++) &#123; System.out.println(\"HelloWorld\"); &#125; System.out.println(\"--------\"); //do...while循环实现 int j = 1; do &#123; System.out.println(\"HelloWorld\"); j++; &#125;while(j&lt;=5); &#125;&#125; 4.2 三种循环的区别 三种循环的区别 for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行） do…while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断） for循环和while的区别 条件控制语句所控制的自增变量，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访问到了 条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用 死循环（无限循环）的三种格式 for(;;){} while(true){} do {} while(true); 4.3 死循环 死循环格式 12345678910111213141516for死循环格式 :for(;;)&#123;&#125;while死循环格式 :while(true)&#123;&#125;do..while死循环格式 :do&#123;&#125;while(true); 死循环案例 12345678910111213141516171819202122232425262728/* 问题: 死循环有应用场景吗? 例如: 键盘录入一个1-100之间的整数 顾虑: 键盘录入是用户操作的, 用户就可能会出现一些误操作的现象 */public static void main(String[] args) &#123; /* for(;;)&#123; System.out.println(\"我停不下来了~\"); &#125; */ /* while(true)&#123; System.out.println(\"我停不下来了~\"); &#125; */ do&#123; System.out.println(\"我停不下来了~\"); &#125;while(true); System.out.println(\"看看我能被执行吗?~\"); // 无法访问的语句&#125;&#125; 4.4 跳转控制语句 跳转控制语句（break） 跳出循环，结束循环 跳转控制语句（continue） 跳过本次循环，继续下次循环 注意： continue只能在循环中进行使用！ 123456789101112131415161718public class Demo1Continue &#123; /* continue : 跳过某次循环体内容的执行 注意：使用是基于条件控制, 在循环内部使用. 需求: 模拟电梯上行的过程 1-24层, 4层不停. */ public static void main(String[] args)&#123; for(int i = 1; i &lt;= 24; i++)&#123; if(i == 4)&#123; continue; &#125; System.out.println(i + \"层到了~\"); &#125; &#125; &#125; 123456789101112131415161718public class Demo2Break &#123; /* break : 终止循环体内容的执行 注意：使用是基于条件控制的 break语句只能在循环和switch中进行使用. 需求: 模拟20岁工作到80岁, 60岁退休. */ public static void main(String[] args)&#123; for(int i = 20; i &lt;= 80; i++)&#123; if(i == 60)&#123; break; // 结束整个循环 &#125; System.out.println(i + \"岁正在上班\"); &#125; &#125; &#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import java.util.Scanner;public class Test &#123; /* 需求：程序运行后，用户可多次查询星期对应的减肥计划，直到输入0，程序结束 步骤: 1. 不明确用户操作几次, 使用死循环包裹业务逻辑 2. 匹配到0的时候，使用break结束循环死循环 */ public static void main (String[] args)&#123; lo:while(true)&#123; System.out.println(\"请输入您要查看的星期数:\"); System.out.println(\"(如无需继续查看,请输入0退出程序)\"); // 1. 键盘录入星期数据，使用变量接收 Scanner sc = new Scanner(System.in); int week = sc.nextInt(); // 2. 多情况判断，采用switch语句实现 switch(week)&#123; // 3. 在不同的case中，输出对应的减肥计划 case 0: System.out.println(\"感谢您的使用\"); break lo; case 1: System.out.println(\"跑步\"); break; case 2: System.out.println(\"游泳\"); break; case 3: System.out.println(\"慢走\"); break; case 4: System.out.println(\"动感单车\"); break; case 5: System.out.println(\"拳击\"); break; case 6: System.out.println(\"爬山\"); break; case 7: System.out.println(\"好好吃一顿\"); break; default: System.out.println(\"您的输入有误\"); break; &#125; &#125; &#125;&#125; 5. Random5.1 Random产生随机数（掌握） 概述： Random类似Scanner，也是Java提供好的API，内部提供了产生随机数的功能 API后续课程详细讲解，现在可以简单理解为Java已经写好的代码 使用步骤： 导入包 import java.util.Random; 创建对象 Random r = new Random(); 产生随机数 int num = r.nextInt(10); 解释： 10代表的是一个范围，如果括号写10，产生的随机数就是0-9，括号写20，参数的随机数则是0-19 示例代码： 12345678910111213141516171819202122232425262728293031import java.util.Random;public class Demo1Random &#123; /* Random : 产生随机数 1. 导包 : import java.util.Random; 导包的动作必须出现在类定义的上面 2. 创建对象 : Random r = new Random(); 上面这个格式里面，r 是变量名，可以变，其他的都不允许变 3. 获取随机数 : int number = r.nextInt(10); //获取数据的范围：[0,10) 包括0,不包括10 上面这个格式里面，number是变量名，可以变，数字10可以变。其他的都不允许变 需求: 产生随机数1-10之间的 */ public static void main(String[] args)&#123; // 2. 创建对象 Random r = new Random(); for(int i = 1; i &lt;= 10; i++)&#123; // 3. 获取随机数 int num = r.nextInt(10) + 1; // 1-10 System.out.println(num); &#125; &#125;&#125; 5.3 Random练习-猜数字（应用） 需求： 程序自动生成一个1-100之间的数字，使用程序实现猜出这个数字是多少？ 当猜错的时候根据不同情况给出相应的提示 A. 如果猜的数字比真实数字大，提示你猜的数据大了 B. 如果猜的数字比真实数字小，提示你猜的数据小了 C. 如果猜的数字与真实数字相等，提示恭喜你猜中了 示例代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import java.util.Scanner;import java.util.Random;public class Test &#123; /* 需求：程序自动生成一个1-100之间的数字，使用程序实现猜出这个数字是多少？ 当猜错的时候根据不同情况给出相应的提示 如果猜的数字比真实数字大，提示你猜的数据大了 如果猜的数字比真实数字小，提示你猜的数据小了 如果猜的数字与真实数字相等，提示恭喜你猜中了 1. 准备Random和Scanner对象, 分别用于产生随机数和键盘录入 2. 使用Random产生一个1-100之间的数, 作为要猜的数 3. 键盘录入用户猜的的数据 4. 使用录入的数据(用户猜的数据)和随机数(要猜的数据)进行比较, 并给出提示 5. 以上内容需要多次进行, 但无法预估用户输入几次可以猜测正确, 使用while(true)死循环包裹 6. 猜对之后, break结束. */ public static void main(String[] args)&#123; // 1. 准备Random和Scanner对象, 分别用于产生随机数和键盘录入 Random r = new Random(); Scanner sc = new Scanner(System.in); // 2. 使用Random产生一个1-100之间的数, 作为要猜的数 int randomNum = r.nextInt(100) + 1; // 5. 以上内容需要多次进行, 但无法预估用户输入几次可以猜测正确, 使用while(true)死循环包裹 while(true)&#123; // 3. 键盘录入用户猜的的数据 System.out.println(\"请输入您猜的数据:\"); int num = sc.nextInt(); // 4. 使用录入的数据(用户猜的数据)和随机数(要猜的数据)进行比较, 并给出提示 if(num &gt; randomNum)&#123; System.out.println(\"猜大了\"); &#125;else if(num &lt; randomNum)&#123; System.out.println(\"猜小了\"); &#125;else&#123; // 6. 猜对之后, break结束. System.out.println(\"恭喜,猜中了\"); break; &#125; &#125; System.out.println(\"感谢您的使用\"); &#125;&#125;","categories":[],"tags":[]},{"title":"2_Java基础语法","slug":"2_Java基础语法","date":"2020-11-01T15:49:40.774Z","updated":"2020-11-05T07:56:15.399Z","comments":true,"path":"2020/11/01/2_Java基础语法/","link":"","permalink":"http://yoursite.com/2020/11/01/2_Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/","excerpt":"day02 - Java基础语法1 类型转换在Java中，一些数据类型之间是可以相互转换的。分为两种情况：隐式类型转换和强制类型转换 1.1 隐式转换(理解)","text":"day02 - Java基础语法1 类型转换在Java中，一些数据类型之间是可以相互转换的。分为两种情况：隐式类型转换和强制类型转换 1.1 隐式转换(理解)​ 隐式类型转换:小的数据类型的数据赋值给大的数据类型. ​ 这种转换方式是自动的，直接书写即可。例如： 12double num = 10; // 将int类型的10直接赋值给double类型System.out.println(num); // 输出10.0 ​ 类型从小到大关系图： ​ 说明：如果涉及运算操作,两个不同的数据类型进行运算,他的结果会自动提升为较大的数据类型. ​ 12345678byte b1 = 10;byte b2 = 20;byte b3 = b1 + b2; // 第三行代码会报错，b1和b2会自动转换为int类型，计算结果为int，int赋值给byte需要强制类型转换。// 修改为:int num = b1 + b2;// 或者：byte b3 = (byte) (b1 + b2); 2.不同的数据类型进行运算的时候,计算的结果会自动提升为较大的数据类型.数据类型转换规则如下: byte,short,char—&gt;int—&gt;long—&gt;float—&gt;double 1.2 强制转换(理解)​ 强制类型转换:将大的数据类型的数据赋值给较小的数据类型接收. int a = 13.4; //报错 ​ 强制类型转换格式：目标数据类型 变量名 = (目标数据类型) 数值; ​ 例如：int a = (int)13.4; 123double num1 = 5.5;int num2 = (int) num1; // 将double类型的num1强制转换为int类型System.out.println(num2); // 输出5（小数位直接舍弃） 强制有风险,转换需谨慎. 1.3 类型转换案例(理解)案例代码： 1234byte a = 3;byte b = 4;byte c = a + b; //错误。因为两个byte变量相加，会先提升为int类型byte d = 3 + 4; //正确。常量优化机制 常量优化机制： ​ 在编译时，整数常量的计算会直接算出结果，并且会自动判断该结果是否在byte取值范围内， ​ 在：编译通过 不在：编译失败2. 运算符2.1 算术运算符2.1.1 运算符和表达式（了解）运算符:连接java中变量和常量的特殊符号 表达式：用运算符连接变量和常量符合java语法的式子叫做表达式 ​ 不同运算符连接的表达式体现的是不同类型的表达式。 举例说明： 123int a = 10;int b = 20;int c = a + b; +：是运算符，并且是算术运算符。 a + b：是表达式，由于+是算术运算符，所以这个表达式叫算术表达式。 2.1.2 算术运算符(应用) 符号 作用 说明 + 加 参看小学一年级 - 减 参看小学一年级 * 乘 参看小学二年级，与“×”相同 / 除 参看小学二年级，与“÷”相同 % 取余 获取的是两个数据做除法的余数 注意： /和%的区别：java当中的除非,取得是商,特点是,两个整数相除只能得到整数,如果想要精确,得到小数, 必须有小数参与运算. %得到的是余数. %符号的两个用处: a.一个数对2取模等于0,他是偶数.如果对二取余不等于0,他是奇数. b.小的数对大的数取模,得到的是小的数. c.取一个多位数对应位置上的数,是这个数先除以对应位置,在对10取模,就能得到这个位置上的数, 例如: 12345678910111213141516171819public class Demo&#123; public static void main(String [] args)&#123; //数据类型 变量名 = 初始化值; int a = 693; //取个位数 int ge = 693%10; //取十位数 //693/10 = 69; //69%10 = 9; int shi = 693/10%10; //取百位数 //693/100=6; //6%10=6; int bai = 693/100%10; System.out.println(ge);//3 System.out.println(shi);//9 System.out.println(bai);//6 &#125;&#125; 1234int a = 10;int b = 3;System.out.println(a / b); // 输出结果3System.out.println(a % b); // 输出结果1 2.1.3 字符的“+”操作（理解）char类型参与算术运算，使用的是计算机底层对应的十进制数值。需要我们记住三个字符对应的数值： ‘a’ – 97 a-z是连续的，所以’b’对应的数值是98，’c’是99，依次递加 ‘A’ – 65 A-Z是连续的，所以’B’对应的数值是66，’C’是67，依次递加 ‘0’ – 48 0-9是连续的，所以’1’对应的数值是49，’2’是50，依次递加 123456789// 可以通过使用字符与整数做算术运算，得出字符对应的数值是多少char ch1 = 'a';System.out.println(ch1 + 1); // 输出98，97 + 1 = 98char ch2 = 'A';System.out.println(ch2 + 1); // 输出66，65 + 1 = 66char ch3 = '0';System.out.println(ch3 + 1); // 输出49，48 + 1 = 49 算术表达式中包含不同的基本数据类型的值的时候，整个算术表达式的类型会自动进行提升。 提升规则: ​ 等级顺序：byte,short,char –&gt; int –&gt; long –&gt; float –&gt; double 例如： 123456789byte b1 = 10;byte b2 = 20;// byte b3 = b1 + b2; // 该行报错，因为byte类型参与算术运算会自动提示为int，int赋值给byte可能损失精度int i3 = b1 + b2; // 应该使用int接收byte b3 = (byte) (b1 + b2); // 或者将结果强制转换为byte类型System.out.println(\"-------------------------------\");int num1 = 10;double num2 = 20.0;double num3 = num1 + num2; // 使用double接收，因为num1会自动提升为double类型 2.1.4 字符串的“+”操作（理解）当“+”操作中出现字符串时，这个”+”是字符串连接符，而不是算术运算。就是字符串遇到谁,就把谁拉过来,变成字符串,不管你之前是任何类型. 1System.out.println(\"itheima\"+ 666); // 输出：itheima666 在”+”操作中，如果出现了字符串，就是连接运算符，否则就是算术运算。当连续进行“+”操作时，从左到右按照优先级的顺序挨个执行. 12345678910111213141516171819202122System.out.println(1 + 99 + \"年黑马\"); // 输出：100年黑马System.out.println(1 + 2 + \"itheima\" + 3 + 4); // 输出：3itheima34// 可以使用小括号改变运算的优先级 System.out.println(1 + 2 + \"itheima\" + (3 + 4)); // 输出：3itheima7public class Demo3&#123; /* 这是主方法,是程序的入口,jvm只认main */ public static void main(String [] args)&#123; //数据类型 变量 = 值; String s = \"12\"; System.out.println(s+13);//1213 System.out.println(1+2+s);//312 System.out.println(s+1*2);//122 System.out.println(s+1+2);//1212 System.out.println(s+(1+2));//123 System.out.println(\"12\"+13);//1213 System.out.println(1+2+\"12\");//312 &#125;&#125; 2.1.5 数值拆分（应用）需求： ​ 键盘录入一个三位数，将其拆分为个位，十位，百位，打印在控制台 示例代码： 12345678910111213141516171819202122232425262728import java.util.Scanner;public class Test &#123; public static void main(String[] args) &#123; // 1：使用Scanner键盘录入一个三位数 Scanner sc = new Scanner(System.in); System.out.println(\"请输入一个三位数\"); int num = sc.nextInt(); // 2：个位的计算：数值 % 10 int ge = num % 10; // 3：十位的计算：数值 / 10 % 10 int shi = num / 10 % 10; // 4：百位的计算：数值 / 100 int bai = num / 100; // 5：将个位, 十位, 百位拼接上正确的字符串, 打印即可 System.out.println(\"整数\"+num+\"个位为:\" + ge); System.out.println(\"整数\"+num+\"十位为:\" + shi); System.out.println(\"整数\"+num+\"百位为:\" + bai); &#125;&#125;补充://接收一个整数 //int num = sc.nextInt(); //接收一个小数 //double d = sc.nextDouble(); //输入一个字符串 //String s = sc.nextLine(); 2.2 自增自减运算符（理解） 符号 作用 说明 ++ 自增 变量的值加1 – 自减 变量的值减1 注意事项： ​ ++和– 既可以放在变量的后边，也可以放在变量的前边。 ​ 单独使用的时候，++和–在前面和后面,效果是一样的. ​ 参与操作的时候，如果放在变量的后边，变量的值先参与运算.运算完成之后在进行自增和自减操作 ​ 参与操作的时候，如果放在变量的前边，变量的值先自增或自减,再参与程序的运算. ​ 运算不仅仅是加减乘除的操作,包括打印,以及其他的只要不是单独使用,都可以看做是运算. ​ 速记:你先看到的是啥,你先看到++或–,就先自增或自减,,再参与运算,如果你先看到的是变量,就先参与运算再自增或自减. ​ 最常见的用法：单独使用。 123456789101112131415int i = 10;i++; // 单独使用System.out.println(\"i:\" + i); // i:11int j = 10;++j; // 单独使用System.out.println(\"j:\" + j); // j:11int x = 10;int y = x++; // 赋值运算，++在后边，所以是使用x原来的值赋值给y，x本身自增1System.out.println(\"x:\" + x + \", y:\" + y); // x:11，y:10int m = 10;int n = ++m; // 赋值运算，++在前边，所以是使用m自增后的值赋值给n，m本身自增1System.out.println(\"m:\" + m + \", m:\" + m); // m:11，m:11 练习： 123456789int x = 10;int y = x++ + x++ + x++;System.out.println(y); // y的值是多少？/*解析，三个表达式都是++在后，所以每次使用的都是自增前的值，但程序自左至右执行，所以第一次自增时，使用的是10进行计算，但第二次自增时，x的值已经自增到11了，所以第二次使用的是11，然后再次自增。。。所以整个式子应该是：int y = 10 + 11 + 12;输出结果为33。*/注意：通过此练习深刻理解自增和自减的规律，但实际开发中强烈建议不要写这样的代码！小心挨打！ 2.3 赋值运算符（应用）赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量。 符号 作用 说明 = 赋值 a=10，将10赋值给变量a += 加后赋值 a+=b，将a+b的值给a -= 减后赋值 a-=b，将a-b的值给a *= 乘后赋值 a*=b，将a×b的值给a /= 除后赋值 a/=b，将a÷b的商给a %= 取余后赋值 a%=b，将a÷b的余数给a 注意： 扩展的赋值运算符隐含了强制类型转换。 1234short s = 10;s = s + 10; // 此行代码报出，因为运算中s提升为int类型，运算结果int赋值给short可能损失精度s += 10; // 此行代码没有问题，隐含了强制类型转换，相当于 s = (short) (s + 10); 2.4 关系(比较)运算符（应用）关系运算符有6种关系，分别为小于、小于等于、大于、等于、大于等于、不等于。 符号 说明 == a==b，判断a和b的值是否相等，成立为true，不成立为false != a!=b，判断a和b的值是否不相等，成立为true，不成立为false &gt; a&gt;b，判断a是否大于b，成立为true，不成立为false &gt;= a&gt;=b，判断a是否大于等于b，成立为true，不成立为false &lt; a&lt;b，判断a是否小于b，成立为true，不成立为false &lt;= a&lt;=b，判断a是否小于等于b，成立为true，不成立为false 注意事项： ​ 关系运算符的结果都是boolean类型，要么是true，要么是false。 ​ 千万不要把“==”误写成“=”，”==”是判断是否相等的关系，”=”是赋值。 123456789101112int a = 10;int b = 20;System.out.println(a == b); // falseSystem.out.println(a != b); // trueSystem.out.println(a &gt; b); // falseSystem.out.println(a &gt;= b); // falseSystem.out.println(a &lt; b); // trueSystem.out.println(a &lt;= b); // true// 关系运算的结果肯定是boolean类型，所以也可以将运算结果赋值给boolean类型的变量boolean flag = a &gt; b;System.out.println(flag); // 输出false 2.5 逻辑运算符（应用）逻辑运算符把各个运算的关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断的结果是 true 或 false。 逻辑运算符就是整合多个关系表达式或者布尔常量最终的结果. 符号 作用 说明 &amp; 逻辑与 a&amp;b，a和b都是true，结果为true，否则为false,遇false则false | 逻辑或 a|b，a和b都是false，结果为false，否则为true,遇true则true ^ 逻辑异或 a^b，a和b结果不同为true，相同为false ! 逻辑非 !a，结果和a的结果正好相反 1234567891011121314151617181920212223242526272829//定义变量int i = 10;int j = 20;int k = 30;//&amp; “与”，并且的关系，只要表达式中有一个值为false，结果即为falseSystem.out.println((i &gt; j) &amp; (i &gt; k)); //false &amp; false,输出falseSystem.out.println((i &lt; j) &amp; (i &gt; k)); //true &amp; false,输出falseSystem.out.println((i &gt; j) &amp; (i &lt; k)); //false &amp; true,输出falseSystem.out.println((i &lt; j) &amp; (i &lt; k)); //true &amp; true,输出trueSystem.out.println(\"--------\");//| “或”，或者的关系，只要表达式中有一个值为true，结果即为trueSystem.out.println((i &gt; j) | (i &gt; k)); //false | false,输出falseSystem.out.println((i &lt; j) | (i &gt; k)); //true | false,输出trueSystem.out.println((i &gt; j) | (i &lt; k)); //false | true,输出trueSystem.out.println((i &lt; j) | (i &lt; k)); //true | true,输出trueSystem.out.println(\"--------\");//^ “异或”，相同为false，不同为trueSystem.out.println((i &gt; j) ^ (i &gt; k)); //false ^ false,输出falseSystem.out.println(true ^ (i &gt; k)); //true ^ false,输出trueSystem.out.println((i &gt; j) ^ (i &lt; k)); //false ^ true,输出trueSystem.out.println((i &lt; j) ^ (i &lt; k)); //true ^ true,输出falseSystem.out.println(\"--------\");//! “非”，取反System.out.println((i &gt; j)); //falseSystem.out.println(!(i &gt; j)); //!false，,输出true 2.6 短路逻辑运算符（理解） 符号 作用 说明 &amp;&amp; 短路与 作用和&amp;相同，但是有短路效果 || 短路或 作用和|相同，但是有短路效果 逻辑与&amp;,无论左边执行的结果真假,右边都需要执行 短路与&amp;&amp;，左边为真的时候,右边需要执行,左边为假的时候,右边就不需要执行. 逻辑或|，无论左边执行的结果真假,右边都需要执行 短路或||，左边为假的时候,右边需要执行,左边为真的时候,右边不需要执行. 123456789int x = 3;int y = 4;System.out.println((x++ &gt; 4) &amp; (y++ &gt; 5)); // 两个表达都会运算System.out.println(x); // 4System.out.println(y); // 5System.out.println((x++ &gt; 4) &amp;&amp; (y++ &gt; 5)); // 左边已经可以确定结果为false，右边不参与运算System.out.println(x); // 4System.out.println(y); // 4 2.7 三元运算符（理解）三元运算符语法格式： 1关系表达式(布尔常量)?表达式1:表达式2; 解释：问号前面的位置是判断的条件，判断结果为boolean型，为true时调用表达式1，为false时调用表达式2。其逻辑为：如果条件表达式成立或者满足则执行表达式1，否则执行第二个。 举例： 123int a = 10;int b = 20;int c = a &gt; b ? a : b; // 判断 a&gt;b 是否为真，如果为真取a的值，如果为假，取b的值 2.8 三元运算符案例(应用)需求： ​ 一座寺庙里住着三个和尚，已知他们的身高分别为150cm、210cm、165cm，请用程序实现获取这三个和尚的最高身高。 123456789101112131415161718192021222324252627282930313233public class OperatorTest02 &#123; public static void main(String[] args) &#123; //1：定义三个变量用于保存和尚的身高，单位为cm，这里仅仅体现数值即可。 int height1 = 150; int height2 = 210; int height3 = 165; //2：用三元运算符获取前两个和尚的较高身高值，并用临时身高变量保存起来。 int tempHeight = height1 &gt; height2 ? height1 : height2; //3：用三元运算符获取临时身高值和第三个和尚身高较高值，并用最大身高变量保存。 int maxHeight = tempHeight &gt; height3 ? tempHeight : height3; //4：输出结果 System.out.println(\"maxHeight:\" + maxHeight); &#125;&#125;//导包 import java.util.Scanner;public class Demo&#123; public static void main(String [] args)&#123; //关系表达式(布尔常量)?表达式1:表达式2; //创建对象 Scanner sc = new Scanner(System.in); System.out.println(\"请输入第一个和尚的身高:\"); int heigth1 = sc.nextInt(); System.out.println(\"请输入第二个数和尚的身高:\"); int heigth2 = sc.nextInt(); System.out.println(\"请输入第三个数和尚的身高:\"); int heigth3 = sc.nextInt(); int tempHeigth = heigth1&gt;heigth3?heigth1:heigth3; int max = tempHeigth&gt;heigth2?tempHeigth:heigth2; System.out.println(\"三个和尚的最大身高是\"+max+\"cm\"); &#125; &#125; 3. 流程控制语句在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执行流程。而且，很多时候要通过控制语句的执行顺序来实现我们想要的功能。 我们写完代码,叫做源代码,需要经过编译,启动java编译器生成对应的.class(类文件).开始执行的时候,jvm找到main方法,因为mian方法是程序的入口,从上到下依次执行,但是代码不一定完成都是从上到下挨个执行,因为我们有些代码是需要满足一定条件才能执行的,有些代码是需要不停的循环的去执行.这些需要特殊执行的语句是通过关键字来实现的,jvm遇到这些关键字的时候,就知道他是干嘛的,就会做对应的处理. 3.1 流程控制语句分类(了解)​ 顺序结构:从上到下 依次执行 ​ 分支结构(if, switch) ​ 循环结构(for, while, do…while) 3.2 顺序结构(了解)顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。 3.3 分支结构之if语句3.3.1 if语句格式1（理解）123456格式： if(关系表达式/布尔常量)&#123; 语句体; &#125;注意事项:if语句体可能执行也可能不执行. 执行流程： ① 首先去判断关系表达式的结果 ② 如果为true,执行语句体,如果为false,不执行语句体 ③继续往下执行. 示例 123456789101112131415public class IfDemo &#123; public static void main(String[] args) &#123; System.out.println(\"开始\"); // 如果年龄大于18岁, 就可以上网吧 int age = 17; if(age &gt;= 18)&#123; // int a = 10; System.out.println(\"可以上网吧\"); &#125; System.out.println(\"结束\"); &#125;&#125; 3.3.2 if语句格式2（理解）1234567格式： if(关系表达式/布尔常量)&#123; 语句体1; &#125;else&#123; 语句体2; 三元运算: 关系表达式(布尔常量)?表达式1:表达式2; &#125; 注意:语句体1和语句体2有且只有一个肯定会执行. 执行流程： ①判断关系表达式的结果,是true还是false ②如果是true,执行语句体1,不执行语句体2 ③如果是false,执行语句体2,不执行语句体1. ④继续向下执行其他代码 示例：奇偶数 ​ 任意给出一个整数，请用程序实现判断该整数是奇数还是偶数，并在控制台输出该整数是奇数还是偶数。 123456789101112public class Demo2If &#123; public static void main(String[] args) &#123; // 程序判断一个数, 是奇数还是偶数 int num = 9; if(num % 2 == 0)&#123; System.out.println(\"偶数\"); &#125;else&#123; System.out.println(\"奇数\"); &#125; &#125;&#125; 3.3.3 if语句格式3（理解）12345678910111213格式： if(关系表达式1)&#123; 语句体1; &#125;else if(关系表达式2)&#123; 语句体2; &#125;else if(关系表达式3)&#123; 语句体3; &#125; .... &#125; else if(关系表达式n)&#123; 语句体n; &#125;else&#123; 语句体n+1; &#125; 执行流程： ①首先执行关系表达式1的值,如果为true,执行语句体1,执行完之后,整个if结束.继续向下执行 ②如果为false,执行关系表达式2的值,如果为true,执行语句体2,执行完之后,整个if结束.继续向下执行 ③关系表达式2的值如果为false,执行关系表达式3的值,如果为true,执行语句体3,执行完之后,整个if结束.继续向下执行 ⑤如果所有的关系表达式的值都为false,执行else里面的语句体n+1;执行完之后,整个if结束.继续向下执行 示例： ​ 定义一个在0100之间的变量a, 90100优秀，8089良好，7079中等，6069及格，059请努力加油！ 123456789101112131415161718public class Demo3If &#123; public static void main(String[] args)&#123; int score = 65; if(score &gt;= 90 &amp;&amp; score &lt;= 100)&#123; System.out.println(\"优秀\"); &#125;else if (score &gt;= 80 &amp;&amp; score &lt;= 89)&#123; System.out.println(\"良好\"); &#125;else if (score &gt;= 70 &amp;&amp; score &lt;= 79)&#123; System.out.println(\"中等\"); &#125;else if (score &gt;= 60 &amp;&amp; score &lt;= 69)&#123; System.out.println(\"及格\"); &#125;else if (score &gt;= 0 &amp;&amp; score &lt;= 59)&#123; System.out.println(\"请努力加油\"); &#125;else&#123; System.out.println(\"成绩有误!\"); &#125; &#125;&#125; 3.3.4 if语句格式3案例（应用）需求：小明快要期末考试了，小明爸爸对他说，会根据他不同的考试成绩，送他不同的礼物，假如你可以控制小明的得分，请用程序实现小明到底该获得什么样的礼物，并在控制台输出。 分析： ​ ①小明的考试成绩未知，可以使用键盘录入的方式获取值 ​ ②由于奖励种类较多，属于多种判断，采用if…else…if格式实现 ​ ③为每种判断设置对应的条件 ​ ④为每种判断设置对应的奖励 1234567891011121314151617181920212223242526import java.util.Scanner;public class IfTest02 &#123; public static void main(String[] args)&#123; // 1. 使用Scanner录入考试成绩 Scanner sc = new Scanner(System.in); System.out.println(\"请输入您的成绩:\"); int score = sc.nextInt(); // 2. 判断成绩是否在合法范围内 0~100 if(score &gt;=0 &amp;&amp; score &lt;= 100)&#123; // 合法成绩 // 3. 在合法的语句块中判断成绩范围符合哪一个奖励 if(score &gt;= 95 &amp;&amp; score &lt;= 100)&#123; System.out.println(\"自行车一辆\"); &#125;else if(score &gt;= 90 &amp;&amp; score &lt;= 94)&#123; System.out.println(\"游乐场一次\"); &#125;else if(score &gt;= 80 &amp;&amp; score &lt;= 89)&#123; System.out.println(\"变形金刚一个\"); &#125;else &#123; System.out.println(\"挨顿揍, 这座城市又多了一个伤心的人~\"); &#125; &#125;else&#123; // 非法的话, 给出错误提示 System.out.println(\"您的成绩输入有误!\"); &#125; &#125;&#125;","categories":[],"tags":[]},{"title":"1_Java概述","slug":"1_Java概述","date":"2020-11-01T15:48:20.534Z","updated":"2020-11-06T16:02:08.321Z","comments":true,"path":"2020/11/01/1_Java概述/","link":"","permalink":"http://yoursite.com/2020/11/01/1_Java%E6%A6%82%E8%BF%B0/","excerpt":"1. Java概述1.1 Java语言背景介绍（了解）语言：人与人交流的一种方式 计算机语言：人与计算机进行交流的一种方式,java就是其中一种最优秀的方式之一. Java语言是美国Sun公司（Stanford University Network）在1995年推出的计算机语言","text":"1. Java概述1.1 Java语言背景介绍（了解）语言：人与人交流的一种方式 计算机语言：人与计算机进行交流的一种方式,java就是其中一种最优秀的方式之一. Java语言是美国Sun公司（Stanford University Network）在1995年推出的计算机语言 Java之父：高司令 2009年，Sun公司被甲骨文公司收购，所以我们现在访问oracle官网即可：https://www.oracle.com java语言的三个版本： ​ JavaSE: Java 语言的（标准版），用于桌面应用的开发，是其他两个版本的基础 ​ JavaME: Java 语言的（小型版），用于嵌入式消费类电子设备 ​ JavaEE: Java 语言的（企业版），用于 Web 方向的网站开发 1.2 Java语言跨平台原理（理解）平台:操作系统 跨平台:同一套java代码可以不经任何修改在任意操作系统上运行. 操作系统:windows,mac,linux. java程序的跨平台是通过jvm(java虚拟机,当做一个假想的计算机)解决的,但jvm本身不垮平台,我们只需要在对应操作系统上安装对应jv即可. Java程序并非是直接运行的，Java编译器将Java源程序编译成与平台无关的字节码文件(class文件)，然后由Java虚拟机（JVM）对字节码文件解释执行。所以在不同的操作系统下，只需安装不同的Java虚拟机即可实现java程序的跨平台。 1.3 JRE和JDK（记忆）开发的三个步骤: 1.编写程序 2.编译程序 3.运行程序 JVM（Java Virtual Machine），java虚拟机,主要是解决跨平台. JRE（Java Runtime Environment），java运行环境,包含jvm+核心类库. JDK（Java Development Kit）,java开发工具包:jre+开发工具 总结：jdk(开发工具包) = jre(jvm+核心类库)+ 开发工具 1.4 JDK的下载和安装（应用）版本:我们的程序是需要根据社会的发展和需求进行不断的更新和迭代.进而更新我们写的程序,版本就依次叠加. java5里程碑 java8公司用的最多 我们学习12,11 1.4.1 下载通过官方网站获取JDK http://www.oracle.com 注意：不同的操作系统需要下载对应的jdk. 1.4.2 安装傻瓜式安装，下一步即可。但默认的安装路径是在C:\\Program Files下，为方便统一管理建议修改安装路径，将与开发相关的软件都安装到一个目录下，例如：E:\\develop。 注意：安装路径不要包含中文或者空格等特殊字符（使用纯英文目录）。 1.4.3 JDK的安装目录介绍 目录名称 说明 bin 该路径下存放了JDK的各种工具命令。javac和java就放在这个目录。 conf 该路径下存放了JDK的相关配置文件。 include 该路径下存放了一些平台特定的头文件。 jmods 该路径下存放了JDK的各种模块。 legal 该路径下存放了JDK各模块的授权文档。 lib 该路径下存放了JDK工具的一些补充JAR包。 2. 第一个演示程序2.1 常用DOS命令（应用）在接触集成开发环境之前，我们需要使用命令行窗口对java程序进行编译和运行，所以需要知道一些常用DOS命令。 1、打开命令行窗口的方式：win + r打开运行窗口，输入cmd，回车。 2、常用命令及其作用 操作 说明 盘符名称: 盘符切换。E:回车，表示切换到E盘。 dir 查看当前路径下的内容。 cd 目录 进入单级目录。cd itheima cd .. 回退到上一级目录。 cd 目录1\\目录2... 进入多级目录。cd itheima\\JavaSE cd / 回退到盘符目录。 cls 清屏。 exit 退出命令提示符窗口。 2.2 Path环境变量的配置（应用）我们希望在任何情况下都能去运行我们jdk的bin目录下的开发工具。 1.如果我们想要去执行某个应用程序的时候，想在任何目录下去执行，那我们应该怎么办？ a.我们手动的点入到这个命令所在的文件夹,然后打开dos窗口,进行执行 b.我们讲此命令的地址配置到环境变量中,就可以在任意目录下去执行我们的命令. 原理:我们在执行命令的时候,首先系统回去当前文件夹下面去寻找有没有这个命令,如果有,就执行,如果没有就去环境变量中去寻找,有就执行,没有就报错, 2.3 HelloWorld案例（应用）HelloWorld案例是指在计算机屏幕上输出“HelloWorld”这行文字。 各种计算机语言都习惯使用该案例作为第一个演示案例。 2.3.1 Java程序开发运行流程开发Java程序，需要三个步骤: 编写程序: 新建一个记事本,将后缀名改成 文件名.java 编译程序:javac 文件名.java 执行程序: java 文件名 2.3.2 HelloWorld案例的编写1、新建文本文档文件，修改名称为HelloWorld.java。 2、用记事本打开HelloWorld.java文件，输写程序内容。 12345public class HelloWorld&#123; public static void main(String [] args)&#123; System.out.println(\"HelloWorld\"); &#125;&#125; 2.3.3 HelloWorld案例的编译和运行存文件，打开命令行窗口，将目录切换至java文件所在目录，编译java文件生成class文件，运行class文件。 编译：javac 文件名.java 范例：javac HelloWorld.java 执行：java 文件名 范例：java HelloWorld 2.4 HelloWorld案例详解（理解） java程序都是由一个个类组成的,类是java程序的基本组成单位.类是由方法和其他东西组成. 类的定义格式:class 类名{ } main方法是官方定义好的方法,他是程序的入口,一个类如果需要执行,必须有main(主方法)方法. jvm只认main方法. main方法的定义格式为: public static void main(String [] args){ } 2.5 HelloWorld案例常见问题（理解）2.5.1 BUG程序在运行过程中遇到的错误或没有达到预期效果的转态. 2.5.2 BUG的解决1、具备识别BUG的能力：多看 2、具备分析BUG的能力：多做 3、具备解决BUG的能力：多查 2.5.3 HelloWorld案例常见问题1、非法字符问题。Java中的符号都是英文格式的。 2、大小写问题。Java语言对大小写敏感（区分大小写）。 3、在系统中显示文件的扩展名，避免出现HelloWorld.java.txt文件。 4、编译命令后的java文件名需要带文件后缀.java 5、运行命令后的class文件名（类名）不带文件后缀 2.6 Notepad++软件的安装和使用（应用）2.6.1 什么要使用Notepad++软件Notepad++功能比windows中的自带记事本功能强大，除了可以用来制作一般的纯文字说明文件，也十分适合编写计算机程序代码。Notepad++有行号，能够快速定位问题位置，还有语法高亮度显示、代码折叠等功能。而且它是免费的。 2.6.2 Notepad++软件安装安装：傻瓜式安装，一直下一步即可。建议也安装到统一的开发软件目录下，比如E:\\develop。 2.6.3Notepad++软件配置安装完毕之后，为了使用方便，做一个简单的配置：修改默认语言和编码。 3. java基础语法3.1 注释（理解）注释是对代码的解释和说明文字，可以提高程序的可读性，因此在程序中添加必要的注释文字十分重要。Java中的注释分为三种： 单行注释。 1//从双斜线开始到本行尾结束,都不参与程序的编译和执行 多行注释。 1234/*这里面涉及到的多行信息都不参与程序的编译和执行*/注意：多行注释不能嵌套使用。 123456789101112131415161718192021/*java是由一个个类组成,类是java程序基本组成单位类的定义格式:public class 类名&#123; &#125;*/public class A&#123; /* 这是主方法 他是程序的入口,一个类需要执行,必须有主方法,他是由官方定义好的 他的定义格式 public static void main(String [] args)&#123; &#125; */ public static void main(String [] args)&#123; //这是一条输出语句,双引号里面写啥,控制台就打印什么 System.out.println(\"AD\"); &#125;&#125; 文档注释。文档注释以/**开始，以*/结束。（以后讲) 3.2 关键字（理解）关键字是被java官方赋予了特殊含义的单词. 关键字的特点： ​ 1.全部由字母组成,并且字母都是小写 ​ 2.常见的代码编辑器会对其进行高亮显示. ​ 例如:class public static void 3.3 常量（应用）常量：在程序的运行中,其值不可发生改变的量,叫做常量. Java中的常量分类： ​ 字符串常量 :被双引号引起来的内容叫做字符串,理解为生活中的一句话,包括0个或多个字符 ​ 整数常量 : 所有整数 ​ 小数常量 :所有小数 ​ 字符常量 :被单引号引起来的单个字符,就是一个字 ​ 布尔常量 :只有两个 true(真,正确的,对的) 和 false(假,错误的,不对的) ​ 空常量 : null 不能直接打印 除空常量外，其他常量均可使用输出语句直接输出。 123456789101112131415161718192021222324252627public class A&#123; /* 这是主方法 他是程序的入口,一个类需要执行,必须有主方法,他是由官方定义好的 他的定义格式 public static void main(String [] args)&#123; &#125; */ public static void main(String [] args)&#123; //这是一条输出语句,双引号里面写啥,控制台就打印什么 //被双引号引起来的内容叫做字符串,理解为生活中的一句话 System.out.println(\"你好,我好,大家好\"); //所有整数 System.out.println(10); // System.out.println(\"10\"); //小数 所有小数 System.out.println(10.0); //字符 System.out.println('我'); //布尔常量 true和false System.out.println(true); System.out.println(false); //空常量 null 不能被打印 // System.out.println(null); &#125;&#125; 3.4 变量的介绍(理解)变量其实就是内存中的一块存储空间,里面存在可能会经常发生改变的数值 变量也是在程序运行中,值可能会发生改变的量. 变量的定义格式： ​ 数据类型 变量名 = 初始化值; ​ 数据类型：马上讲解 ​ 变量名：自己起的名字 ​ 数据值： 一开始,你自己定,开始你想他是多少就是多少. 3.5 数据类型（应用）3.5.1 计算机存储单元我们知道计算机是可以用来存储数据的，但是无论是内存还是硬盘，计算机存储设备的最小信息单元叫“位（bit）”，我们又称之为“比特位”，通常用小写的字母”b”表示。而计算机中最基本的存储单元叫“字节（byte）”， 通常用大写字母”B”表示，字节是由连续的8个位组成。 除了字节外还有一些常用的存储单位，其换算单位如下： 1B = 8b 1kb = 1024B 1mb = 1024kb 1Gb = 1024mb 1Tb = 1024Gb 3.5.2 Java中的数据类型Java是一个强类型语言，Java中的数据必须明确数据类型。在Java中的数据类型包括基本数据类型和引用数据类型两种。 Java中的基本数据类型：四类8种 数据类型 关键字 内存占用 取值范围 整数类型 byte 1 -128~127 short 2 -32768~32767 int(默认) 4 -2的31次方到2的31次方-1 long 8 -2的63次方到2的63次方-1 浮点类型 float 4 负数：-3.402823E+38到-1.401298E-45 正数： 1.401298E-45到3.402823E+38 double(默认) 8 负数：-1.797693E+308到-4.9000000E-324 正数：4.9000000E-324 到1.797693E+308 字符类型 char 2 0-65535 布尔类型 boolean 1 true，false 引用数据类型:类,数组,接口. 说明： ​ e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。 ​ 在java中整数默认是int类型，浮点数默认是double类型。 3.6 变量（应用）3.6.1 变量的定义变量：变量其实就是内存中的一块存储空间,里面存在可能会经常发生改变的数值 变量也是在程序运行中,值可能会发生改变的量. 从本质上讲，变量是内存中的一小块区域，其值可以在一定范围内变化。 变量的定义格式： 123数据类型 变量名 = 初始化值; // 声明变量并赋值int age = 18;System.out.println(age); 或者(扩展) 123456// 先声明，后赋值（使用前赋值即可）数据类型 变量名;变量名 = 初始化值;double money;money = 55.5;System.out.println(money); 还可以(扩展) 在同一行定义多个同一种数据类型的变量，中间使用逗号隔开。但不建议使用这种方式，降低程序的可读性。 123456789int a = 10, b = 20; // 定义int类型的变量a和b，中间使用逗号隔开System.out.println(a);System.out.println(b);int c,d; // 声明int类型的变量c和d，中间使用逗号隔开c = 30;d = 40;System.out.println(c);System.out.println(d); 3.6.2 变量的修改123int a = 10;a = 30; //修改变量的值System.out.println(a); 变量前面不加数据类型时，表示修改已存在的变量的值。 1234567891011121314151617181920212223242526272829303132333435363738public class Demo&#123; public static void main(String [] args)&#123; //变量的定义格式 数据类型 变量名 = 初始化值; 定义变量并赋值 /*int a = 10; double d = 3.14; char c = '我'; boolean b = true; //使用变量 直接使用变量名即可 //直接打印 System.out.println(a); System.out.println(b); System.out.println(c); System.out.println(d); // 修改值 变量名 = 新值; a = 20; b= false; c='你'; d = 5.20; System.out.println(a); System.out.println(b); System.out.println(c); System.out.println(d); //第二种定义格式 //定义一个变量不复制 数据类型 变量名; int aa ; // 变量名 = 初始化值; aa = 60; System.out.println(aa);*/ //定义变量的第三种格式 一次性定义多个相同类型的变量 //数据类型 变量名 = 初始化值,变量名 = 初始化值.... int a = 10,b=20,c=30; System.out.println(a); System.out.println(b); System.out.println(c); &#125;&#125; 3.7 变量的注意事项(理解) 在同一对花括号中，变量名不能重复。 变量在使用之前，必须初始化（赋值）。 定义long类型的变量时，需要在整数的后面加L（大小写均可，建议大写）。因为整数默认是int类型，整数太大可能超出int范围。 定义float类型的变量时，需要在小数的后面加F（大小写均可，建议大写）。因为浮点数的默认类型是double， double的取值范围是大于float的，类型不兼容。 3.8 键盘录入（理解）我们可以通过 Scanner 类来获取用户的输入。使用步骤如下： 1、导包。Scanner 类在java.util包下，所以需要将该类导入。导包的语句需要定义在类的上面。 1import java.util.Scanner; 2、创建Scanner对象。 1Scanner sc = new Scanner(System.in);// 创建Scanner对象，sc表示变量名，其他均不可变 3、接收数据 1int i = sc.nextInt(); // 表示将键盘录入的值作为int数返回。 示例： 1234567891011121314//导包 (告诉高司令我要用一下你写的类)import java.util.Scanner;public class Demo2&#123; public static void main(String [] args)&#123; // 数据类型 变量名 = 初始化值; //创建对象(使用规则) sc是变量名 除了他可以改 其他的都不要改 Scanner sc1 = new Scanner(System.in); //接收用户输入的值 System.out.println(\"请您输入一个数字\"); int a = sc1.nextInt(); System.out.println(a); &#125; &#125; 3.9 标识符（理解）标识符是用户编程时使用的名字，用于给类、方法、变量、常量等命名。 Java中标识符的组成规则： 1.数字,字母,_(下划线),$组成. 2.不能以数字开头 3.区分大小写. 4.不能是关键字 Java中标识符的命名约定： ​ 小驼峰式命名：变量,方法 ​ 首字母小写,从第二个单词开始首字母大写 ​ 例如：username、studentNumber等。 ​ 大驼峰式命名：类名 ​ 所有组成单词首字母大写. ​ 例如:HelloWold​ ​","categories":[],"tags":[]},{"title":"PAT乙级1025","slug":"PAT乙级1025","date":"2020-02-15T15:48:25.000Z","updated":"2020-02-15T15:48:25.347Z","comments":true,"path":"2020/02/15/PAT乙级1025/","link":"","permalink":"http://yoursite.com/2020/02/15/PAT%E4%B9%99%E7%BA%A71025/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"广度优先搜索","slug":"广度优先搜索","date":"2020-02-12T14:40:52.000Z","updated":"2020-02-12T14:41:58.803Z","comments":true,"path":"2020/02/12/广度优先搜索/","link":"","permalink":"http://yoursite.com/2020/02/12/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/","excerpt":"","text":"#include&lt;bits/stdc++.h&gt;using namespace std; /int N,K; //抓住这头牛const int MAXN=100000;int visited[MAXN+10];struct Step{ int x; int steps; Step(int xx,int s):x(xx),steps(s){ }};queue q;/ int main(){ /cin&gt;&gt;N&gt;&gt;K; memset(visited,0,sizeof(visited)); q.push(Step(N,0)); visited[N]=1; while(!q.empty()){ Step s=q.front(); if(s.x==K){ cout&lt;&lt;s.steps&lt;&lt;endl; return 0; }else{ if(s.x&gt;=0&amp;&amp;!visited[s.x-1]){ q.push(Step(s.x-1,s.steps+1)); visited[s.x-1]=1; } if(s.x+1&lt;=MAXN&amp;&amp;!visited[s.x+1]){ q.push(Step(s.x+1,s.steps+1)); visited[s.x+1]=1; } if(s.x2&lt;=MAXN&amp;&amp;!visited[s.x2]){ q.push(Step(s.x2,s.steps+1)); visited[s.x2]=1; } q.pop(); } }/ return 0;}","categories":[],"tags":[]},{"title":"贪心","slug":"贪心","date":"2020-02-11T07:34:19.000Z","updated":"2020-02-11T07:35:55.861Z","comments":true,"path":"2020/02/11/贪心/","link":"","permalink":"http://yoursite.com/2020/02/11/%E8%B4%AA%E5%BF%83/","excerpt":"","text":"#include&lt;bits/stdc++.h&gt;using namespace std; /const double eps=1e-6; //圣诞老人的礼物struct Candy{ int v; int w; bool operator &lt; (const Candy &amp; c){ return double(v)/w-double(c.v)/c.w&gt;eps; }}candies[110];/ struct Cow{ //分配畜栏 int a,b; int No; bool operator &lt; (const Cow &amp;c) const{ return a&lt;c.a; };}cows[50100];int pos[50100];struct Stall{ int end; int No; bool operator&lt;(const Stall &amp;s) const{ return end&gt;s.end; } Stall(int e,int n):end(e),No(n){ }}; int main(){ /int n,w; scanf(“%d%d”,&amp;n,&amp;w); for(int i=0;i&lt;n;i++){ scanf(“%d%d”,&amp;candies[i].v,&amp;candies[i].w); } sort(candies,candies+n); int totalW=0; double totalV=0; for(int i=0;i&lt;n;i++){ if(totalW+candies[i].w&lt;=w){ totalW+=candies[i].w; totalV+=candies[i].v; }else{ totalV+=candies[i].v*double(w-totalW)/candies[i].w; break; } } printf(“%.1f”,totalV);/ int n; scanf(&quot;%d&quot;,&amp;n); for(int i=0;i&lt;n;++i){ scanf(&quot;%d%d&quot;,&amp;cows[i].a,&amp;cows[i].b); cows[i].No=i; } sort(cows,cows+n); int total=0; priority_queue&lt;Stall&gt; pq; for(int i=0;i&lt;n;++i){ if(pq.empty()){ ++total; pq.push(Stall(cows[i].b,total)); pos[cows[i].No]=total; }else{ Stall st=pq.top(); if(st.end&lt;cows[i].a){ pq.pop(); pos[cows[i].No]=st.No; pq.push(Stall(cows[i].b,st.No)); }else{ ++total; pq.push(Stall(cows[i].b,total)); pos[cows[i].No]=total; } } } printf(&quot;%d\\n&quot;,total); for(int i=0;i&lt;n;i++){ printf(&quot;%d\\n&quot;,pos[i]); } return 0;}","categories":[],"tags":[]},{"title":"动态规划","slug":"动态规划","date":"2020-02-10T11:54:26.000Z","updated":"2020-02-10T11:55:04.676Z","comments":true,"path":"2020/02/10/动态规划/","link":"","permalink":"http://yoursite.com/2020/02/10/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","excerpt":"","text":"#include&lt;bits/stdc++.h&gt;using namespace std; /const int MAXN=1010; //最长上升子序列int a[MAXN];int maxLen[MAXN];/ char sz1[1000]; //最长公共子序列char sz2[1000];int maxLen[1000][1000]; int main(){ /int N; cin&gt;&gt;N; for(int i=1;i&lt;=N;i++){ cin&gt;&gt;a[i]; maxLen[i]=1; } for(int i=2;i&lt;=N;i++){ for(int j=1;j&lt;i;j++){ if(a[i]&gt;a[j]) maxLen[i]=max(maxLen[i],maxLen[j]+1); } } cout&lt;&lt;*max_element(maxLen+1,maxLen+N+1);/ while(cin&gt;&gt;sz1&gt;&gt;sz2){ int length1=strlen(sz1); int length2=strlen(sz2); int nTmp; int i,j; for(i=0;i&lt;=length1;i++) maxLen[i][0]=0; for(j=0;j&lt;=length2;j++) maxLen[0][j]=0; for(i=1;i&lt;=length1;i++){ for(j=1;j&lt;=length2;j++){ if(sz1[i-1]==sz2[j-1]) maxLen[i][j]=maxLen[i-1][j-1]+1; else maxLen[i][j]=max(maxLen[i][j-1],maxLen[i-1][j]); } } cout&lt;&lt;maxLen[length1][length2]&lt;&lt;endl; } return 0;}","categories":[],"tags":[]},{"title":"深度优先搜索","slug":"深度优先搜索","date":"2020-02-09T14:07:52.000Z","updated":"2020-02-09T14:08:11.093Z","comments":true,"path":"2020/02/09/深度优先搜索/","link":"","permalink":"http://yoursite.com/2020/02/09/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/","excerpt":"","text":"#include&lt;bits/stdc++.h&gt;using namespace std;/*int R,C; //城堡问题int rooms[60][60];int color[60][60];int maxRoomArea=0,roomNum=0;int roomArea;void Dfs(int i,int k){ if(color[i][k]) return; ++roomArea; color[i][k]=roomNum; if((rooms[i][k]&amp;1)==0) Dfs(i,k-1); if((rooms[i][k]&amp;2)==0) Dfs(i-1,k); if((rooms[i][k]&amp;4)==0) Dfs(i,k+1); if((rooms[i][k]&amp;8)==0) Dfs(i+1,k);} int visited[30][50]; //采方格int ways(int i,int j,int n){ if(n==0) return 1; visited[i][j]=1; int num=0; if(!visited[i][j-1]) num+=ways(i,j-1,n-1); if(!visited[i][j+1]) num+=ways(i,j+1,n-1); if(!visited[i+1][j]) num+=ways(i+1,j,n-1); visited[i][j]=0; return num;} int k,n,r; //寻路问题struct Road{ int d,L,t;};vector&lt; vector &gt; G(110);int minL[110][10010];int minLen;int totalLen;int totalCost;int visited[110]; void dfs(int s){ if(s==n){ minLen=min(minLen,totalLen); return; } for(int i=0;i&lt;G[s].size();++i){ Road r=G[s][i]; if(totalCost+r.t&gt;k) continue; if(!visited[r.d]){ if(totalLen+r.L&gt;=minLen) continue; if(totalLen+r.L&gt;=minL[r.d][totalCost+r.t]) continue; minL[r.d][totalCost+r.t]=totalLen+r.L; totalLen+=r.L; totalCost+=r.t; visited[r.d]=1; dfs(r.d); totalLen-=r.L; totalCost-=r.t; visited[r.d]=0; } }}*/ int N,M; //生日蛋糕int minArea=1&lt;&lt;30;int area=0; void Dfs(int v,int n,int r,int h){ if(n==0){ if(v) return ; else{ minArea=min(minArea,area); return; } } if(v&lt;=0) return; for(int rr=r;rr&gt;=n;–rr){ if(n==M) area=rrrr; for(int hh=h;hh&gt;=n;–hh){ area+=2rrhh; Dfs(v-rrrrhh,n-1,rr-1,hh-1); area-=2rr*hh; } }} int main(){ /cin&gt;&gt;R&gt;&gt;C; for(int i=1;i&lt;=R;i++){ for(int k=1;k&lt;=C;k++){ cin&gt;&gt;rooms[i][k]; } } memset(color,0,sizeof(color)); for(int i=1;i&lt;=R;i++){ for(int k=1;k&lt;=C;k++){ if(!color[i][k]){ ++roomNum; roomArea=0; Dfs(i,k); maxRoomArea=max(roomArea,maxRoomArea); } } } cout&lt;&lt;roomNum&lt;&lt;endl&lt;&lt;maxRoomArea&lt;&lt;endl;/ /*int n; cin&gt;&gt;n; memset(visited,0,sizeof(visited)); cout&lt;&lt;ways(0,25,n); cin&gt;&gt;k&gt;&gt;n&gt;&gt;r; for(int i=0;i&lt;r;i++){ int s; Road r; cin&gt;&gt;s&gt;&gt;r.d&gt;&gt;r.L&gt;&gt;r.t; if(s!=r.d){ G[s].push_back(r); } } memset(visited,0,sizeof(visited)); totalLen=0; minLen=1&lt;&lt;30; totalCost=0; visited[1]=1; for(int i=0;i&lt;110;i++){ for(int j=0;j&lt;10010;j++){ minL[i][j]=1&lt;&lt;30; } } dfs(1); if(minLen&lt;(1&lt;&lt;30)){ cout&lt;&lt;minLen&lt;&lt;endl; }else{ cout&lt;&lt;-1&lt;&lt;endl; }*/ int maxR=5,maxH=100; cin&gt;&gt;N&gt;&gt;M; Dfs(N,M,maxR,maxH); if(minArea==1&lt;&lt;30) cout&lt;&lt;0&lt;&lt;endl; else cout&lt;&lt;minArea&lt;&lt;endl; return 0;}","categories":[],"tags":[]},{"title":"分治再探","slug":"分治再探","date":"2020-02-08T15:45:45.000Z","updated":"2020-02-08T15:54:00.706Z","comments":true,"path":"2020/02/08/分治再探/","link":"","permalink":"http://yoursite.com/2020/02/08/%E5%88%86%E6%B2%BB%E5%86%8D%E6%8E%A2/","excerpt":"","text":"#include&lt;bits/stdc++.h&gt;using namespace std;#define MAX 101int D[MAX][MAX]={0};int n;int maxsum[MAX][MAX];int MaxSum(int i,int j){ if(maxsum[i][j]!=-1) return maxsum[i][j]; if(i==n) maxsum[i][j]=D[i][j]; else{ int x=MaxSum(i+1,j); int y=MaxSum(i+1,j+1); maxsum[i][j]=max(x,y)+D[i][j]; } return maxsum[i][j];}int main(){ int i,j; cin&gt;&gt;n; for(i=1;i&lt;=n;i++){ for(j=1;j&lt;=i;j++){ cin&gt;&gt;D[i][j]; maxsum[i][j]=-1; } } cout&lt;&lt;MaxSum(1,1)&lt;&lt;endl; return 0;}","categories":[],"tags":[]},{"title":"递归和分治","slug":"递归和分治","date":"2020-02-07T15:10:35.000Z","updated":"2020-02-07T15:50:52.451Z","comments":true,"path":"2020/02/07/递归和分治/","link":"","permalink":"http://yoursite.com/2020/02/07/%E9%80%92%E5%BD%92%E5%92%8C%E5%88%86%E6%B2%BB/","excerpt":"","text":"#include&lt;bits/stdc++.h&gt;using namespace std;void Swap(int &amp;a,int &amp;b){ int temp=0; temp=a; a=b; b=temp;} void Hanoi(int n,char src,char mid,char dest){ //汉诺塔问题 if(n==1){ cout&lt;&lt;src&lt;&lt;”-&gt;”&lt;&lt;dest&lt;&lt;endl; return; } Hanoi(n-1,src,dest,mid); cout&lt;&lt;src&lt;&lt;”-&gt;”&lt;&lt;dest&lt;&lt;endl; Hanoi(n-1,mid,src,dest);} int N;int queenPos[100];void NQueen(int k){ //N皇后 if(k==N){ for(int i=0;i&lt;N;i++){ cout&lt;&lt;queenPos[i]+1&lt;&lt;’ ‘; } cout&lt;&lt;endl; return; } for(int i=0;i&lt;N;i++){ int j; for(j=0;j&lt;k;j++){ if(queenPos[j]==i||abs(queenPos[j]-i)==abs(k-j)){ break; } } if(j==k){ queenPos[k]=i; NQueen(k+1); } }} double exp(){ //逆波兰式 char s[20]; cin&gt;&gt;s; switch(s[0]){ case ‘+’: return exp()+exp(); case ‘-‘: return exp()-exp(); case ‘‘: return exp()exp(); case ‘/‘: return exp()/exp(); default: return atof(s); break; }} int expression_value(){ //表达式的值 int term_value(); int result=term_value(); bool more=true; while(more){ char op=cin.peek(); if(op==’+’||op==’-‘){ cin.get(); int value=term_value(); if(op==’+’) result+=value; else result-=value; } else more=false; } return result;}int term_value(){ int factor_value(); int result=factor_value(); while(true){ char op=cin.peek(); if(op==’‘||op==’/‘){ cin.get(); int value=factor_value(); if(op==’‘) result*=value; else result/=value; } else break; } return result; }int factor_value(){ int result=0; char c=cin.peek(); if(c==’(‘){ cin.get(); result=expression_value(); cin.get(); }else{ while(isdigit(c)){ result=10*result+c-‘0’; cin.get(); c=cin.peek(); } } return result;} bool HuiWen(string s){ //回文串判断,小写输入 int h=0,t=s.size()-1; while(h&lt;=t){ if(s[h]!=s[t]) return 0; h++;t–; } return 1;} void QuanPai(int a[],int k,int n){ //全排列 if(n==k){ for(int i=1;i&lt;=n;i++){ cout&lt;&lt;a[i]&lt;&lt;’ ‘; } cout&lt;&lt;endl; }else{ for(int i=k;i&lt;n+1;i++){ Swap(a[k],a[i]); QuanPai(a,k+1,n); Swap(a[k],a[i]); } } } int main(){ //递归 /*char a=&apos;A&apos;,b=&apos;B&apos;,c=&apos;C&apos;; int n=0; cin&gt;&gt;n; Hanoi(n,a,b,c);*/ /*cin&gt;&gt;N; NQueen(0);*/ //cout&lt;&lt;exp()&lt;&lt;endl; //cout&lt;&lt;expression_value()&lt;&lt;endl; //分治 /*string s; int flag=-1; cin&gt;&gt;s; flag=HuiWen(s); cout&lt;&lt;&quot;回文串:&quot;&lt;&lt;flag&lt;&lt;endl; */ /*int *a,len; cout&lt;&lt;&quot;len:&quot;&lt;&lt;endl; cin&gt;&gt;len; a=new int[len+1]; for(int i=1;i&lt;len+1;i++){ a[i]=i; } QuanPai(a,1,len);*/ return 0;}","categories":[],"tags":[]},{"title":"STL实践","slug":"STL实践","date":"2020-02-06T15:39:45.000Z","updated":"2020-02-06T17:54:54.461Z","comments":true,"path":"2020/02/06/STL实践/","link":"","permalink":"http://yoursite.com/2020/02/06/STL%E5%AE%9E%E8%B7%B5/","excerpt":"","text":"#include #include#include#include#include#include#include#include#includeusing namespace std;struct Student{ int a,b; bool operator &lt; (const Student &amp;rs) const{ if(a==rs.a) return b&lt;rs.b; return a&lt;rs.a; }}; int main(){ priority_queue q; deque ::const_iterator i; set ::const_iterator j; map &lt;int,char&gt;::iterator k; vector v; deque d; map&lt;int,char&gt; m; set s; s.insert(5);s.insert(8);s.insert(1);s.insert(3);s.insert(3); m.insert(pair&lt;int,char&gt;(1,’a’)); m.insert(pair&lt;int,char&gt;(2,’a’)); m.insert(pair&lt;int,char&gt;(3,’c’)); m.insert(pair&lt;int,char&gt;(4,’d’)); /m.insert(map&lt;int,char&gt;::value_type(1,’a’)); m.insert(map&lt;int,char&gt;::value_type(1,’b’)); m.insert(map&lt;int,char&gt;::value_type(3,’c’)); m.insert(map&lt;int,char&gt;::value_type(4,’d’));/ for(k=m.begin();k!=m.end();k++){ cout&lt;&lt;1&lt;&lt;’ ‘; } cout &lt;&lt;endl; for(int i=0;i&lt;10;i++){ v.push_back(i); d.push_front(i); } for(i=d.begin();i&lt;d.end();i++){ cout&lt;&lt;i&lt;&lt;’ ‘; } cout &lt;&lt;endl; for(j=s.begin();j!=s.end();j++){ cout&lt;&lt;j&lt;&lt;’ ‘; } cout &lt;&lt;endl; for(int i=0;i&lt;10;i++){ q.push(i); } while(q.size()){ cout&lt;&lt;q.top()&lt;&lt;&apos; &apos;; q.pop(); } cout &lt;&lt;endl; priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt;q_; for(int i=0;i&lt;10;i++){ q_.push(i); } while(q_.size()){ cout&lt;&lt;q_.top()&lt;&lt;&apos; &apos;; q_.pop(); } cout &lt;&lt;endl; Student student[5]={{5,5},{5,4},{3,1},{2,2},{2,1}}; sort(student,student+5); for(int i=0;i&lt;5;i++){ cout&lt;&lt;student[i].a&lt;&lt;&apos; &apos;&lt;&lt;student[i].b&lt;&lt;endl; } priority_queue &lt;Student&gt; qq; for(int i=0;i&lt;5;i++){ qq.push(student[i]); } while(qq.size()){ Student now=qq.top(); cout&lt;&lt;now.a&lt;&lt;&apos; &apos;&lt;&lt;now.b&lt;&lt;endl; qq.pop(); } cout &lt;&lt;endl; return 0;}","categories":[],"tags":[]},{"title":"图的遍历","slug":"图的遍历","date":"2020-02-05T14:42:29.000Z","updated":"2020-02-05T14:45:27.662Z","comments":true,"path":"2020/02/05/图的遍历/","link":"","permalink":"http://yoursite.com/2020/02/05/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/","excerpt":"","text":"邻接表存储DFSvoid Visit(Vertex v){ printf(“%d\\n”,v);}void DFS(LGraph Graph,Vertex v,void (*Visit)(Vertex)){ ProToAdjVNode W; Visit(v); Visited[v]=true; for(W=Graph-&gt;G[v].FitstEdge;W;W=W-&gt;Next){ if(!Visited[W-&gt;Adjv]){ DFS(Graph,W-&gt;Adjv,Visit); } }} 邻接矩阵存储BFSvoid Visit(Vertex v){ printf(“正在访问的顶点%d\\n”,v);}bool IsEdge(MGraph Graph,Vertex v,Vertex w){ return Graph-&gt;G[v][w]&lt;INFNITY?true:false;}void BFS(MGraph Graph,Vertex S,void(*Visit)(Vertex)){ queue Q; Vertex V,W; Visit(S); Visited[S]=true; Q.push(S); while(!Q.empty()){ V=Q.front();Q.pop(); for(W=0;WNv;W++){ if(!Visited[W]&amp;&amp;IsEdge(Graph,V,W)){ Visit(W); Visited[W]=true; Q.push(W); } } }}","categories":[],"tags":[]},{"title":"图的两种表示法","slug":"图的两种表示法","date":"2020-02-04T14:38:09.000Z","updated":"2020-02-04T14:38:32.857Z","comments":true,"path":"2020/02/04/图的两种表示法/","link":"","permalink":"http://yoursite.com/2020/02/04/%E5%9B%BE%E7%9A%84%E4%B8%A4%E7%A7%8D%E8%A1%A8%E7%A4%BA%E6%B3%95/","excerpt":"","text":"邻接矩阵表示:#include#include#define MaxVertexNum 100#define INFNITY 65535using namespace std;typedef int Vertex;typedef int WeightType;typedef char DataType; typedef struct ENode{ Vertex v1,v2; WeightType Weight;}*PtrToENode;typedef PtrToENode Edge; typedef struct GNode{ int Nv,Ne; WeightType G[MaxVertexNum][MaxVertexNum]; DataType Data[MaxVertexNum];}*PtrToMNode;typedef PtrToMNode MGraph; MGraph CreateGraph(int VertexNum){ Vertex v,w; MGraph Graph; Graph=(MGraph)malloc(sizeof(struct GNode)); Graph-&gt;Nv=VertexNum; Graph-&gt;Ne=0; for(v=0;vNv;v++){ for(w=0;wNv;w++){ Graph-&gt;G[v][w]=INFNITY; } } return Graph;}void InsertEdge(MGraph Graph,Edge E){ Graph-&gt;G[E-&gt;v1][E-&gt;v2]=E-&gt;Weight; Graph-&gt;G[E-&gt;v2][E-&gt;v1]=E-&gt;Weight;}MGraph BuildGraph(){ MGraph Graph; Edge E; Vertex v; int Nv,i; scanf(“%d”,&amp;Nv); Graph=CreateGraph(Nv); scanf(“%d”,&amp;(Graph-&gt;Ne)); if(Graph-&gt;Ne!=0){ E=(Edge)malloc(sizeof(struct ENode)); for(i=0;iNe;i++){ scanf(“%d%d%d”,&amp;E-&gt;v1,&amp;E-&gt;v2,&amp;E-&gt;Weight); InsertEdge(Graph,E); } } for(v=0;vNv;v++){ scanf(“ %c”,&amp;(Graph-&gt;Data[v])); } return Graph;}int main(){ MGraph Graph; Graph=BuildGraph(); int n=0; int v=-1; printf(“请输入你要查询的顶点编号:”); scanf(“%d”,&amp;v); printf(“你查询的顶点%c的邻接点:\\n”,Graph-&gt;Data[v]); for(n=0;nNv;n++){ if(Graph-&gt;G[v][n]&lt;INFNITY&amp;&amp;Graph-&gt;G[v][n]&gt;0){ printf(“%c “,Graph-&gt;Data[n]); } } printf(“\\n”); for(int i=0;iNv;i++){ for(int j=0;jNv;j++){ printf(“%d “,Graph-&gt;G[i][j]); } printf(“\\n”); } /* 5 5 0 1 2 0 3 10 0 4 13 1 2 4 2 4 9 a e d c b */ return 0;} 邻接表表示#include#includeusing namespace std; #define MaxVertexNum 100typedef int Vertex;typedef int WeightType;typedef char DataType; typedef struct ENode{ Vertex v1,v2; WeightType Weight;}*PtrToENode;typedef PtrToENode Edge; typedef struct AdjVNode{ Vertex Adjv; WeightType Weight; AdjVNode Next;}ProToAdjVNode; typedef struct VNode{ ProToAdjVNode FitstEdge; DataType Data;}AdjList[MaxVertexNum]; typedef struct GNode{ int Nv; int Ne; AdjList G;}*PtrToGNode;typedef PtrToGNode LGraph; LGraph CreateGraph(int VertexNum){ Vertex v; LGraph Graph; Graph=(LGraph)malloc(sizeof(struct GNode)); Graph-&gt;Nv=VertexNum; Graph-&gt;Ne=0; for(v=0;vNv;v++){ Graph-&gt;G[v].FitstEdge=NULL; } return Graph;} void InsertEdge(LGraph Graph,Edge E){ ProToAdjVNode NewNode; NewNode=(ProToAdjVNode)malloc(sizeof(struct AdjVNode)); NewNode-&gt;Adjv=E-&gt;v2; NewNode-&gt;Weight=E-&gt;Weight; NewNode-&gt;Next=Graph-&gt;G[E-&gt;v2].FitstEdge; Graph-&gt;G[E-&gt;v1].FitstEdge=NewNode; NewNode=(ProToAdjVNode)malloc(sizeof(struct AdjVNode)); NewNode-&gt;Adjv=E-&gt;v1; NewNode-&gt;Weight=E-&gt;Weight; NewNode-&gt;Next=Graph-&gt;G[E-&gt;v2].FitstEdge; Graph-&gt;G[E-&gt;v2].FitstEdge=NewNode;}LGraph BuildGraph(){ LGraph Graph; Edge E; Vertex v; int Nv,i; scanf(“%d”,&amp;Nv); Graph=CreateGraph(Nv); scanf(“%d”,&amp;(Graph-&gt;Ne)); if(Graph-&gt;Ne!=0){ E=(Edge)malloc(sizeof(ENode)); for(i=0;iNe;i++){ scanf(“%d %d %d”,&amp;E-&gt;v1,&amp;E-&gt;v2,&amp;E-&gt;Weight); InsertEdge(Graph,E); } } for(v=0;vNv;v++){ scanf(“ %c”,&amp;(Graph-&gt;G[v].Data)); } return Graph;}int main(){ LGraph Graph; Graph=BuildGraph(); int n=0; int v=-1; printf(“请输入你要查询的顶点编号:”); scanf(“%d”,&amp;v); printf(“你查询的顶点%c的邻接点:”,Graph-&gt;G[v].Data); AdjVNode M; M=Graph-&gt;G[v].FitstEdge; while(M!=NULL){ printf(“%c “,Graph-&gt;G[M-&gt;Adjv].Data); M=M-&gt;Next; } printf(“\\n”); / 5 5 1 0 2 3 0 10 4 0 13 2 1 4 4 2 9 a e d c b */ return 0;}","categories":[],"tags":[]},{"title":"栈队列二叉树的简单实现","slug":"静态栈和队列以及二叉树","date":"2020-02-03T13:03:14.000Z","updated":"2020-02-03T13:24:29.597Z","comments":true,"path":"2020/02/03/静态栈和队列以及二叉树/","link":"","permalink":"http://yoursite.com/2020/02/03/%E9%9D%99%E6%80%81%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E4%BB%A5%E5%8F%8A%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"#include#includeusing namespace std;typedef char Elemtype;typedef struct BiTNode{ Elemtype data; BiTNode lchild,rchild;}BiTNode,BiTree;int CreatBiTree(BiTree &amp;T){ //建立二叉树 Elemtype ch; cin&gt;&gt;ch; if(ch==’#’) T=NULL; else{ T=(BiTNode)malloc(sizeof(BiTNode)); T-&gt;data=ch; CreatBiTree(T-&gt;lchild); CreatBiTree(T-&gt;rchild); } return 0;}void PreOrder(BiTree &amp;T){ if(T!=NULL){ cout&lt;data&lt;&lt;endl; PreOrder(T-&gt;lchild); PreOrder(T-&gt;rchild); }}void InOrder(BiTree &amp;T){ if(T!=NULL){ InOrder(T-&gt;lchild); cout&lt;data&lt;&lt;endl; InOrder(T-&gt;rchild); }}void PostOrder(BiTree &amp;T){ if(T!=NULL){ PostOrder(T-&gt;lchild); PostOrder(T-&gt;rchild); cout&lt;data&lt;&lt;endl; }} int main(){ BiTree T; CreatBiTree(T); printf(“先序遍历:\\n”); // a PreOrder(T); // b c printf(“中序遍历:\\n”); //d e InOrder(T); // f g printf(“后序遍历:\\n”); PostOrder(T); return 0;}","categories":[],"tags":[]},{"title":"数据结构几种排序的简单实现","slug":"数据结构内部排序简单实现","date":"2020-02-02T15:16:58.000Z","updated":"2020-02-02T15:46:04.696Z","comments":true,"path":"2020/02/02/数据结构内部排序简单实现/","link":"","permalink":"http://yoursite.com/2020/02/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%86%85%E9%83%A8%E6%8E%92%E5%BA%8F%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"源代码如下,亲测可用(基于c语言)#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;void swap(int a,int *b){ //交换 int temp; temp=a; a=b; *b=temp;}//直接插入排序void Insert(int a[],int n){ int i=0,j=0,k=0,temp=0; for(i=1;i&lt;n;i++){ for(j=0;j&lt;i;j++){ if(a[i]&lt;a[j]){ temp=a[i]; for(k=i-1;k&gt;=j;k–){ a[k+1]=a[k]; } a[j]=temp; } } }}//希尔排序void Shell(int a[],int n){ int D=5,Dk=0,i=0,j=0,k=0,temp=0; for(D=5;D&gt;=1;D/=2){ //增量 for(Dk=0;Dk&lt;D;Dk++){ //执行增量排序次数 for(i=Dk+D;i&lt;n;i+=D){ //基于增量的直接插入排序 for(j=Dk;j&lt;i;j+=D){ if(a[i]&lt;a[j]){ temp=a[i]; for(k=i-D;k&gt;=j;k-=D){ a[k+D]=a[k]; } a[j]=temp; } } } } }}//简单选择排序void Select(int a[],int n){ int i=0,j=0,min=-1,minIndex,temp=0; for(i=0;i&lt;n-1;i++){ min=a[i]; for(j=i;j&lt;n;j++){ //找出最小元素的下标 if(a[j]&lt;min){ min=a[j]; minIndex=j; } } swap(a+i,a+minIndex); }}//冒泡排序void Bubble(int a[],int n){ int i=0,j=0,temp=0; for(i=n-1;i&gt;0;i–){ for(j=0;j&lt;i;j++){ if(a[j]&gt;a[j+1]){ swap(a+j,a+j+1); } } }}//快速排序void Quick(int a[],int low,int high){ if(low&gt;high) return; int L=low,R=high,pivot=a[low]; while(L&lt;R){ while(L&lt;R&amp;&amp;a[R]&gt;=pivot){ //从右边开始找到比枢纽小的值移到左边 R–; } if(L&lt;R){ a[L]=a[R]; L++; } while(L&lt;R&amp;&amp;a[L]&lt;pivot){ //从左边开始找到比枢纽小的值移到右边 L++; } if(L&lt;R){ a[R]=a[L]; R–; } } Quick(a,low,L-1); Quick(a,L+1,high); }int main(){ int begin=0,end=0; int i=0,a[100]={0}; for(i=0;i&lt;100;i++){ a[i]=rand()%1000; } //Insert(a,100); //Bubble(a,100); //Select(a,100); //Shell(a,100); Quick(a,0,99); for(i=1;i&lt;=100;i++){ printf(“%d “,a[i-1]); if(i%10==0) printf(“\\n”); } return 0;}","categories":[],"tags":[]},{"title":"我的第一篇博客文章","slug":"我的第一篇博客文章","date":"2020-02-01T13:05:40.000Z","updated":"2020-02-01T13:35:05.766Z","comments":true,"path":"2020/02/01/我的第一篇博客文章/","link":"","permalink":"http://yoursite.com/2020/02/01/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/","excerpt":"","text":"万事开头难–坚持 大四即将工作的老学长即日起更新博客. 励志做一名中级程序员 qaq~~ 座右铭: 我赚钱养家,你拿去花.","categories":[],"tags":[]}],"categories":[],"tags":[]}